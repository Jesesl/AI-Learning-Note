{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"\u89e3\u51b3\u9762\u8bd5\u9898\u7684\u601d\u8def/","text":"\u753b\u56fe\u8ba9\u62bd\u8c61\u95ee\u9898\u5f62\u8c61\u5316 \u753b\u56fe\u662f\u5728\u9762\u8bd5\u8fc7\u7a0b\u4e2d\u5e94\u8058\u8005\u7528\u6765\u5e2e\u52a9\u81ea\u5df1\u5206\u6790\u3001\u63a8\u7406\u7684\u5e38\u7528\u624b\u6bb5\u3002\u5f88\u591a\u9762\u8bd5\u9898\u5f88\u62bd\u8c61\uff0c\u4e0d\u5bb9\u6613\u627e\u5230\u89e3\u51b3\u529e\u6cd5\u3002\u8fd9\u65f6\u4e0d\u59a8\u753b\u51fa\u4e00\u4e9b\u4e0e\u9898\u76ee\u76f8\u5173\u7684\u56fe\u5f62\uff0c\u501f\u4ee5\u8f85\u52a9\u81ea\u5df1\u89c2\u5bdf\u548c\u601d\u8003\u3002\u56fe\u5f62\u80fd\u4f7f\u62bd\u8c61\u7684\u95ee\u9898\u5177\u4f53\u5316\u3001\u5f62\u8c61\u5316\uff0c\u5e94\u8058\u8005\u8bf4\u4e0d\u5b9a\u901a\u8fc7\u51e0\u5e45\u56fe\u5f62\u5c31\u80fd\u627e\u5230\u89c4\u5f8b\uff0c\u4ece\u800c\u627e\u5230\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u6709\u4e0d\u5c11\u4e0e\u6570\u636e\u7ed3\u6784\u76f8\u5173\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u4e8c\u53c9\u6811\u3001\u4e8c\u7ef4\u6570\u7ec4\u3001\u94fe\u8868\u7b49\u95ee\u9898\uff0c\u90fd\u53ef\u4ee5\u91c7\u7528\u753b\u56fe\u7684\u65b9\u6cd5\u6765\u5206\u6790\u3002 \u5728\u9762\u8bd5\u7684\u65f6\u5019\uff0c\u5e94\u8058\u8005\u9700\u8981\u5411\u9762\u8bd5\u5b98\u89e3\u91ca\u81ea\u5df1\u7684\u601d\u8def\u3002\u5bf9\u4e8e\u590d\u6742\u7684\u95ee\u9898\uff0c\u5e94\u8058\u8005\u5149\u7528\u8bed\u8a00\u672a\u5fc5\u80fd\u591f\u8bf4\u5f97\u6e05\u695a\u3002\u8fd9\u65f6\u5019\u53ef\u4ee5\u753b\u51fa\u51e0\u5e45\u56fe\u5f62\uff0c\u4e00\u8fb9\u770b\u7740\u56fe\u5f62\u4e00\u8fb9\u8bb2\u89e3\uff0c\u9762\u8bd5\u5b98\u5c31\u80fd\u66f4\u52a0\u8f7b\u677e\u5730\u7406\u89e3\u5e94\u8058\u8005\u7684\u601d\u8def\u3002\u8fd9\u5bf9\u5e94\u8058\u8005\u662f\u6709\u76ca\u7684\uff0c\u56e0\u4e3a\u9762\u8bd5\u5b98\u4f1a\u89c9\u5f97\u4ed6\u5177\u6709\u5f88\u597d\u7684\u6c9f\u901a\u4ea4\u6d41\u80fd\u529b\u3002 \u9762\u8bd5\u9898 27\uff1a\u4e8c\u53c9\u6811\u7684\u955c\u50cf \u64cd\u4f5c\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\uff0c\u5c06\u5176\u53d8\u6362\u4e3a\u6e90\u4e8c\u53c9\u6811\u7684\u955c\u50cf\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class ListNode: def __init__(self, x): self.x = x self.left = None self.right = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u6b63\u5e38\u7684\u4e8c\u53c9\u6811\u3001\u53ea\u6709\u5de6\u5b50\u6811\uff08\u53f3\u5b50\u6811\uff09\u7684\u4e8c\u53c9\u6811\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811\u3001\u53ea\u6709\u6839\u8282\u70b9\u7684\u6811\u3002 # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811 result1 = Mirror(None) # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u53ea\u6709\u6839\u8282\u70b9\u7684\u6811 result2 = Mirror(ListNode(1)) # \u529f\u80fd\u6d4b\u8bd5\uff1a node_1 = ListNode(8) node_2 = ListNode(6) node_3 = ListNode(10) node_4 = ListNode(5) node_5 = ListNode(7) node_6 = ListNode(9) node_7 = ListNode(11) node_1.left, node_1.right = node_2, node_3 node_2.left, node_2.right = node_4, node_5 node_3.left, node_3.right = node_6, node_7 result3 = Mirror(node_1) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u53ea\u6709\u5de6\u5b50\u6811\uff08\u53f3\u5b50\u6811\uff09\u7684\u4e8c\u53c9\u6811 node_1 = ListNode(1) node_2 = ListNode(2) node_3 = ListNode(3) node_4 = ListNode(4) node_1.left = node_2 node_2.left = node_3 node_3.left = node_4 result4 = Mirror(node_1) \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u9012\u5f52\u904d\u5386\u3002 def Mirror(root): mirror_traver(root) return root def mirror_traver(node): if node: Mirror(node.left) Mirror(node.right) node.left, node.right = node.right, node.left \u3010\u8bf4\u660e\u3011\uff1a\u5728\u904d\u5386\u4e8c\u53c9\u6811\u7684\u540c\u65f6\u4ea4\u6362\u5f53\u524d\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u8282\u70b9\u3002\u4e0a\u8ff0\u4ee3\u7801\u8fd8\u6709\u6539\u8fdb\u7684\u7a7a\u95f4\uff0c\u51cf\u5c11\u9012\u5f52\u8c03\u7528\u7684\u6df1\u5ea6\u3002 def mirror_traver(node): if node: if node.left: Mirror(node.left) if node.right: Mirror(node.right) node.left, node.right = node.right, node.left \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5c42\u5e8f\u904d\u5386\u3002 def Mirror(root): if not root: return None node_list = [root] while len(node_list) > 0: node = node_list.pop(0) if node.left: node_list.append(node.left) if node.right: node_list.append(node.right) node.left, node.right = node.right, node.left return root \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u4e8c\u53c9\u6811\u7684\u7406\u89e3\u3002\u672c\u9898\u5b9e\u8d28\u4e0a\u662f\u5229\u7528\u6811\u7684\u904d\u5386\u7b97\u6cd5\u89e3\u51b3\u95ee\u9898\u3002 \u8003\u67e5\u5e94\u8058\u8005\u7684\u601d\u7ef4\u80fd\u529b\u3002\u6811\u7684\u955c\u50cf\u662f\u4e00\u4e2a\u62bd\u8c61\u7684\u6982\u5ff5\uff0c\u5e94\u8058\u8005\u9700\u8981\u5728\u77ed\u65f6\u95f4\u5185\u60f3\u6e05\u695a\u6c42\u955c\u50cf\u7684\u6b65\u9aa4\u5e76\u8f6c\u6362\u4e3a\u4ee3\u7801\u3002\u5e94\u8058\u8005\u53ef\u4ee5\u901a\u8fc7\u753b\u56fe\u628a\u62bd\u8c61\u7684\u95ee\u9898\u5f62\u8c61\u5316\uff0c\u8fd9\u6709\u52a9\u4e8e\u5176\u5feb\u901f\u627e\u5230\u89e3\u9898\u601d\u8def\u3002 \u9762\u8bd5\u9898 28\uff1a\u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u4e00\u9897\u4e8c\u53c9\u6811\u662f\u4e0d\u662f\u5bf9\u79f0\u7684\u3002\u6ce8\u610f\uff0c\u5982\u679c\u4e00\u4e2a\u4e8c\u53c9\u6811\u540c\u6b64\u4e8c\u53c9\u6811\u7684\u955c\u50cf\u662f\u540c\u6837\u7684\uff0c\u5b9a\u4e49\u5176\u4e3a\u5bf9\u79f0\u7684\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class ListNode: def __init__(self, x): self.val = x self.left = None self.right = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u5bf9\u79f0\u7684\u4e8c\u53c9\u6811\uff0c\u975e\u5bf9\u79f0\u4e8c\u53c9\u6811\uff08\u7ed3\u6784\u4e0d\u5bf9\u79f0\u3001\u7ed3\u6784\u5bf9\u79f0\u4f46\u8282\u70b9\u7684\u503c\u4e0d\u5bf9\u79f0\uff09\uff0c\u6240\u6709\u8282\u70b9\u503c\u90fd\u76f8\u540c\u7684\u4e8c\u53c9\u6811\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811\uff0c\u53ea\u6709\u6839\u8282\u70b9\u7684\u6811\u3002 # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811 result1 = isSymmetrical(None) # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u53ea\u6709\u6839\u8282\u70b9\u7684\u6811 result2 = isSymmetrical(ListNode(1)) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u975e\u5bf9\u79f0\u4e8c\u53c9\u6811 node_1 = ListNode(8) node_2 = ListNode(6) node_3 = ListNode(10) node_4 = ListNode(5) node_5 = ListNode(7) node_6 = ListNode(9) node_7 = ListNode(11) node_1.left, node_1.right = node_2, node_3 node_2.left, node_2.right = node_4, node_5 node_3.left, node_3.right = node_6, node_7 result3 = isSymmetrical(node_1) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u975e\u5bf9\u79f0\u4e8c\u53c9\u6811 node_1 = ListNode(5) node_2 = ListNode(3) node_3 = ListNode(3) node_4 = ListNode(4) node_5 = ListNode(4) node_6 = ListNode(2) node_7 = ListNode(2) node_8 = ListNode(1) node_1.left, node_1.right = node_2, node_3 node_2.left = node_4 node_3.right = node_5 node_4.left = node_6 node_5.right = node_7 node_7.right = node_8 result4 = isSymmetrical(node_1) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u975e\u5bf9\u79f0\u4e8c\u53c9\u6811 node_1 = ListNode(5) node_2 = ListNode(5) node_3 = ListNode(5) node_4 = ListNode(5) node_5 = ListNode(5) node_6 = ListNode(5) node_7 = ListNode(5) node_1.left, node_1.right = node_2, node_3 node_2.left = node_4 node_3.right = node_5 node_4.left = node_6 node_5.left = node_7 result5 = isSymmetrical(node_1) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u5bf9\u79f0\u4e8c\u53c9\u6811 node_1 = ListNode(8) node_2 = ListNode(6) node_3 = ListNode(6) node_4 = ListNode(5) node_5 = ListNode(7) node_6 = ListNode(7) node_7 = ListNode(5) node_1.left, node_1.right = node_2, node_3 node_2.left, node_2.right = node_4, node_5 node_3.left, node_3.right = node_6, node_7 result6 = isSymmetrical(node_1) \u3010\u6ce8\u610f\u4e8b\u9879\u3011\uff1a\u7a7a\u6811\u548c\u53ea\u6709\u6839\u8282\u70b9\u7684\u6811\u90fd\u88ab\u89c6\u4e3a\u5bf9\u79f0\u7684\u4e8c\u53c9\u6811\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5c42\u5e8f\u904d\u5386\u5b9e\u73b0\u3002 def isSymmetrical(pRoot): if not pRoot: return True node_list = [pRoot] while len(node_list): layer_nodes = [] for node in node_list: if node: layer_nodes.append(node.left) layer_nodes.append(node.right) # \u5224\u65ad\u662f\u5426\u5173\u4e8e\u4e2d\u70b9\u5bf9\u79f0 length = len(layer_nodes) start, end = 0, length - 1 if length & 0x01 == 1: return False while True: if start >= end: break node_start = layer_nodes[start].val if layer_nodes[start] else 0 node_end = layer_nodes[end].val if layer_nodes[end] else 0 if node_start != node_end: return False start += 1 end -= 1 node_list = layer_nodes return True \u3010\u8bf4\u660e\u3011\uff1a \u9996\u5148\u9488\u5bf9\u7279\u6b8a\u8f93\u5165\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\u3002 \u5c42\u5e8f\u904d\u5386\u8fc7\u7a0b\u4e2d\u83b7\u53d6\u5b50\u8282\u70b9\u96c6\u5408\uff0c\u5e76\u4fdd\u5b58\u5230\u5217\u8868 layer_nodes \u4e2d\u3002 \u5224\u65ad layer_nodes \u4e2d\u7684\u5143\u7d20\u4e2a\u6570\u662f\u5426\u4e3a\u5076\u6570\uff0c\u82e5\u4e3a\u5947\u6570\uff0c\u5219\u8bf4\u660e\u4e0d\u5bf9\u79f0\uff0c\u53ef\u76f4\u63a5\u8fd4\u56de False\u3002 \u82e5\u4e3a\u5076\u6570\uff0c\u5219\u7ee7\u7eed\u5224\u65ad\uff1a\u4ece\u5217\u8868\u7684\u4e24\u7aef\u9010\u6b65\u5411\u4e2d\u95f4\u9760\u62e2\uff0c\u5e76\u4f9d\u6b21\u6bd4\u8f83\u5217\u8868\u4e24\u7aef\u7684\u8282\u70b9\u662f\u5426\u76f8\u540c\u3002\u82e5\u4e0d\u76f8\u540c\uff0c\u5219\u8bf4\u660e\u4e0d\u5bf9\u79f0\uff0c\u8fd4\u56de False\u3002 \u5faa\u73af\u7ed3\u675f\u5b8c\u6bd5\uff0c\u8bf4\u660e\u5f53\u524d\u4e8c\u53c9\u6811\u662f\u5bf9\u79f0\u7684\uff0c\u8fd4\u56de True\u3002 \u96be\u70b9\uff1alayer_nodes \u9700\u8981\u8bb0\u5f55\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u5355\u7eaf\u5b58\u50a8\u503c\u65e0\u6cd5\u6b63\u786e\u5224\u65ad\uff0c\u4f8b\u5982\u6d4b\u8bd5\u7528\u4f8b 5\uff08result5\uff09\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5148\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u3002 def isSymmetrical(pRoot): if not pRoot: return True pre_nodes = [] past_nodes = [] def pre_traver(node): if node: pre_nodes.append(node.val) pre_traver(node.left) pre_traver(node.right) else: pre_nodes.append('#') def past_traver(node): if node: past_traver(node.left) past_traver(node.right) past_nodes.append(node.val) else: past_nodes.append('#') pre_traver(pRoot) past_traver(pRoot) print(pre_nodes, list(reversed(past_nodes))) return pre_nodes == list(reversed(past_nodes)) \u3010\u8bf4\u660e\u3011\uff1a\u5148\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u7684\u8282\u70b9\u987a\u5e8f\u6070\u597d\u662f\u76f8\u53cd\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u901a\u8fc7\u5148\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u5f97\u5230\u904d\u5386\u987a\u5e8f\uff0c\u7136\u540e\u5c06\u5176\u4e2d\u4e00\u4e2a\u987a\u5e8f\u5012\u7f6e\uff0c\u6700\u540e\u8fdb\u884c\u6bd4\u8f83\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7a7a\u8282\u70b9\u4e5f\u9700\u8981\u4fdd\u5b58\uff0c\u76ee\u7684\u540c\u4e0a\u4e00\u4e2a\u7a0b\u5e8f\u5b9e\u73b0\uff08\u8bb0\u5f55\u4f4d\u7f6e\u4fe1\u606f\uff09\u3002\u5177\u4f53\u53ef\u53c2\u8003\u4e66\u672c\u4e0a\u7684\u8bb2\u89e3 P 160\u3002 \u3010\u6539\u8fdb\u3011\uff1a\u5c06\u540e\u5e8f\u904d\u5386\u4fee\u6539\u4e0b\uff0c\u53ef\u51cf\u5c11\u540e\u7eed\u7684\u5012\u7f6e\u64cd\u4f5c\u3002 def past_traver(node): if node: past_nodes.append(node.val) past_traver(node.right) past_traver(node.left) else: past_nodes.append('#') pre_traver(pRoot) past_traver(pRoot) print(pre_nodes, past_nodes) return pre_nodes == past_nodes \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u4e8c\u53c9\u6811\u7684\u7406\u89e3\u3002\u672c\u9898\u5b9e\u8d28\u4e0a\u5229\u7528\u6811\u7684\u904d\u5386\u7b97\u6cd5\u89e3\u51b3\u95ee\u9898\u3002 \u8003\u67e5\u5e94\u8058\u8005\u7684\u601d\u7ef4\u80fd\u529b\u3002\u6811\u7684\u5bf9\u79f0\u662f\u4e00\u4e2a\u62bd\u8c61\u7684\u6982\u5ff5\uff0c\u5e94\u8058\u8005\u9700\u8981\u5728\u77ed\u65f6\u95f4\u5185\u60f3\u6e05\u695a\u5224\u65ad\u5bf9\u79f0\u7684\u6b65\u9aa4\u5e76\u8f6c\u6362\u4e3a\u4ee3\u7801\u3002\u5e94\u8058\u8005\u53ef\u4ee5\u901a\u8fc7\u753b\u56fe\u628a\u62bd\u8c61\u7684\u95ee\u9898\u5f62\u8c61\u5316\uff0c\u8fd9\u6709\u52a9\u4e8e\u5176\u5feb\u901f\u627e\u5230\u89e3\u9898\u601d\u8def\u3002 \u4e3e\u4f8b\u8ba9\u62bd\u8c61\u95ee\u9898\u5177\u4f53\u5316 \u501f\u52a9\u4e3e\u4f8b\u6a21\u62df\u7684\u65b9\u6cd5\u6765\u601d\u8003\u5206\u6790\u590d\u6742\u7684\u95ee\u9898\u3002\u5f53\u4e00\u773c\u770b\u4e0d\u51fa\u95ee\u9898\u4e2d\u9690\u85cf\u7684\u89c4\u5f8b\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u8bd5\u7740\u7528\u4e00\u4e24\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u6a21\u62df\u64cd\u4f5c\u7684\u8fc7\u7a0b\uff0c\u8fd9\u6837\u8bf4\u4e0d\u5b9a\u5c31\u80fd\u901a\u8fc7\u5177\u4f53\u7684\u4f8b\u5b50\u627e\u5230\u62bd\u8c61\u7684\u89c4\u5f8b\u3002 \u5177\u4f53\u7684\u4f8b\u5b50\u4e5f\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5411\u9762\u8bd5\u5b98\u89e3\u91ca\u7b97\u6cd5\u601d\u8def\u3002\u7b97\u6cd5\u901a\u5e38\u662f\u5f88\u62bd\u8c61\u7684\uff0c\u7528\u8bed\u8a00\u4e0d\u5bb9\u6613\u8868\u8ff0\u5f97\u6e05\u695a\uff0c\u53ef\u4ee5\u8003\u8651\u4e3e\u4e00\u4e24\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u544a\u8bc9\u9762\u8bd5\u5b98\u6211\u4eec\u7684\u7b97\u6cd5\u662f\u600e\u4e48\u4e00\u6b65\u6b65\u5904\u7406\u8fd9\u4e2a\u4f8b\u5b50\u7684\u3002 \u5177\u4f53\u7684\u4f8b\u5b50\u8fd8\u80fd\u5e2e\u52a9\u6211\u4eec\u786e\u4fdd\u4ee3\u7801\u7684\u8d28\u91cf\u3002\u5728\u9762\u8bd5\u4e2d\u5199\u5b8c\u4ee3\u7801\u4e4b\u540e\uff0c\u5e94\u8be5\u5148\u68c0\u67e5\u4e00\u904d\uff0c\u786e\u4fdd\u6ca1\u6709\u95ee\u9898\u518d\u4ea4\u7ed9\u9762\u8bd5\u5b98\u3002\u600e\u4e48\u68c0\u67e5\u5462\uff1f\u53ef\u4ee5\u8fd0\u884c\u51e0\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u3002\u5728\u5206\u6790\u95ee\u9898\u7684\u65f6\u5019\u91c7\u7528\u7684\u4f8b\u5b50\u5c31\u662f\u6d4b\u8bd5\u7528\u4f8b\u3002\u53ef\u4ee5\u628a\u8fd9\u4e9b\u4f8b\u5b50\u5f53\u4f5c\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5728\u5fc3\u91cc\u6a21\u62df\u8fd0\u884c\uff0c\u770b\u6bcf\u4e00\u6b65\u64cd\u4f5c\u4e4b\u540e\u7684\u7ed3\u679c\u548c\u6211\u4eec\u9884\u671f\u7684\u662f\u4e0d\u662f\u4e00\u81f4\u3002\u5982\u679c\u6bcf\u4e00\u6b65\u7684\u7ed3\u679c\u90fd\u548c\u4e8b\u5148\u9884\u8ba1\u7684\u4e00\u81f4\uff0c\u6211\u4eec\u5c31\u80fd\u786e\u4fdd\u4ee3\u7801\u7684\u6b63\u786e\u6027\u4e86\u3002 \u9762\u8bd5\u9898 30\uff1a\u5305\u542b min \u51fd\u6570\u7684\u6808 \u5b9a\u4e49\u6808\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u5728\u8be5\u7c7b\u578b\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5f97\u5230\u6808\u4e2d\u6240\u542b\u6700\u5c0f\u5143\u7d20\u7684 min \u51fd\u6570\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3aO(1)\uff09\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class Solution: def push(self, node): # write code here def pop(self): # write code here def top(self): # write code here def min(self): # write code here \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u65b0\u538b\u5165\u6808\u7684\u6570\u5b57\u6bd4\u4e4b\u524d\u7684\u6700\u5c0f\u503c\u5927\uff1b \u65b0\u538b\u5165\u6808\u7684\u6570\u5b57\u6bd4\u4e4b\u524d\u7684\u6700\u5c0f\u503c\u5c0f\uff1b \u5f39\u51fa\u6808\u7684\u6570\u5b57\u4e0d\u662f\u6700\u5c0f\u5143\u7d20\uff1b \u5f39\u51fa\u6808\u7684\u6570\u5b57\u662f\u6700\u5c0f\u5143\u7d20\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u6dfb\u52a0\u53d8\u91cf\u4fdd\u5b58\u6700\u5c0f\u5143\u7d20 class Solution: stack = [] min_param = [] def push(self, node): if len(self.min_param) == 0: self.min_param.append(node) else: if self.min_param[0] > node: self.min_param[0] = node self.stack.append(node) def pop(self): if len(self.stack) == 0: return node = self.stack.pop() if node == self.min_param[0]: self.min_param[0] = min(self.stack) return node def top(self): if len(self.stack) != 0: print(self.stack[-1]) def min(self): if len(self.min_param) == 1: return self.min_param[0] \u3010\u8bf4\u660e\u3011\uff1a push\uff1a\u6bd4\u8f83\u5f53\u524d\u6dfb\u52a0\u7684\u5143\u7d20\u662f\u5426\u6bd4\u6700\u5c0f\u503c\u5c0f\uff0c\u82e5\u6bd4\u6700\u5c0f\u503c\u5c0f\uff0c\u5219\u66f4\u65b0\u6700\u5c0f\u503c\u3002 pop\uff1a\u82e5\u5f53\u524d pop \u7684\u503c\u4e3a\u6700\u5c0f\u503c\uff0c\u5219\u91cd\u65b0\u5bfb\u627e\u6700\u5c0f\u503c\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u8f85\u52a9\u6808 class Solution: stack = [] stack_min = [] def push(self, node): if len(self.stack_min) == 0: self.stack_min.append(node) else: if self.stack_min[-1] < node: self.stack_min.append(self.stack_min[-1]) else: self.stack_min.append(node) self.stack.append(node) def pop(self): if len(self.stack) == 0: return node = self.stack.pop() self.stack_min.pop() return node def top(self): if len(self.stack) != 0: print(self.stack[-1]) def min(self): if len(self.stack_min) > 0: return self.stack_min[-1] \u3010\u8bf4\u660e\u3011\uff1a\u5177\u4f53\u53ef\u53c2\u8003\u300a\u5251\u6307offer\u300bP166-P167\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u590d\u6742\u95ee\u9898\u7684\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u6808\u7684\u7406\u89e3\u3002 \u9762\u8bd5\u9898 31\uff1a\u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217 \u8f93\u5165\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u8868\u793a\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u8bf7\u5224\u65ad\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u5426\u53ef\u80fd\u4e3a\u8be5\u6808\u7684\u5f39\u51fa\u987a\u5e8f\u3002\u5047\u8bbe\u538b\u5165\u6808\u7684\u6240\u6709\u6570\u5b57\u5747\u4e0d\u76f8\u7b49\u3002\u4f8b\u5982\u5e8f\u5217 1,2,3,4,5 \u662f\u67d0\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u5e8f\u5217 4,5,3,2,1 \u662f\u8be5\u538b\u6808\u5e8f\u5217\u5bf9\u5e94\u7684\u4e00\u4e2a\u5f39\u51fa\u5e8f\u5217\uff0c\u4f46 4,3,5,1,2 \u5c31\u4e0d\u53ef\u80fd\u662f\u8be5\u538b\u6808\u5e8f\u5217\u7684\u5f39\u51fa\u5e8f\u5217\u3002\uff08\u6ce8\u610f\uff1a\u8fd9\u4e24\u4e2a\u5e8f\u5217\u7684\u957f\u5ea6\u662f\u76f8\u7b49\u7684\uff09\u3002 \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u6b63\u786e\u7684\u5f39\u51fa\u5e8f\u5217\u3001\u9519\u8bef\u7684\u5f39\u51fa\u5e8f\u5217\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u4e24\u4e2a\u7a7a\u5e8f\u5217\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u4e2d\u89c4\u4e2d\u77e9\u7684\u5b9e\u73b0\u3002 def IsPopOrder(pushV, popV): length = len(pushV) if length == 0: return False stack = [] i_push, i_pop = 0, 0 # \u5165\u6808\u5faa\u73af while i_push < length: if pushV[i_push] != popV[i_pop]: if len(stack) > 0 and stack[-1] == popV[i_pop]: stack.pop() i_pop += 1 else: stack.append(pushV[i_push]) i_push += 1 else: i_pop += 1 i_push += 1 # \u51fa\u6808\u5faa\u73af while len(stack) > 0: if stack.pop() != popV[i_pop]: return False i_pop += 1 return True if __name__ == '__main__': push_v = [1, 2, 3, 4, 5] pop_v1 = [4, 5, 3, 2, 1] pop_v2 = [4, 3, 5, 1, 2] print(IsPopOrder(push_v, pop_v1)) print(IsPopOrder(push_v, pop_v2)) print(IsPopOrder([], []) # \u8f93\u51fa True False False \u3010\u8bf4\u660e\u3011\uff1a - \u538b\u6808\u64cd\u4f5c\uff1a\u5728\u538b\u6808\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u5f53\u524d\u538b\u5165\u6808\u7684\u5143\u7d20\u4e0e\u51fa\u6808\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u76f8\u7b49\uff0c\u5219\u8868\u660e\u5f53\u524d\u5143\u7d20\u5165\u6808\u540e\u7acb\u5373\u51fa\u6808\uff0c\u56e0\u6b64\u5f53\u524d\u5143\u7d20\u4e0d\u9700\u8981\u538b\u5165\u6808\uff0c\u5165\u6808\u548c\u51fa\u6808\u5e8f\u5217\u5411\u540e\u79fb\u4e00\u4f4d\u3002\u82e5\u4e0d\u76f8\u7b49\uff0c\u5219\u5224\u65ad\u8f85\u52a9\u6808\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u4e0e\u51fa\u6808\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u76f8\u7b49\u3002\u82e5\u76f8\u7b49\uff0c\u5219\u51fa\u6808\uff0c\u51fa\u6808\u5e8f\u5217\u540e\u79fb\u4e00\u4f4d\u3002\u82e5\u4e0d\u76f8\u7b49\uff0c\u5219\u5165\u6808\u5e8f\u5217\u540e\u79fb\u4e00\u4f4d\uff0c\u5373\u7ee7\u7eed\u5165\u6808\u3002 - \u51fa\u6808\u64cd\u4f5c\uff1a\u5728\u51fa\u6808\u8fc7\u7a0b\u4e2d\uff0c\u53ea\u9700\u8981 pop \u8f85\u52a9\u6808\uff0c\u6bd4\u8f83\u6bcf\u4e00\u6b21 pop \u7684\u5143\u7d20\u662f\u5426\u548c\u51fa\u6808\u5e8f\u5217\u76f8\u7b49\u3002\u82e5\u4e0d\u76f8\u7b49\uff0c\u5219 return False\u3002\u5faa\u73af\u7ed3\u675f\uff0c\u8fd4\u56de True\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u4e66\u672c\u65b9\u6cd5\u3002 def IsPopOrder(pushV, popV): length = len(pushV) if length == 0: return False stack = [] i_push, i_pop = 0, 0 # \u5165\u6808\u5faa\u73af while i_push < length: stack.append(pushV[i_push]) i_push += 1 # \u5224\u65ad\u6808\u9876\u5143\u7d20\u662f\u5426\u4e0e\u51fa\u6808\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u76f8\u7b49 while True: if len(stack) > 0 and stack[-1] == popV[i_pop]: stack.pop() i_pop += 1 else: break return i_push == i_pop \u3010\u8bf4\u660e\u3011\uff1a\u5982\u679c\u4e0b\u4e00\u4e2a\u5f39\u51fa\u7684\u6570\u5b57\u521a\u597d\u662f\u6808\u9876\u6570\u5b57\uff0c\u90a3\u4e48\u76f4\u63a5\u5f39\u51fa\uff1b\u5982\u679c\u4e0b\u4e00\u4e2a\u5f39\u51fa\u7684\u6570\u5b57\u4e0d\u5728\u6808\u9876\uff0c\u5219\u628a\u538b\u6808\u5e8f\u5217\u4e2d\u8fd8\u6ca1\u6709\u5165\u6808\u7684\u6570\u5b57\u538b\u5165\u8f85\u52a9\u6808\uff0c\u76f4\u5230\u628a\u4e0b\u4e00\u4e2a\u9700\u8981\u5f39\u51fa\u7684\u6570\u5b57\u538b\u5165\u6808\u9876\u4e3a\u6b62\u3002\u5982\u679c\u6240\u6709\u6570\u5b57\u90fd\u538b\u5165\u6808\u540e\u4ecd\u7136\u6ca1\u6709\u627e\u5230\u4e0b\u4e00\u4e2a\u5f39\u51fa\u7684\u6570\u5b57\uff0c\u90a3\u4e48\u8be5\u5e8f\u5217\u4e0d\u53ef\u80fd\u662f\u4e00\u4e2a\u5f39\u51fa\u5e8f\u5217\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u590d\u6742\u95ee\u9898\u7684\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u6808\u7684\u7406\u89e3\u3002 \u9762\u8bd5\u9898 32\uff1a\u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u540c\u5c42\u8282\u70b9\u4ece\u5de6\u81f3\u53f3\u6253\u5370\u3002 \u3010\u6ce8\u610f\u3011\uff1a\u867d\u7136\u9898\u76ee\u4e2d\u8bf4\u7684\u662f\u6253\u5370\uff0c\u4f46\u5b9e\u9645\u4e0a\u662f\u8981\u5c06\u8282\u70b9\u7684\u503c\u5b58\u653e\u5230\u5217\u8868\u4e2d\u8fd4\u56de\u3002\u5176\u5b9e\u4e5f\u5f88\u597d\u7406\u89e3\uff0c\u5728\u7ebf\u7f16\u7a0b\u4e0d\u53ef\u80fd\u5224\u5b9a print \u6253\u5370\u7684\u5185\u5bb9\uff0c\u800c\u662f\u5224\u5b9a\u8fd4\u56de\u5217\u8868\u7684\u5185\u5bb9\u6765\u5f97\u8f7b\u677e\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class ListNode: def __init__(self, x): self.val = x self.left = None self.right = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u6b63\u5e38\u7684\u4e8c\u53c9\u6811\uff0c\u53ea\u6709\u5de6\u5b50\u6811\uff08\u53f3\u5b50\u6811\uff09\u7684\u4e8c\u53c9\u6811\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811\uff0c\u53ea\u6709\u6839\u8282\u70b9\u7684\u4e8c\u53c9\u6811\u3002 # \u7279\u6b8a\u8f93\u5165\u5904\u7406\uff1a\u7a7a\u6811 PrintFromTopToBottom(None) # \u7279\u6b8a\u8f93\u5165\u5904\u7406\uff1a\u53ea\u6709\u6839\u8282\u70b9\u7684\u4e8c\u53c9\u6811 PrintFromTopToBottom(ListNode(1)) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u6b63\u5e38\u4e8c\u53c9\u6811 node_1 = ListNode(8) node_2 = ListNode(6) node_3 = ListNode(10) node_4 = ListNode(5) node_5 = ListNode(7) node_6 = ListNode(9) node_7 = ListNode(11) node_1.left, node_1.right = node_2, node_3 node_2.left, node_2.right = node_4, node_5 node_3.left, node_3.right = node_6, node_7 PrintFromTopToBottom(node_1) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u53ea\u6709\u5de6\u5b50\u6811\uff08\u53f3\u5b50\u6811\uff09\u7684\u4e8c\u53c9\u6811 node_1 = ListNode(1) node_2 = ListNode(2) node_3 = ListNode(3) node_4 = ListNode(4) node_5 = ListNode(5) node_1.left, node_2.left, node_3.left, node_4.left = node_2, node_3, node_4, node_5 PrintFromTopToBottom(node_1) \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5c42\u5e8f\u904d\u5386\u3002 def PrintFromTopToBottom(root): if not root: return [] node_list = [root] result = [] while len(node_list): node = node_list.pop(0) result.append(node.val) if node.left: node_list.append(node.left) if node.right: node_list.append(node.right) return result \u3010\u8bf4\u660e\u3011\uff1a\u5229\u7528\u6811\u7684\u5c42\u5e8f\u904d\u5386\u65b9\u5f0f\u5373\u53ef\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u3002\u4e0a\u8ff0\u4ee3\u7801\u8fd8\u53ef\u4ee5\u8fdb\u884c\u4f18\u5316\uff0c\u4f7f\u7528 deque \u6765\u66ff\u4ee3\u5217\u8868\u3002 node_list = deque() node_list.append(root) result = [] while len(node_list): node = node_list.popleft() result.append(node.val) if node.left: node_list.append(node.left) if node.right: node_list.append(node.right) \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1aO(n)\u3002 \u7a7a\u95f4\u6548\u7387\uff1aO(n)\uff0c\u5b9e\u9645\u4e0a\u7a7a\u95f4\u6548\u7387\u8981\u5c0f\u4e8e O(n)\uff0c\u7b49\u4e8e 2 \u7684\u6811\u6df1\u5ea6\u6b21\u65b9\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u7684\u601d\u7ef4\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u4e8c\u53c9\u6811\u53ca\u961f\u5217\u7684\u7406\u89e3\u3002 \u9762\u8bd5\u9898 32-2\uff1a\u5206\u884c\u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 \u4ece\u4e0a\u5230\u4e0b\u6309\u5c42\u6253\u5370\u4e8c\u53c9\u6811\uff0c\u540c\u4e00\u5c42\u7684\u8282\u70b9\u6309\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u6bcf\u4e00\u5c42\u6253\u5370\u5230\u4e00\u884c\u3002 \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a\u540c\u9762\u8bd5\u9898 33\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a def PrintFromTopToBottom(root): if not root: return [] node_list = deque() node_list.append(root) count = 1 while count > 0: layer_nodes = [] next_count = 0 for i in range(count): node = node_list.popleft() layer_nodes.append(node.val) if node.left: node_list.append(node.left) next_count += 1 if node.right: node_list.append(node.right) next_count += 1 count = next_count print(str(layer_nodes)) \u3010\u8bf4\u660e\u3011\uff1a\u4e3a\u4e86\u628a\u4e8c\u53c9\u6811\u7684\u6bcf\u4e00\u884c\u5355\u72ec\u6253\u5370\u5230\u4e00\u884c\u91cc\uff0c\u9700\u8981\u501f\u52a9\u4e24\u4e2a\u53d8\u91cf\u3002 \u8282\u70b9\u6570\uff1a\u8868\u793a\u5728\u5f53\u524d\u5c42\u4e2d\u8fd8\u6ca1\u6709\u6253\u5370\u7684\u8282\u70b9\u6570\u3002 \u4e0b\u5c42\u8282\u70b9\u6570\uff1a\u8868\u793a\u4e0b\u4e00\u5c42\u8282\u70b9\u7684\u6570\u76ee\u3002 \u3010\u725b\u5ba2\u7f51\u4ee3\u7801\u3011\uff1a if not pRoot: return [] node_list = [] node_list.append(pRoot) count = 1 total_list = [] while count > 0: layer_nodes = [] next_count = 0 for i in range(count): node = node_list.pop(0) layer_nodes.append(node.val) if node.left: node_list.append(node.left) next_count += 1 if node.right: node_list.append(node.right) next_count += 1 count = next_count total_list.append(layer_nodes) return total_list \u9762\u8bd5\u9898 32-3\uff1a\u4e4b\u5b57\u5f62\u6253\u5370\u4e8c\u53c9\u6811 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6309\u7167\u4e4b\u5b57\u5f62\u987a\u5e8f\u6253\u5370\u4e8c\u53c9\u6811\uff0c\u5373\u7b2c\u4e00\u884c\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u7b2c\u4e8c\u5c42\u6309\u7167\u4ece\u53f3\u5230\u5de6\u7684\u987a\u5e8f\u6253\u5370\uff0c\u5176\u4ed6\u884c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a\u540c\u9762\u8bd5\u9898 33\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u6570\u7ec4\u9006\u5e8f\u65b9\u6cd5\u3002 def PrintFromTopToBottom(root): if not root: return [] node_list = deque() node_list.append(root) count = 1 layer = 0 while count > 0: layer_nodes = [] next_count = 0 for i in range(count): node = node_list.popleft() layer_nodes.append(node.val) if node.left: node_list.append(node.left) next_count += 1 if node.right: node_list.append(node.right) next_count += 1 count = next_count layer += 1 if layer & 0x01 == 0: layer_nodes.sort(reverse=True) print(str(layer_nodes)) \u3010\u8bf4\u660e\u3011\uff1a\u5728\u9762\u8bd5\u9898 33-2 \u7684\u57fa\u7840\u4e0a\u65b0\u589e\u4e00\u4e2a\u53d8\u91cf layer \u7528\u4ee5\u5224\u65ad\u5f53\u524d\u5c42\u6570\u3002\u82e5\u4e3a\u5947\u6570\uff0c\u5219\u4ece\u5de6\u5230\u53f3\u6253\u5370\uff0c\u5373\u987a\u5e8f\u6253\u5370\u3002\u82e5\u4e3a\u5076\u6570\uff0c\u5219\u4ece\u53f3\u5230\u5de6\u6253\u5370\uff0c\u5373\u9006\u5e8f\u6253\u5370\u3002\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u81ea\u884c\u5b9e\u73b0\u6570\u7ec4\u7684\u9006\u5e8f\u8f93\u51fa\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5806\u6808\u5b9e\u73b0\u3002 if not root: return [] node_list = [root] next_list = [] count = 1 layer = 1 while count > 0: layer_nodes = [] next_count = 0 for i in range(count): node = node_list.pop() layer_nodes.append(node.val) if layer & 0x01 != 0: if node.left: next_list.append(node.left) next_count += 1 if node.right: next_list.append(node.right) next_count += 1 else: if node.right: next_list.append(node.right) next_count += 1 if node.left: next_list.append(node.left) next_count += 1 node_list = next_list.copy() count = next_count layer += 1 print(str(layer_nodes)) \u3010\u8bf4\u660e\u3011\uff1a\u9700\u8981\u4e24\u4e2a\u6808\uff0c\u5728\u6253\u5370\u67d0\u4e00\u5c42\u7684\u8282\u70b9\u65f6\uff0c\u628a\u4e0b\u4e00\u5c42\u7684\u5b50\u8282\u70b9\u4fdd\u5b58\u5230\u76f8\u5e94\u7684\u6808\u91cc\u3002\u5982\u679c\u5f53\u524d\u6253\u5370\u7684\u662f\u5947\u6570\u5c42\uff0c\u5219\u5148\u4fdd\u5b58\u5de6\u5b50\u8282\u70b9\u518d\u4fdd\u5b58\u53f3\u5b50\u8282\u70b9\uff1b\u5982\u679c\u5f53\u524d\u6253\u5370\u7684\u662f\u5076\u6570\u5c42\uff0c\u5219\u5148\u4fdd\u5b58\u53f3\u5b50\u8282\u70b9\u518d\u4fdd\u5b58\u5de6\u5b50\u8282\u70b9\u3002 \u9762\u8bd5\u9898 33\uff1a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u4e0d\u662f\u67d0\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002\u5982\u679c\u662f\u5219\u8f93\u51fa Yes\uff0c\u5426\u5219\u8f93\u51fa No\u3002\u5047\u8bbe\u8f93\u5165\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c\u3002 \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u6b63\u786e\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u540e\u5e8f\u904d\u5386\u6570\u7ec4\uff0c\u9519\u8bef\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u540e\u5e8f\u904d\u5386\u6570\u7ec4\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6570\u7ec4\uff0c\u53ea\u6709\u4e00\u4e2a\u503c\u7684\u6570\u7ec4\u3002 # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6570\u7ec4 result1 = VerifySquenceOfBST([]) # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u53ea\u6709\u4e00\u4e2a\u503c\u7684\u6570\u7ec4 result2 = VerifySquenceOfBST([1]) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u6210\u529f result3 = VerifySquenceOfBST([5, 7, 6, 9, 11, 10, 8]) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u5931\u8d25 result4 = VerifySquenceOfBST([7, 4, 6, 5]) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u6210\u529f result5 = VerifySquenceOfBST([1, 4, 23, 37, 29, 41, 12, 84, 71, 100, 90, 60]) \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u9012\u5f52\u5b9e\u73b0\u3002 def VerifySquenceOfBST(sequence): if len(sequence) == 0: return False return loop(sequence) def loop(sequence): length = len(sequence) if length <= 1: return True root = sequence[-1] middle = 0 is_big = False for i in range(length): if sequence[i] >= root: is_big = True middle = i if sequence[i] < root and is_big: return False return loop(sequence[:middle]) & loop(sequence[middle:length - 1]) \u3010\u8bf4\u660e\u3011\uff1a \u9996\u5148\u5bf9\u8f93\u5165\u8fdb\u884c\u9a8c\u8bc1\uff0c\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\u6570\u7ec4\u3002\u82e5\u4e3a\u7a7a\u6570\u7ec4\uff0c\u5219\u76f4\u63a5\u8fd4\u56de False\u3002 \u5728\u540e\u5e8f\u904d\u5386\u5f97\u5230\u7684\u5e8f\u5217\u4e2d\uff0c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f\u6811\u7684\u6839\u7ed3\u70b9\u7684\u503c\u3002\u6570\u7ec4\u4e2d\u524d\u9762\u7684\u6570\u5b57\u53ef\u4ee5\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\u7b2c\u4e00\u90e8\u5206\u662f\u5de6\u5b50\u6811\u8282\u70b9\u7684\u503c\uff0c\u5b83\u4eec\u90fd\u6bd4\u6839\u7ed3\u70b9\u7684\u503c\u5c0f\uff1b\u7b2c\u4e8c\u90e8\u5206\u662f\u53f3\u5b50\u6811\u8282\u70b9\u7684\u503c\uff0c\u5b83\u4eec\u90fd\u6bd4\u6839\u7ed3\u70b9\u7684\u503c\u5927\u3002\u56e0\u6b64\uff0c\u82e5\u662f\u4e0d\u80fd\u5c06\u6570\u7ec4\u5212\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u6362\u8a00\u4e4b\uff0c\u524d\u534a\u90e8\u5206\u5b58\u5728\u6bd4\u6839\u7ed3\u70b9\u7684\u503c\u5927\u7684\u6570\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u540e\u5e8f\u904d\u5386\u6570\u7ec4\u6ca1\u6709\u5bf9\u5e94\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u6b64\u65f6\u53ef\u76f4\u63a5\u8fd4\u56de Fasle\u3002 \u4e0d\u65ad\u9012\u5f52\uff0c\u76f4\u5230\u62b5\u8fbe\u53f6\u8282\u70b9\u3002 \u5177\u4f53\u5185\u5bb9\u53ef\u9605\u8bfb\u300a\u5251\u6307offer\u300bP180\u3002 \u3010\u6539\u8fdb\u3011\uff1a def VerifySquenceOfBST(sequence): length = len(sequence) if length == 0: return False root = sequence[-1] middle = 0 for i in range(length - 1): if sequence[i] > root: break middle += 1 for i in range(middle + 1, length - 1): if sequence[i] < root: return False result_left, result_right = True, True if middle > 0: result_left = VerifySquenceOfBST(sequence[:middle]) if middle < length - 1: result_right = VerifySquenceOfBST(sequence[middle:length-1]) return result_left & result_right \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1aO(nlogn)\uff0cn \u7528\u4ee5\u68c0\u7d22\u6570\u7ec4\u662f\u5426\u5212\u5206\u4e3a\u4e24\u90e8\u5206\uff0clogn \u4e3a\u9012\u5f52\u5c42\u7ea7\u3002 \u7a7a\u95f4\u6548\u7387\uff1aO(logn)\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u590d\u6742\u95ee\u9898\u7684\u601d\u7ef4\u80fd\u529b\u3002\u80fd\u5426\u89e3\u51b3\u8fd9\u9053\u9898\u7684\u5173\u952e\u5728\u4e8e\u5e94\u8058\u8005\u662f\u5426\u80fd\u627e\u51fa\u540e\u5e8f\u904d\u5386\u7684\u89c4\u5f8b\u3002\u4e00\u65e6\u627e\u5230\u4e86\u89c4\u5f8b\uff0c\u7528\u9012\u5f52\u7684\u4ee3\u7801\u7f16\u7801\u76f8\u5bf9\u800c\u8a00\u5c31\u7b80\u5355\u4e86\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u4e8c\u53c9\u6811\u540e\u5e8f\u904d\u5386\u7684\u7406\u89e3\u3002 \u9762\u8bd5\u9898 34\uff1a\u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84 \u8f93\u5165\u4e00\u9897\u4e8c\u53c9\u6811\u7684\u8ddf\u8282\u70b9\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u4e2d\u7ed3\u70b9\u503c\u7684\u548c\u4e3a\u8f93\u5165\u6574\u6570\u7684\u6240\u6709\u8def\u5f84\u3002\u8def\u5f84\u5b9a\u4e49\u4e3a\u4ece\u6811\u7684\u6839\u7ed3\u70b9\u5f00\u59cb\u5f80\u4e0b\u4e00\u76f4\u5230\u53f6\u7ed3\u70b9\u6240\u7ecf\u8fc7\u7684\u7ed3\u70b9\u5f62\u6210\u4e00\u6761\u8def\u5f84\u3002(\u6ce8\u610f: \u5728\u8fd4\u56de\u503c\u7684list\u4e2d\uff0c\u6570\u7ec4\u957f\u5ea6\u5927\u7684\u6570\u7ec4\u9760\u524d) \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class ListNode: def __init__(self, x): self.val = x self.left = None self.right = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u4e8c\u53c9\u6811\u4e2d\u6709\u4e00\u6761\u3001\u591a\u6761\u7b26\u5408\u8981\u6c42\u7684\u8def\u5f84\uff0c\u4e8c\u53c9\u6811\u4e2d\u6ca1\u6709\u7b26\u5408\u8981\u6c42\u7684\u8def\u5f84\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811\uff0c\u503c\u4e3a\u8d1f\u6570\u6216 0\u3002 # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1aexpectNumber \u5c0f\u4e8e\u7b49\u4e8e 0 result1 = FindPath(ListNode(1), 0) result2 = FindPath(ListNode(1), -1) # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811 result3 = FindPath(None, 10) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u7b26\u5408\u8981\u6c42 node_1 = ListNode(10) node_2 = ListNode(5) node_3 = ListNode(12) node_4 = ListNode(4) node_5 = ListNode(7) node_1.left, node_1.right = node_2, node_3 node_2.left, node_2.right = node_4, node_5 result4 = FindPath(node_1, 22) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u4e0d\u7b26\u5408\u8981\u6c42 result5 = FindPath(node_1, 20) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u4e0d\u7b26\u5408\u8981\u6c42 result6 = FindPath(node_1, 15) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u7b26\u5408\u8981\u6c42 result7 = FindPath(node_1, 19) \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5148\u5e8f\u904d\u5386\u3002 def FindPath(root, expectNumber): if expectNumber <= 0 or root is None: return [] path = [] pre_traver(root, expectNumber, 0, [], path) return path def pre_traver(node, number, value, path, total_path): path_new = [] path_new.extend(path) path_new.append(node.val) value += node.val if not node.left and not node.right and value == number: total_path.append(path_new) else: if node.left: pre_traver(node.left, number, value, path_new, total_path) if node.right: pre_traver(node.right, number, value, path_new, total_path) \u3010\u8bf4\u660e\u3011\uff1a \u6bcf\u4e00\u6b65\u904d\u5386\u65f6\uff0c\u5c06\u5f53\u524d\u8282\u70b9\u6dfb\u52a0\u5230\u8def\u5f84\u4e2d\uff0c\u540c\u65f6\u8ba1\u7b97\u5f53\u524d\u8def\u5f84\u7d2f\u52a0\u7684\u503c\uff08\u9700\u8981\u6ce8\u610f Python \u8bed\u8a00\u7684\u7279\u6027\uff09\u3002 path_new = [] path_new.extend(path) path_new.append(node.val) value += node.val \u5224\u65ad\u5f53\u524d\u8282\u70b9\u662f\u5426\u4e3a\u53f6\u8282\u70b9\u3002\u82e5\u4e3a\u53f6\u8282\u70b9\u4e14\u7d2f\u52a0\u7684\u503c\u7b26\u5408\u8981\u6c42\uff0c\u5219\u5c06\u5f53\u524d\u8def\u5f84\u6dfb\u52a0\u5230\u603b\u8def\u5f84\u4e2d\u3002 if not node.left and not node.right and value == number: total_path.append(path_new) \u5426\u5219\uff0c\u7ee7\u7eed\u904d\u5386\u3002 if node.left: pre_traver(node.left, number, value, path_new, total_path) if node.right: pre_traver(node.right, number, value, path_new, total_path) \u3010\u5176\u4ed6\u3011\uff1a\u5982\u679c\u4ec5\u4ec5\u662f\u6253\u5370\u800c\u975e\u83b7\u53d6\u6240\u6709\u8def\u5f84\u5219\u4f1a\u76f8\u5bf9\u7b80\u5355\u4e00\u4e9b\u3002 def FindPath(root, expectNumber): if expectNumber <= 0 or root is None: return [] path = [] pre_traver(root, expectNumber, 0, []) return path def pre_traver(node, number, value, path): path.append(node.val) value += node.val if not node.left and not node.right and value == number: print(str(path)) else: if node.left: pre_traver(node.left, number, value, path) if node.right: pre_traver(node.right, number, value, path) path.pop() \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u590d\u6742\u95ee\u9898\u7684\u601d\u7ef4\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u7684\u7406\u89e3\u3002 \u5206\u89e3\u8ba9\u590d\u6742\u95ee\u9898\u7b80\u5355\u5316 \u5728\u9762\u8bd5\u4e2d\uff0c\u5f53\u6211\u4eec\u9047\u5230\u590d\u6742\u7684\u5927\u95ee\u9898\u7684\u65f6\u5019\uff0c\u5982\u679c\u80fd\u591f\u5148\u628a\u5927\u95ee\u9898\u5206\u89e3\u6210\u82e5\u5e72\u4e2a\u7b80\u5355\u7684\u5c0f\u95ee\u9898\uff0c\u7136\u540e\u518d\u9010\u4e2a\u89e3\u51b3\u8fd9\u4e9b\u5c0f\u95ee\u9898\uff0c\u5219\u53ef\u80fd\u4e5f\u4f1a\u5bb9\u6613\u5f88\u591a\u3002 \u6211\u4eec\u53ef\u4ee5\u6309\u7167\u89e3\u51b3\u95ee\u9898\u7684\u6b65\u9aa4\u6765\u5206\u89e3\u590d\u6742\u95ee\u9898\uff0c\u6bcf\u4e00\u6b65\u89e3\u51b3\u4e00\u4e2a\u5c0f\u95ee\u9898\u3002\u6bd4\u5982\u5728\u9762\u8bd5\u9898 35\u201c\u590d\u6742\u94fe\u8868\u7684\u590d\u5236\u201d\u4e2d\uff0c\u5c06\u590d\u6742\u94fe\u8868\u590d\u5236\u7684\u8fc7\u7a0b\u5206\u89e3\u6210 3 \u4e2a\u6b65\u9aa4\u3002\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\u4e3a\u6bcf\u4e00\u6b65\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd9\u6837\u6bcf\u4e2a\u51fd\u6570\u5b8c\u6210\u4e00\u4e2a\u529f\u80fd\uff0c\u6574\u4e2a\u8fc7\u7a0b\u7684\u903b\u8f91\u4e5f\u5c31\u975e\u5e38\u6e05\u6670\u660e\u4e86\u4e86\u3002 \u5728\u8ba1\u7b97\u673a\u9886\u57df\u6709\u4e00\u7c7b\u7b97\u6cd5\u53eb\u5206\u6cbb\u6cd5\uff0c\u5373\u201c\u5206\u800c\u6cbb\u4e4b\u201d\uff0c\u91c7\u7528\u7684\u5c31\u662f\u5404\u4e2a\u51fb\u7834\u7684\u601d\u60f3\u3002\u6211\u4eec\u628a\u5206\u89e3\u4e4b\u540e\u7684\u5c0f\u95ee\u9898\u5404\u4e2a\u89e3\u51b3\uff0c\u7136\u540e\u628a\u5c0f\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u7ed3\u5408\u8d77\u6765\u89e3\u51b3\u5927\u95ee\u9898\u3002 \u9762\u8bd5\u9898 35\uff1a\u590d\u6742\u94fe\u8868\u7684\u590d\u5236 \u8f93\u5165\u4e00\u4e2a\u590d\u6742\u94fe\u8868\uff08\u6bcf\u4e2a\u8282\u70b9\u4e2d\u6709\u8282\u70b9\u503c\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u53e6\u4e00\u4e2a\u7279\u6b8a\u6307\u9488\u6307\u5411\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff09\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\u590d\u5236\u540e\u590d\u6742\u94fe\u8868\u7684head\u3002\uff08\u6ce8\u610f\uff0c\u8f93\u51fa\u7ed3\u679c\u4e2d\u8bf7\u4e0d\u8981\u8fd4\u56de\u53c2\u6570\u4e2d\u7684\u8282\u70b9\u5f15\u7528\uff0c\u5426\u5219\u5224\u9898\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u8fd4\u56de\u7a7a\uff09\u3002 \u3010\u96be\u70b9\u3011\uff1a\u5982\u4f55\u5904\u7406 random \u6307\u5411\u7684\u8282\u70b9\u590d\u5236\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class RandomListNode: def __init__(self, x): self.label = x self.next = None self.random = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u94fe\u8868\uff1b \u529f\u80fd\u6d4b\u8bd5\uff1a\u5355\u8282\u70b9\u94fe\u8868\uff0c\u8282\u70b9\u7684 random \u6307\u5411\u8282\u70b9\u81ea\u8eab\uff0c\u4e24\u4e2a\u8282\u70b9 random \u5f62\u6210\u73af\u72b6\u7ed3\u6784\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u54c8\u5e0c\u8868 def Clone(pHead): if not pHead: return None node = pHead node_list = [] node_clone_list = [] node_hash = {} # \u521b\u5efa\u590d\u5236\u94fe\u8868\u8282\u70b9\uff0c\u5e76\u6784\u9020\u54c8\u5e0c\u8868 while node: node_list.append(node) node_clone = RandomListNode(node.label) node_clone_list.append(node_clone) node_hash[node] = node_clone node = node.next # \u94fe\u63a5\u590d\u5236\u94fe\u8868\u8282\u70b9\u7684\u540c\u65f6\uff0c\u94fe\u63a5 random for i in range(len(node_clone_list) - 1): node = node_list[i] if node.random: node_clone_list[i].random = node_hash[node.random] node_clone_list[i].next = node_clone_list[i + 1] return node_clone_list[0] \u3010\u8bf4\u660e\u3011\uff1a \u7b2c\u4e00\u6b65\u521b\u5efa\u590d\u5236\u94fe\u8868\u8282\u70b9\uff0c\u5e76\u6784\u9020\u54c8\u5e0c\u8868\uff1b \u94fe\u63a5\u590d\u5236\u94fe\u8868\u8282\u70b9\u7684\u540c\u65f6\uff0c\u94fe\u63a5\u8282\u70b9\u7684 random\u3002 \u8fd9\u79cd\u65b9\u6cd5\u76f8\u5f53\u4e8e\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1aO(n)\uff0c\u521b\u5efa\u590d\u5236\u94fe\u8868\u8282\u70b9 O(n)\uff0c\u94fe\u63a5\u8fc7\u7a0b O(n)\u3002 \u7a7a\u95f4\u6548\u7387\uff1aO(n)\uff0c\u54c8\u5e0c\u8868\u7684\u957f\u5ea6\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5de7\u5999\u7684\u65b9\u6cd5 def Clone(pHead): if not pHead: return None node = pHead while node: node_clone = RandomListNode(node.label) node_clone.next, node.next = node.next, node_clone node = node_clone.next node = pHead while node: if node.random: node_random = node.random node.next.random = node_random.next node = node.next.next node, count, clone_head = pHead, 0, pHead.next while node.next: temp = node.next node.next = node.next.next node = temp return clone_head \u3010\u8bf4\u660e\u3011\uff1a \u7b2c\u4e00\u6b65\uff0c\u6839\u636e\u539f\u59cb\u94fe\u8868\u7684\u6bcf\u4e2a\u8282\u70b9 N \u521b\u5efa\u5bf9\u5e94\u7684 N'\uff0c\u5e76\u628a N' \u94fe\u63a5\u5728 N \u7684\u540e\u9762\uff1b \u7b2c\u4e8c\u6b65\uff0c\u8bbe\u7f6e\u590d\u5236\u8282\u70b9\u7684 random\u3002\u5047\u8bbe\u539f\u59cb\u94fe\u8868\u4e0a\u7684 N \u7684 random \u6307\u5411\u8282\u70b9 S\uff0c\u90a3\u4e48\u5176\u5bf9\u5e94\u590d\u5236\u51fa\u6765\u7684 N' \u662f N \u7684 next \u6307\u5411\u7684\u8282\u70b9\uff0c\u540c\u6837 S' \u662f S \u7684 next \u6307\u5411\u7684\u8282\u70b9\u3002\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7 node.next.random = node.random.next \u6765\u5b9e\u73b0\u94fe\u63a5\u3002 \u7b2c\u4e09\u6b65\uff0c\u628a\u8fd9\u4e2a\u957f\u94fe\u62c6\u5206\u6210\u4e24\u4e2a\u94fe\u8868\uff0c\u628a\u5947\u6570\u4f4d\u7f6e\u7684\u8282\u70b9\u7528 next \u94fe\u63a5\u8d77\u6765\u5c31\u662f\u539f\u59cb\u94fe\u8868\uff0c\u628a\u5076\u6570\u4f4d\u7f6e\u7684\u8282\u70b9\u7528 next \u94fe\u63a5\u8d77\u6765\u5c31\u662f\u590d\u5236\u51fa\u6765\u7684\u94fe\u8868\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1a\u4e09\u6b65\u90fd\u4e3a O(n)\uff0c\u6240\u4ee5\u603b\u65f6\u957f\u4e3a O(n)\uff1b \u7a7a\u95f4\u6548\u7387\uff1aO(1)\uff0c\u6ca1\u6709\u4f7f\u7528\u989d\u5916\u7684\u5185\u5b58\u7a7a\u95f4\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u590d\u6742\u95ee\u9898\u7684\u601d\u7ef4\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u65f6\u95f4\u6548\u7387\u548c\u7a7a\u95f4\u6548\u7387\u7684\u80fd\u529b\u3002 \u9762\u8bd5\u9898 36\uff1a\u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5c06\u8be5\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u6210\u4e00\u4e2a\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868\u3002\u8981\u6c42\u4e0d\u80fd\u521b\u5efa\u4efb\u4f55\u65b0\u7684\u7ed3\u70b9\uff0c\u53ea\u80fd\u8c03\u6574\u6811\u4e2d\u7ed3\u70b9\u6307\u9488\u7684\u6307\u5411\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811\u3001\u53ea\u6709\u6839\u8282\u70b9\u7684\u6811\uff1b \u529f\u80fd\u6d4b\u8bd5\uff1a\u5b8c\u5168\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u53ea\u6709\u5de6\u5b50\u6811\uff08\u53f3\u5b50\u6811\uff09\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002 # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811 result1 = Convert(None) # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u53ea\u6709\u6839\u8282\u70b9\u7684\u6811 result2 = Convert(TreeNode(1)) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u5b8c\u5168\u4e8c\u53c9\u641c\u7d22\u6811 node1 = TreeNode(5) node2 = TreeNode(3) node3 = TreeNode(7) node4 = TreeNode(2) node5 = TreeNode(4) node6 = TreeNode(6) node7 = TreeNode(8) node1.left, node1.right = node2, node3 node2.left, node2.right = node4, node5 node3.left, node3.right = node6, node7 result3 = Convert(node1) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u53ea\u6709\u5de6\u5b50\u6811\u7684\u4e8c\u53c9\u641c\u7d22\u6811 node1 = TreeNode(5) node2 = TreeNode(4) node3 = TreeNode(3) node4 = TreeNode(2) node5 = TreeNode(1) node1.left, node2.left = node2, node3 node3.left, node4.left = node4, node5 result4 = Convert(node1) \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a def Convert(pRootOfTree): if not pRootOfTree: return None path = [] in_order_traver(pRootOfTree, path) for i in range(len(path)): if i - 1 < 0: path[i].left = None else: path[i].left = path[i - 1] if i + 1 > len(path) - 1: path[i].right = None else: path[i].right = path[i + 1] return path[0] def in_order_traver(node, path): if node.left: in_order_traver(node.left, path) path.append(node) if node.right: in_order_traver(node.right, path) \u3010\u8bf4\u660e\u3011\uff1a\u56e0\u4e3a\u9700\u8981\u6392\u5e8f\u540e\u7684\u53cc\u5411\u94fe\u8868\uff0c\u56e0\u6b64\u5148\u901a\u8fc7\u4e2d\u5e8f\u904d\u5386\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4ee5\u83b7\u5f97\u6392\u5e8f\u7684\u904d\u5386\u5e8f\u5217\u5e76\u5b58\u653e\u5230 path \u5217\u8868\u4e2d\u3002\u7136\u540e\u8c03\u6574 path \u5217\u8868\u4e2d\u6bcf\u4e00\u9879\u7684\u6307\u9488\uff0c\u4f7f\u5f53\u524d\u4f4d\u7f6e\u7684\u8282\u70b9 left \u6307\u5411\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u8282\u70b9\uff0cright \u6307\u5411\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u4f4d\u7f6e\u3002\u9700\u8981\u6ce8\u610f\u8fb9\u754c\u70b9\u7684 left \u548c right \u5904\u7406\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1a\u904d\u5386\u4e8c\u53c9\u641c\u7d22\u6811\u9700\u8981 O(n)\uff0c\u5904\u7406 path \u5217\u8868\u4e5f\u9700\u8981 O(n) \u65f6\u95f4\uff0c\u603b\u65f6\u95f4\u4e3a O(n)\uff1b \u7a7a\u95f4\u6548\u7387\uff1aO(n)\uff0c\u521b\u5efa path \u5217\u8868\u6240\u9700\u7684\u5185\u5b58\u7a7a\u95f4\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5728\u9012\u5f52\u7684\u8fc7\u7a0b\u4e2d\u5b8c\u6210\u6307\u9488\u8c03\u6574 def Convert(pRootOfTree): if not pRootOfTree: return None in_order_traver(pRootOfTree, [None]) root = pRootOfTree while root.left: root = root.left return root def in_order_traver(node, last_node): if node.left: in_order_traver(node.left, last_node) if last_node[0]: last_node[0].right = node node.left = last_node[0] last_node[0] = node if node.right: in_order_traver(node.right, last_node) \u3010\u8bf4\u660e\u3011\uff1a\u5173\u952e\u5728\u4e8e\u6bcf\u6b21\u9012\u5f52\u7684\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u4e0a\u4e00\u4e2a\u8282\u70b9\u3002\u5177\u4f53\u5185\u5bb9\u53ef\u53c2\u8003\u300a\u5251\u6307offer\u300bP192-P194\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u590d\u6742\u95ee\u9898\u7684\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u4e8c\u53c9\u6811\u548c\u53cc\u5411\u94fe\u8868\u7684\u7406\u89e3\u53ca\u7f16\u7a0b\u80fd\u529b\u3002 \u9762\u8bd5\u9898 37\uff1a\u5e8f\u5217\u5316\u4e8c\u53c9\u6811 \u8bf7\u5b9e\u73b0\u4e24\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u7528\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811\uff0c\u53ea\u6709\u6839\u8282\u70b9\u7684\u6811\uff1b \u529f\u80fd\u6d4b\u8bd5\uff1a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u53ea\u6709\u5de6\u5b50\u6811/\u53f3\u5b50\u6811\u7684\u4e8c\u53c9\u6811\uff0c\u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u76f8\u540c\u7684\u4e8c\u53c9\u6811\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a class Solution: def __init__(self): self.root = None def Serialize(self, root): path = [] self.pre_order(root, path) return \",\".join(path) def Deserialize(self, s): node_list = s.split(',') root = self.pre_order_create(node_list) self.root = root def pre_order(self, node, path): if node: path.append(str(node.val)) self.pre_order(node.left, path) self.pre_order(node.right, path) else: path.append('#') def pre_order_create(self, node_list): node_val = node_list.pop(0) if node_val == '#': return None node = TreeNode(int(node_val)) node.left = self.pre_order_create(node_list) node.right = self.pre_order_create(node_list) return node \u3010\u8bf4\u660e\u3011\uff1a\u5b9e\u9645\u4e0a\u5c31\u662f\u5148\u5e8f\u904d\u5386\u4ee5\u53ca\u6839\u636e\u5148\u5e8f\u904d\u5386\u521b\u5efa\u4e8c\u53c9\u6811\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u590d\u6742\u95ee\u9898\u7684\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u4e8c\u53c9\u6811\u904d\u5386\u7684\u7406\u89e3\u53ca\u7f16\u7a0b\u80fd\u529b\u3002 \u9762\u8bd5\u9898 38\uff1a\u5b57\u7b26\u4e32\u7684\u6392\u5217 \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32,\u6309\u5b57\u5178\u5e8f\u6253\u5370\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u6240\u6709\u6392\u5217\u3002\u4f8b\u5982\u8f93\u5165\u5b57\u7b26\u4e32abc,\u5219\u6253\u5370\u51fa\u7531\u5b57\u7b26a,b,c\u6240\u80fd\u6392\u5217\u51fa\u6765\u7684\u6240\u6709\u5b57\u7b26\u4e32abc,acb,bac,bca,cab\u548ccba\u3002 \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5355\u4e2a\u5b57\u7b26\u4e32\uff1b \u529f\u80fd\u6d4b\u8bd5\uff1a\u7b26\u5408\u8981\u6c42\u7684\u5b57\u7b26\u4e32\uff0c\u5b58\u5728\u91cd\u590d\u7684\u5b57\u7b26\u4e32\u3002 # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u5b57\u7b26\u4e32 result1 = Permutation('') # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u5355\u4e2a\u5b57\u7b26\u4e32 result2 = Permutation('a') # \u529f\u80fd\u6d4b\u8bd5\uff1a\u7b26\u5408\u8981\u6c42 result3 = Permutation('abc') # \u529f\u80fd\u6d4b\u8bd5\uff1a\u91cd\u590d\u5b57\u7b26\u4e32 result4 = Permutation('abbc') \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a def Permutation(ss): if len(ss) == 0: return [] ss_list = list(ss) total_str = [] loop(ss_list, '', total_str) return sorted(list(set(total_str))) def loop(str_list, string, total_str): if len(str_list) == 0: total_str.append(string) for i in range(len(str_list)): loop(str_list[0:i] + str_list[i + 1:], string + str_list[i], total_str) \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u7684\u601d\u7ef4\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u9012\u5f52\u7684\u7406\u89e3\u548c\u7f16\u7a0b\u80fd\u529b\u3002 \u672c\u7ae0\u5c0f\u7ed3 \u5728\u9762\u8bd5\u65f6\uff0c\u6211\u4eec\u96be\u514d\u4f1a\u9047\u5230\u96be\u9898\uff0c\u753b\u56fe\u3001\u4e3e\u4f8b\u548c\u5206\u89e3\u8fd9\u4e09\u79cd\u65b9\u6cd5\u80fd\u591f\u5e2e\u52a9\u6211\u4eec\u89e3\u51b3\u590d\u6742\u7684\u95ee\u9898\u3002 \u56fe\u5f62\u80fd\u4f7f\u62bd\u8c61\u7684\u95ee\u9898\u5f62\u8c61\u5316\u3002\u5f53\u9762\u8bd5\u9898\u6d89\u53ca\u94fe\u8868\u3001\u4e8c\u53c9\u6811\u7b49\u6570\u636e\u7ed3\u6784\u65f6\uff0c\u5982\u679c\u5728\u7eb8\u4e0a\u753b\u51e0\u5f20\u8349\u56fe\uff0c\u5219\u9898\u76ee\u4e2d\u9690\u85cf\u7684\u89c4\u5f8b\u5c31\u6709\u53ef\u80fd\u53d8\u5f97\u5f88\u76f4\u89c2\u3002 \u4e00\u4e24\u4e2a\u4f8b\u5b50\u80fd\u4f7f\u62bd\u8c61\u7684\u95ee\u9898\u5177\u4f53\u5316\u3002\u5f88\u591a\u4e0e\u7b97\u6cd5\u76f8\u5173\u7684\u95ee\u9898\u90fd\u5f88\u62bd\u8c61\uff0c\u672a\u5fc5\u4e00\u773c\u5c31\u80fd\u770b\u51fa\u5b83\u4eec\u7684\u89c4\u5f8b\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u4e0d\u59a8\u4e3e\u51e0\u4e2a\u4f8b\u5b50\uff0c\u4e00\u6b65\u4e00\u6b65\u6a21\u62df\u8fd0\u884c\u7684\u8fc7\u7a0b\uff0c\u8bf4\u4e0d\u5b9a\u80fd\u53d1\u73b0\u5176\u4e2d\u7684\u89c4\u5f8b\uff0c\u4ece\u800c\u627e\u5230\u89e3\u51b3\u95ee\u9898\u7684\u7a8d\u95e8\u3002 \u628a\u590d\u6742\u95ee\u9898\u5206\u89e3\u6210\u82e5\u5e72\u4e2a\u5c0f\u95ee\u9898\uff0c\u662f\u89e3\u51b3\u5f88\u591a\u590d\u6742\u95ee\u9898\u7684\u6709\u6548\u65b9\u6cd5\u3002\u5982\u679c\u6211\u4eec\u9047\u5230\u7684\u95ee\u9898\u5f88\u5927\uff0c\u5219\u53ef\u4ee5\u5c1d\u8bd5\u5148\u628a\u5927\u95ee\u9898\u5206\u89e3\u6210\u5c0f\u95ee\u9898\uff0c\u7136\u540e\u518d\u9012\u5f52\u5730\u89e3\u51b3\u8fd9\u4e9b\u5c0f\u95ee\u9898\u3002\u5206\u6cbb\u6cd5\u3001\u52a8\u6001\u89c4\u5212\u7b49\u65b9\u6cd5\u5e94\u7528\u7684\u90fd\u662f\u5206\u89e3\u590d\u6742\u95ee\u9898\u7684\u601d\u8def\u3002","title":"\u89e3\u51b3\u9762\u8bd5\u9898\u7684\u601d\u8def"},{"location":"\u89e3\u51b3\u9762\u8bd5\u9898\u7684\u601d\u8def/#_1","text":"\u753b\u56fe\u662f\u5728\u9762\u8bd5\u8fc7\u7a0b\u4e2d\u5e94\u8058\u8005\u7528\u6765\u5e2e\u52a9\u81ea\u5df1\u5206\u6790\u3001\u63a8\u7406\u7684\u5e38\u7528\u624b\u6bb5\u3002\u5f88\u591a\u9762\u8bd5\u9898\u5f88\u62bd\u8c61\uff0c\u4e0d\u5bb9\u6613\u627e\u5230\u89e3\u51b3\u529e\u6cd5\u3002\u8fd9\u65f6\u4e0d\u59a8\u753b\u51fa\u4e00\u4e9b\u4e0e\u9898\u76ee\u76f8\u5173\u7684\u56fe\u5f62\uff0c\u501f\u4ee5\u8f85\u52a9\u81ea\u5df1\u89c2\u5bdf\u548c\u601d\u8003\u3002\u56fe\u5f62\u80fd\u4f7f\u62bd\u8c61\u7684\u95ee\u9898\u5177\u4f53\u5316\u3001\u5f62\u8c61\u5316\uff0c\u5e94\u8058\u8005\u8bf4\u4e0d\u5b9a\u901a\u8fc7\u51e0\u5e45\u56fe\u5f62\u5c31\u80fd\u627e\u5230\u89c4\u5f8b\uff0c\u4ece\u800c\u627e\u5230\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u6709\u4e0d\u5c11\u4e0e\u6570\u636e\u7ed3\u6784\u76f8\u5173\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u4e8c\u53c9\u6811\u3001\u4e8c\u7ef4\u6570\u7ec4\u3001\u94fe\u8868\u7b49\u95ee\u9898\uff0c\u90fd\u53ef\u4ee5\u91c7\u7528\u753b\u56fe\u7684\u65b9\u6cd5\u6765\u5206\u6790\u3002 \u5728\u9762\u8bd5\u7684\u65f6\u5019\uff0c\u5e94\u8058\u8005\u9700\u8981\u5411\u9762\u8bd5\u5b98\u89e3\u91ca\u81ea\u5df1\u7684\u601d\u8def\u3002\u5bf9\u4e8e\u590d\u6742\u7684\u95ee\u9898\uff0c\u5e94\u8058\u8005\u5149\u7528\u8bed\u8a00\u672a\u5fc5\u80fd\u591f\u8bf4\u5f97\u6e05\u695a\u3002\u8fd9\u65f6\u5019\u53ef\u4ee5\u753b\u51fa\u51e0\u5e45\u56fe\u5f62\uff0c\u4e00\u8fb9\u770b\u7740\u56fe\u5f62\u4e00\u8fb9\u8bb2\u89e3\uff0c\u9762\u8bd5\u5b98\u5c31\u80fd\u66f4\u52a0\u8f7b\u677e\u5730\u7406\u89e3\u5e94\u8058\u8005\u7684\u601d\u8def\u3002\u8fd9\u5bf9\u5e94\u8058\u8005\u662f\u6709\u76ca\u7684\uff0c\u56e0\u4e3a\u9762\u8bd5\u5b98\u4f1a\u89c9\u5f97\u4ed6\u5177\u6709\u5f88\u597d\u7684\u6c9f\u901a\u4ea4\u6d41\u80fd\u529b\u3002","title":"\u753b\u56fe\u8ba9\u62bd\u8c61\u95ee\u9898\u5f62\u8c61\u5316"},{"location":"\u89e3\u51b3\u9762\u8bd5\u9898\u7684\u601d\u8def/#27","text":"\u64cd\u4f5c\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\uff0c\u5c06\u5176\u53d8\u6362\u4e3a\u6e90\u4e8c\u53c9\u6811\u7684\u955c\u50cf\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class ListNode: def __init__(self, x): self.x = x self.left = None self.right = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u6b63\u5e38\u7684\u4e8c\u53c9\u6811\u3001\u53ea\u6709\u5de6\u5b50\u6811\uff08\u53f3\u5b50\u6811\uff09\u7684\u4e8c\u53c9\u6811\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811\u3001\u53ea\u6709\u6839\u8282\u70b9\u7684\u6811\u3002 # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811 result1 = Mirror(None) # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u53ea\u6709\u6839\u8282\u70b9\u7684\u6811 result2 = Mirror(ListNode(1)) # \u529f\u80fd\u6d4b\u8bd5\uff1a node_1 = ListNode(8) node_2 = ListNode(6) node_3 = ListNode(10) node_4 = ListNode(5) node_5 = ListNode(7) node_6 = ListNode(9) node_7 = ListNode(11) node_1.left, node_1.right = node_2, node_3 node_2.left, node_2.right = node_4, node_5 node_3.left, node_3.right = node_6, node_7 result3 = Mirror(node_1) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u53ea\u6709\u5de6\u5b50\u6811\uff08\u53f3\u5b50\u6811\uff09\u7684\u4e8c\u53c9\u6811 node_1 = ListNode(1) node_2 = ListNode(2) node_3 = ListNode(3) node_4 = ListNode(4) node_1.left = node_2 node_2.left = node_3 node_3.left = node_4 result4 = Mirror(node_1) \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u9012\u5f52\u904d\u5386\u3002 def Mirror(root): mirror_traver(root) return root def mirror_traver(node): if node: Mirror(node.left) Mirror(node.right) node.left, node.right = node.right, node.left \u3010\u8bf4\u660e\u3011\uff1a\u5728\u904d\u5386\u4e8c\u53c9\u6811\u7684\u540c\u65f6\u4ea4\u6362\u5f53\u524d\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u8282\u70b9\u3002\u4e0a\u8ff0\u4ee3\u7801\u8fd8\u6709\u6539\u8fdb\u7684\u7a7a\u95f4\uff0c\u51cf\u5c11\u9012\u5f52\u8c03\u7528\u7684\u6df1\u5ea6\u3002 def mirror_traver(node): if node: if node.left: Mirror(node.left) if node.right: Mirror(node.right) node.left, node.right = node.right, node.left \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5c42\u5e8f\u904d\u5386\u3002 def Mirror(root): if not root: return None node_list = [root] while len(node_list) > 0: node = node_list.pop(0) if node.left: node_list.append(node.left) if node.right: node_list.append(node.right) node.left, node.right = node.right, node.left return root \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u4e8c\u53c9\u6811\u7684\u7406\u89e3\u3002\u672c\u9898\u5b9e\u8d28\u4e0a\u662f\u5229\u7528\u6811\u7684\u904d\u5386\u7b97\u6cd5\u89e3\u51b3\u95ee\u9898\u3002 \u8003\u67e5\u5e94\u8058\u8005\u7684\u601d\u7ef4\u80fd\u529b\u3002\u6811\u7684\u955c\u50cf\u662f\u4e00\u4e2a\u62bd\u8c61\u7684\u6982\u5ff5\uff0c\u5e94\u8058\u8005\u9700\u8981\u5728\u77ed\u65f6\u95f4\u5185\u60f3\u6e05\u695a\u6c42\u955c\u50cf\u7684\u6b65\u9aa4\u5e76\u8f6c\u6362\u4e3a\u4ee3\u7801\u3002\u5e94\u8058\u8005\u53ef\u4ee5\u901a\u8fc7\u753b\u56fe\u628a\u62bd\u8c61\u7684\u95ee\u9898\u5f62\u8c61\u5316\uff0c\u8fd9\u6709\u52a9\u4e8e\u5176\u5feb\u901f\u627e\u5230\u89e3\u9898\u601d\u8def\u3002","title":"\u9762\u8bd5\u9898 27\uff1a\u4e8c\u53c9\u6811\u7684\u955c\u50cf"},{"location":"\u89e3\u51b3\u9762\u8bd5\u9898\u7684\u601d\u8def/#28","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u4e00\u9897\u4e8c\u53c9\u6811\u662f\u4e0d\u662f\u5bf9\u79f0\u7684\u3002\u6ce8\u610f\uff0c\u5982\u679c\u4e00\u4e2a\u4e8c\u53c9\u6811\u540c\u6b64\u4e8c\u53c9\u6811\u7684\u955c\u50cf\u662f\u540c\u6837\u7684\uff0c\u5b9a\u4e49\u5176\u4e3a\u5bf9\u79f0\u7684\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class ListNode: def __init__(self, x): self.val = x self.left = None self.right = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u5bf9\u79f0\u7684\u4e8c\u53c9\u6811\uff0c\u975e\u5bf9\u79f0\u4e8c\u53c9\u6811\uff08\u7ed3\u6784\u4e0d\u5bf9\u79f0\u3001\u7ed3\u6784\u5bf9\u79f0\u4f46\u8282\u70b9\u7684\u503c\u4e0d\u5bf9\u79f0\uff09\uff0c\u6240\u6709\u8282\u70b9\u503c\u90fd\u76f8\u540c\u7684\u4e8c\u53c9\u6811\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811\uff0c\u53ea\u6709\u6839\u8282\u70b9\u7684\u6811\u3002 # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811 result1 = isSymmetrical(None) # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u53ea\u6709\u6839\u8282\u70b9\u7684\u6811 result2 = isSymmetrical(ListNode(1)) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u975e\u5bf9\u79f0\u4e8c\u53c9\u6811 node_1 = ListNode(8) node_2 = ListNode(6) node_3 = ListNode(10) node_4 = ListNode(5) node_5 = ListNode(7) node_6 = ListNode(9) node_7 = ListNode(11) node_1.left, node_1.right = node_2, node_3 node_2.left, node_2.right = node_4, node_5 node_3.left, node_3.right = node_6, node_7 result3 = isSymmetrical(node_1) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u975e\u5bf9\u79f0\u4e8c\u53c9\u6811 node_1 = ListNode(5) node_2 = ListNode(3) node_3 = ListNode(3) node_4 = ListNode(4) node_5 = ListNode(4) node_6 = ListNode(2) node_7 = ListNode(2) node_8 = ListNode(1) node_1.left, node_1.right = node_2, node_3 node_2.left = node_4 node_3.right = node_5 node_4.left = node_6 node_5.right = node_7 node_7.right = node_8 result4 = isSymmetrical(node_1) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u975e\u5bf9\u79f0\u4e8c\u53c9\u6811 node_1 = ListNode(5) node_2 = ListNode(5) node_3 = ListNode(5) node_4 = ListNode(5) node_5 = ListNode(5) node_6 = ListNode(5) node_7 = ListNode(5) node_1.left, node_1.right = node_2, node_3 node_2.left = node_4 node_3.right = node_5 node_4.left = node_6 node_5.left = node_7 result5 = isSymmetrical(node_1) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u5bf9\u79f0\u4e8c\u53c9\u6811 node_1 = ListNode(8) node_2 = ListNode(6) node_3 = ListNode(6) node_4 = ListNode(5) node_5 = ListNode(7) node_6 = ListNode(7) node_7 = ListNode(5) node_1.left, node_1.right = node_2, node_3 node_2.left, node_2.right = node_4, node_5 node_3.left, node_3.right = node_6, node_7 result6 = isSymmetrical(node_1) \u3010\u6ce8\u610f\u4e8b\u9879\u3011\uff1a\u7a7a\u6811\u548c\u53ea\u6709\u6839\u8282\u70b9\u7684\u6811\u90fd\u88ab\u89c6\u4e3a\u5bf9\u79f0\u7684\u4e8c\u53c9\u6811\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5c42\u5e8f\u904d\u5386\u5b9e\u73b0\u3002 def isSymmetrical(pRoot): if not pRoot: return True node_list = [pRoot] while len(node_list): layer_nodes = [] for node in node_list: if node: layer_nodes.append(node.left) layer_nodes.append(node.right) # \u5224\u65ad\u662f\u5426\u5173\u4e8e\u4e2d\u70b9\u5bf9\u79f0 length = len(layer_nodes) start, end = 0, length - 1 if length & 0x01 == 1: return False while True: if start >= end: break node_start = layer_nodes[start].val if layer_nodes[start] else 0 node_end = layer_nodes[end].val if layer_nodes[end] else 0 if node_start != node_end: return False start += 1 end -= 1 node_list = layer_nodes return True \u3010\u8bf4\u660e\u3011\uff1a \u9996\u5148\u9488\u5bf9\u7279\u6b8a\u8f93\u5165\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\u3002 \u5c42\u5e8f\u904d\u5386\u8fc7\u7a0b\u4e2d\u83b7\u53d6\u5b50\u8282\u70b9\u96c6\u5408\uff0c\u5e76\u4fdd\u5b58\u5230\u5217\u8868 layer_nodes \u4e2d\u3002 \u5224\u65ad layer_nodes \u4e2d\u7684\u5143\u7d20\u4e2a\u6570\u662f\u5426\u4e3a\u5076\u6570\uff0c\u82e5\u4e3a\u5947\u6570\uff0c\u5219\u8bf4\u660e\u4e0d\u5bf9\u79f0\uff0c\u53ef\u76f4\u63a5\u8fd4\u56de False\u3002 \u82e5\u4e3a\u5076\u6570\uff0c\u5219\u7ee7\u7eed\u5224\u65ad\uff1a\u4ece\u5217\u8868\u7684\u4e24\u7aef\u9010\u6b65\u5411\u4e2d\u95f4\u9760\u62e2\uff0c\u5e76\u4f9d\u6b21\u6bd4\u8f83\u5217\u8868\u4e24\u7aef\u7684\u8282\u70b9\u662f\u5426\u76f8\u540c\u3002\u82e5\u4e0d\u76f8\u540c\uff0c\u5219\u8bf4\u660e\u4e0d\u5bf9\u79f0\uff0c\u8fd4\u56de False\u3002 \u5faa\u73af\u7ed3\u675f\u5b8c\u6bd5\uff0c\u8bf4\u660e\u5f53\u524d\u4e8c\u53c9\u6811\u662f\u5bf9\u79f0\u7684\uff0c\u8fd4\u56de True\u3002 \u96be\u70b9\uff1alayer_nodes \u9700\u8981\u8bb0\u5f55\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u5355\u7eaf\u5b58\u50a8\u503c\u65e0\u6cd5\u6b63\u786e\u5224\u65ad\uff0c\u4f8b\u5982\u6d4b\u8bd5\u7528\u4f8b 5\uff08result5\uff09\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5148\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u3002 def isSymmetrical(pRoot): if not pRoot: return True pre_nodes = [] past_nodes = [] def pre_traver(node): if node: pre_nodes.append(node.val) pre_traver(node.left) pre_traver(node.right) else: pre_nodes.append('#') def past_traver(node): if node: past_traver(node.left) past_traver(node.right) past_nodes.append(node.val) else: past_nodes.append('#') pre_traver(pRoot) past_traver(pRoot) print(pre_nodes, list(reversed(past_nodes))) return pre_nodes == list(reversed(past_nodes)) \u3010\u8bf4\u660e\u3011\uff1a\u5148\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u7684\u8282\u70b9\u987a\u5e8f\u6070\u597d\u662f\u76f8\u53cd\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u901a\u8fc7\u5148\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u5f97\u5230\u904d\u5386\u987a\u5e8f\uff0c\u7136\u540e\u5c06\u5176\u4e2d\u4e00\u4e2a\u987a\u5e8f\u5012\u7f6e\uff0c\u6700\u540e\u8fdb\u884c\u6bd4\u8f83\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7a7a\u8282\u70b9\u4e5f\u9700\u8981\u4fdd\u5b58\uff0c\u76ee\u7684\u540c\u4e0a\u4e00\u4e2a\u7a0b\u5e8f\u5b9e\u73b0\uff08\u8bb0\u5f55\u4f4d\u7f6e\u4fe1\u606f\uff09\u3002\u5177\u4f53\u53ef\u53c2\u8003\u4e66\u672c\u4e0a\u7684\u8bb2\u89e3 P 160\u3002 \u3010\u6539\u8fdb\u3011\uff1a\u5c06\u540e\u5e8f\u904d\u5386\u4fee\u6539\u4e0b\uff0c\u53ef\u51cf\u5c11\u540e\u7eed\u7684\u5012\u7f6e\u64cd\u4f5c\u3002 def past_traver(node): if node: past_nodes.append(node.val) past_traver(node.right) past_traver(node.left) else: past_nodes.append('#') pre_traver(pRoot) past_traver(pRoot) print(pre_nodes, past_nodes) return pre_nodes == past_nodes \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u4e8c\u53c9\u6811\u7684\u7406\u89e3\u3002\u672c\u9898\u5b9e\u8d28\u4e0a\u5229\u7528\u6811\u7684\u904d\u5386\u7b97\u6cd5\u89e3\u51b3\u95ee\u9898\u3002 \u8003\u67e5\u5e94\u8058\u8005\u7684\u601d\u7ef4\u80fd\u529b\u3002\u6811\u7684\u5bf9\u79f0\u662f\u4e00\u4e2a\u62bd\u8c61\u7684\u6982\u5ff5\uff0c\u5e94\u8058\u8005\u9700\u8981\u5728\u77ed\u65f6\u95f4\u5185\u60f3\u6e05\u695a\u5224\u65ad\u5bf9\u79f0\u7684\u6b65\u9aa4\u5e76\u8f6c\u6362\u4e3a\u4ee3\u7801\u3002\u5e94\u8058\u8005\u53ef\u4ee5\u901a\u8fc7\u753b\u56fe\u628a\u62bd\u8c61\u7684\u95ee\u9898\u5f62\u8c61\u5316\uff0c\u8fd9\u6709\u52a9\u4e8e\u5176\u5feb\u901f\u627e\u5230\u89e3\u9898\u601d\u8def\u3002","title":"\u9762\u8bd5\u9898 28\uff1a\u5bf9\u79f0\u7684\u4e8c\u53c9\u6811"},{"location":"\u89e3\u51b3\u9762\u8bd5\u9898\u7684\u601d\u8def/#_2","text":"\u501f\u52a9\u4e3e\u4f8b\u6a21\u62df\u7684\u65b9\u6cd5\u6765\u601d\u8003\u5206\u6790\u590d\u6742\u7684\u95ee\u9898\u3002\u5f53\u4e00\u773c\u770b\u4e0d\u51fa\u95ee\u9898\u4e2d\u9690\u85cf\u7684\u89c4\u5f8b\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u8bd5\u7740\u7528\u4e00\u4e24\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u6a21\u62df\u64cd\u4f5c\u7684\u8fc7\u7a0b\uff0c\u8fd9\u6837\u8bf4\u4e0d\u5b9a\u5c31\u80fd\u901a\u8fc7\u5177\u4f53\u7684\u4f8b\u5b50\u627e\u5230\u62bd\u8c61\u7684\u89c4\u5f8b\u3002 \u5177\u4f53\u7684\u4f8b\u5b50\u4e5f\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5411\u9762\u8bd5\u5b98\u89e3\u91ca\u7b97\u6cd5\u601d\u8def\u3002\u7b97\u6cd5\u901a\u5e38\u662f\u5f88\u62bd\u8c61\u7684\uff0c\u7528\u8bed\u8a00\u4e0d\u5bb9\u6613\u8868\u8ff0\u5f97\u6e05\u695a\uff0c\u53ef\u4ee5\u8003\u8651\u4e3e\u4e00\u4e24\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u544a\u8bc9\u9762\u8bd5\u5b98\u6211\u4eec\u7684\u7b97\u6cd5\u662f\u600e\u4e48\u4e00\u6b65\u6b65\u5904\u7406\u8fd9\u4e2a\u4f8b\u5b50\u7684\u3002 \u5177\u4f53\u7684\u4f8b\u5b50\u8fd8\u80fd\u5e2e\u52a9\u6211\u4eec\u786e\u4fdd\u4ee3\u7801\u7684\u8d28\u91cf\u3002\u5728\u9762\u8bd5\u4e2d\u5199\u5b8c\u4ee3\u7801\u4e4b\u540e\uff0c\u5e94\u8be5\u5148\u68c0\u67e5\u4e00\u904d\uff0c\u786e\u4fdd\u6ca1\u6709\u95ee\u9898\u518d\u4ea4\u7ed9\u9762\u8bd5\u5b98\u3002\u600e\u4e48\u68c0\u67e5\u5462\uff1f\u53ef\u4ee5\u8fd0\u884c\u51e0\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u3002\u5728\u5206\u6790\u95ee\u9898\u7684\u65f6\u5019\u91c7\u7528\u7684\u4f8b\u5b50\u5c31\u662f\u6d4b\u8bd5\u7528\u4f8b\u3002\u53ef\u4ee5\u628a\u8fd9\u4e9b\u4f8b\u5b50\u5f53\u4f5c\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5728\u5fc3\u91cc\u6a21\u62df\u8fd0\u884c\uff0c\u770b\u6bcf\u4e00\u6b65\u64cd\u4f5c\u4e4b\u540e\u7684\u7ed3\u679c\u548c\u6211\u4eec\u9884\u671f\u7684\u662f\u4e0d\u662f\u4e00\u81f4\u3002\u5982\u679c\u6bcf\u4e00\u6b65\u7684\u7ed3\u679c\u90fd\u548c\u4e8b\u5148\u9884\u8ba1\u7684\u4e00\u81f4\uff0c\u6211\u4eec\u5c31\u80fd\u786e\u4fdd\u4ee3\u7801\u7684\u6b63\u786e\u6027\u4e86\u3002","title":"\u4e3e\u4f8b\u8ba9\u62bd\u8c61\u95ee\u9898\u5177\u4f53\u5316"},{"location":"\u89e3\u51b3\u9762\u8bd5\u9898\u7684\u601d\u8def/#30-min","text":"\u5b9a\u4e49\u6808\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u5728\u8be5\u7c7b\u578b\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5f97\u5230\u6808\u4e2d\u6240\u542b\u6700\u5c0f\u5143\u7d20\u7684 min \u51fd\u6570\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3aO(1)\uff09\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class Solution: def push(self, node): # write code here def pop(self): # write code here def top(self): # write code here def min(self): # write code here \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u65b0\u538b\u5165\u6808\u7684\u6570\u5b57\u6bd4\u4e4b\u524d\u7684\u6700\u5c0f\u503c\u5927\uff1b \u65b0\u538b\u5165\u6808\u7684\u6570\u5b57\u6bd4\u4e4b\u524d\u7684\u6700\u5c0f\u503c\u5c0f\uff1b \u5f39\u51fa\u6808\u7684\u6570\u5b57\u4e0d\u662f\u6700\u5c0f\u5143\u7d20\uff1b \u5f39\u51fa\u6808\u7684\u6570\u5b57\u662f\u6700\u5c0f\u5143\u7d20\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u6dfb\u52a0\u53d8\u91cf\u4fdd\u5b58\u6700\u5c0f\u5143\u7d20 class Solution: stack = [] min_param = [] def push(self, node): if len(self.min_param) == 0: self.min_param.append(node) else: if self.min_param[0] > node: self.min_param[0] = node self.stack.append(node) def pop(self): if len(self.stack) == 0: return node = self.stack.pop() if node == self.min_param[0]: self.min_param[0] = min(self.stack) return node def top(self): if len(self.stack) != 0: print(self.stack[-1]) def min(self): if len(self.min_param) == 1: return self.min_param[0] \u3010\u8bf4\u660e\u3011\uff1a push\uff1a\u6bd4\u8f83\u5f53\u524d\u6dfb\u52a0\u7684\u5143\u7d20\u662f\u5426\u6bd4\u6700\u5c0f\u503c\u5c0f\uff0c\u82e5\u6bd4\u6700\u5c0f\u503c\u5c0f\uff0c\u5219\u66f4\u65b0\u6700\u5c0f\u503c\u3002 pop\uff1a\u82e5\u5f53\u524d pop \u7684\u503c\u4e3a\u6700\u5c0f\u503c\uff0c\u5219\u91cd\u65b0\u5bfb\u627e\u6700\u5c0f\u503c\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u8f85\u52a9\u6808 class Solution: stack = [] stack_min = [] def push(self, node): if len(self.stack_min) == 0: self.stack_min.append(node) else: if self.stack_min[-1] < node: self.stack_min.append(self.stack_min[-1]) else: self.stack_min.append(node) self.stack.append(node) def pop(self): if len(self.stack) == 0: return node = self.stack.pop() self.stack_min.pop() return node def top(self): if len(self.stack) != 0: print(self.stack[-1]) def min(self): if len(self.stack_min) > 0: return self.stack_min[-1] \u3010\u8bf4\u660e\u3011\uff1a\u5177\u4f53\u53ef\u53c2\u8003\u300a\u5251\u6307offer\u300bP166-P167\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u590d\u6742\u95ee\u9898\u7684\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u6808\u7684\u7406\u89e3\u3002","title":"\u9762\u8bd5\u9898 30\uff1a\u5305\u542b min \u51fd\u6570\u7684\u6808"},{"location":"\u89e3\u51b3\u9762\u8bd5\u9898\u7684\u601d\u8def/#31","text":"\u8f93\u5165\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u8868\u793a\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u8bf7\u5224\u65ad\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u5426\u53ef\u80fd\u4e3a\u8be5\u6808\u7684\u5f39\u51fa\u987a\u5e8f\u3002\u5047\u8bbe\u538b\u5165\u6808\u7684\u6240\u6709\u6570\u5b57\u5747\u4e0d\u76f8\u7b49\u3002\u4f8b\u5982\u5e8f\u5217 1,2,3,4,5 \u662f\u67d0\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u5e8f\u5217 4,5,3,2,1 \u662f\u8be5\u538b\u6808\u5e8f\u5217\u5bf9\u5e94\u7684\u4e00\u4e2a\u5f39\u51fa\u5e8f\u5217\uff0c\u4f46 4,3,5,1,2 \u5c31\u4e0d\u53ef\u80fd\u662f\u8be5\u538b\u6808\u5e8f\u5217\u7684\u5f39\u51fa\u5e8f\u5217\u3002\uff08\u6ce8\u610f\uff1a\u8fd9\u4e24\u4e2a\u5e8f\u5217\u7684\u957f\u5ea6\u662f\u76f8\u7b49\u7684\uff09\u3002 \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u6b63\u786e\u7684\u5f39\u51fa\u5e8f\u5217\u3001\u9519\u8bef\u7684\u5f39\u51fa\u5e8f\u5217\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u4e24\u4e2a\u7a7a\u5e8f\u5217\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u4e2d\u89c4\u4e2d\u77e9\u7684\u5b9e\u73b0\u3002 def IsPopOrder(pushV, popV): length = len(pushV) if length == 0: return False stack = [] i_push, i_pop = 0, 0 # \u5165\u6808\u5faa\u73af while i_push < length: if pushV[i_push] != popV[i_pop]: if len(stack) > 0 and stack[-1] == popV[i_pop]: stack.pop() i_pop += 1 else: stack.append(pushV[i_push]) i_push += 1 else: i_pop += 1 i_push += 1 # \u51fa\u6808\u5faa\u73af while len(stack) > 0: if stack.pop() != popV[i_pop]: return False i_pop += 1 return True if __name__ == '__main__': push_v = [1, 2, 3, 4, 5] pop_v1 = [4, 5, 3, 2, 1] pop_v2 = [4, 3, 5, 1, 2] print(IsPopOrder(push_v, pop_v1)) print(IsPopOrder(push_v, pop_v2)) print(IsPopOrder([], []) # \u8f93\u51fa True False False \u3010\u8bf4\u660e\u3011\uff1a - \u538b\u6808\u64cd\u4f5c\uff1a\u5728\u538b\u6808\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u5f53\u524d\u538b\u5165\u6808\u7684\u5143\u7d20\u4e0e\u51fa\u6808\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u76f8\u7b49\uff0c\u5219\u8868\u660e\u5f53\u524d\u5143\u7d20\u5165\u6808\u540e\u7acb\u5373\u51fa\u6808\uff0c\u56e0\u6b64\u5f53\u524d\u5143\u7d20\u4e0d\u9700\u8981\u538b\u5165\u6808\uff0c\u5165\u6808\u548c\u51fa\u6808\u5e8f\u5217\u5411\u540e\u79fb\u4e00\u4f4d\u3002\u82e5\u4e0d\u76f8\u7b49\uff0c\u5219\u5224\u65ad\u8f85\u52a9\u6808\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u4e0e\u51fa\u6808\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u76f8\u7b49\u3002\u82e5\u76f8\u7b49\uff0c\u5219\u51fa\u6808\uff0c\u51fa\u6808\u5e8f\u5217\u540e\u79fb\u4e00\u4f4d\u3002\u82e5\u4e0d\u76f8\u7b49\uff0c\u5219\u5165\u6808\u5e8f\u5217\u540e\u79fb\u4e00\u4f4d\uff0c\u5373\u7ee7\u7eed\u5165\u6808\u3002 - \u51fa\u6808\u64cd\u4f5c\uff1a\u5728\u51fa\u6808\u8fc7\u7a0b\u4e2d\uff0c\u53ea\u9700\u8981 pop \u8f85\u52a9\u6808\uff0c\u6bd4\u8f83\u6bcf\u4e00\u6b21 pop \u7684\u5143\u7d20\u662f\u5426\u548c\u51fa\u6808\u5e8f\u5217\u76f8\u7b49\u3002\u82e5\u4e0d\u76f8\u7b49\uff0c\u5219 return False\u3002\u5faa\u73af\u7ed3\u675f\uff0c\u8fd4\u56de True\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u4e66\u672c\u65b9\u6cd5\u3002 def IsPopOrder(pushV, popV): length = len(pushV) if length == 0: return False stack = [] i_push, i_pop = 0, 0 # \u5165\u6808\u5faa\u73af while i_push < length: stack.append(pushV[i_push]) i_push += 1 # \u5224\u65ad\u6808\u9876\u5143\u7d20\u662f\u5426\u4e0e\u51fa\u6808\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u76f8\u7b49 while True: if len(stack) > 0 and stack[-1] == popV[i_pop]: stack.pop() i_pop += 1 else: break return i_push == i_pop \u3010\u8bf4\u660e\u3011\uff1a\u5982\u679c\u4e0b\u4e00\u4e2a\u5f39\u51fa\u7684\u6570\u5b57\u521a\u597d\u662f\u6808\u9876\u6570\u5b57\uff0c\u90a3\u4e48\u76f4\u63a5\u5f39\u51fa\uff1b\u5982\u679c\u4e0b\u4e00\u4e2a\u5f39\u51fa\u7684\u6570\u5b57\u4e0d\u5728\u6808\u9876\uff0c\u5219\u628a\u538b\u6808\u5e8f\u5217\u4e2d\u8fd8\u6ca1\u6709\u5165\u6808\u7684\u6570\u5b57\u538b\u5165\u8f85\u52a9\u6808\uff0c\u76f4\u5230\u628a\u4e0b\u4e00\u4e2a\u9700\u8981\u5f39\u51fa\u7684\u6570\u5b57\u538b\u5165\u6808\u9876\u4e3a\u6b62\u3002\u5982\u679c\u6240\u6709\u6570\u5b57\u90fd\u538b\u5165\u6808\u540e\u4ecd\u7136\u6ca1\u6709\u627e\u5230\u4e0b\u4e00\u4e2a\u5f39\u51fa\u7684\u6570\u5b57\uff0c\u90a3\u4e48\u8be5\u5e8f\u5217\u4e0d\u53ef\u80fd\u662f\u4e00\u4e2a\u5f39\u51fa\u5e8f\u5217\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u590d\u6742\u95ee\u9898\u7684\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u6808\u7684\u7406\u89e3\u3002","title":"\u9762\u8bd5\u9898 31\uff1a\u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217"},{"location":"\u89e3\u51b3\u9762\u8bd5\u9898\u7684\u601d\u8def/#32","text":"\u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u540c\u5c42\u8282\u70b9\u4ece\u5de6\u81f3\u53f3\u6253\u5370\u3002 \u3010\u6ce8\u610f\u3011\uff1a\u867d\u7136\u9898\u76ee\u4e2d\u8bf4\u7684\u662f\u6253\u5370\uff0c\u4f46\u5b9e\u9645\u4e0a\u662f\u8981\u5c06\u8282\u70b9\u7684\u503c\u5b58\u653e\u5230\u5217\u8868\u4e2d\u8fd4\u56de\u3002\u5176\u5b9e\u4e5f\u5f88\u597d\u7406\u89e3\uff0c\u5728\u7ebf\u7f16\u7a0b\u4e0d\u53ef\u80fd\u5224\u5b9a print \u6253\u5370\u7684\u5185\u5bb9\uff0c\u800c\u662f\u5224\u5b9a\u8fd4\u56de\u5217\u8868\u7684\u5185\u5bb9\u6765\u5f97\u8f7b\u677e\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class ListNode: def __init__(self, x): self.val = x self.left = None self.right = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u6b63\u5e38\u7684\u4e8c\u53c9\u6811\uff0c\u53ea\u6709\u5de6\u5b50\u6811\uff08\u53f3\u5b50\u6811\uff09\u7684\u4e8c\u53c9\u6811\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811\uff0c\u53ea\u6709\u6839\u8282\u70b9\u7684\u4e8c\u53c9\u6811\u3002 # \u7279\u6b8a\u8f93\u5165\u5904\u7406\uff1a\u7a7a\u6811 PrintFromTopToBottom(None) # \u7279\u6b8a\u8f93\u5165\u5904\u7406\uff1a\u53ea\u6709\u6839\u8282\u70b9\u7684\u4e8c\u53c9\u6811 PrintFromTopToBottom(ListNode(1)) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u6b63\u5e38\u4e8c\u53c9\u6811 node_1 = ListNode(8) node_2 = ListNode(6) node_3 = ListNode(10) node_4 = ListNode(5) node_5 = ListNode(7) node_6 = ListNode(9) node_7 = ListNode(11) node_1.left, node_1.right = node_2, node_3 node_2.left, node_2.right = node_4, node_5 node_3.left, node_3.right = node_6, node_7 PrintFromTopToBottom(node_1) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u53ea\u6709\u5de6\u5b50\u6811\uff08\u53f3\u5b50\u6811\uff09\u7684\u4e8c\u53c9\u6811 node_1 = ListNode(1) node_2 = ListNode(2) node_3 = ListNode(3) node_4 = ListNode(4) node_5 = ListNode(5) node_1.left, node_2.left, node_3.left, node_4.left = node_2, node_3, node_4, node_5 PrintFromTopToBottom(node_1) \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5c42\u5e8f\u904d\u5386\u3002 def PrintFromTopToBottom(root): if not root: return [] node_list = [root] result = [] while len(node_list): node = node_list.pop(0) result.append(node.val) if node.left: node_list.append(node.left) if node.right: node_list.append(node.right) return result \u3010\u8bf4\u660e\u3011\uff1a\u5229\u7528\u6811\u7684\u5c42\u5e8f\u904d\u5386\u65b9\u5f0f\u5373\u53ef\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u3002\u4e0a\u8ff0\u4ee3\u7801\u8fd8\u53ef\u4ee5\u8fdb\u884c\u4f18\u5316\uff0c\u4f7f\u7528 deque \u6765\u66ff\u4ee3\u5217\u8868\u3002 node_list = deque() node_list.append(root) result = [] while len(node_list): node = node_list.popleft() result.append(node.val) if node.left: node_list.append(node.left) if node.right: node_list.append(node.right) \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1aO(n)\u3002 \u7a7a\u95f4\u6548\u7387\uff1aO(n)\uff0c\u5b9e\u9645\u4e0a\u7a7a\u95f4\u6548\u7387\u8981\u5c0f\u4e8e O(n)\uff0c\u7b49\u4e8e 2 \u7684\u6811\u6df1\u5ea6\u6b21\u65b9\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u7684\u601d\u7ef4\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u4e8c\u53c9\u6811\u53ca\u961f\u5217\u7684\u7406\u89e3\u3002","title":"\u9762\u8bd5\u9898 32\uff1a\u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811"},{"location":"\u89e3\u51b3\u9762\u8bd5\u9898\u7684\u601d\u8def/#32-2","text":"\u4ece\u4e0a\u5230\u4e0b\u6309\u5c42\u6253\u5370\u4e8c\u53c9\u6811\uff0c\u540c\u4e00\u5c42\u7684\u8282\u70b9\u6309\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u6bcf\u4e00\u5c42\u6253\u5370\u5230\u4e00\u884c\u3002 \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a\u540c\u9762\u8bd5\u9898 33\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a def PrintFromTopToBottom(root): if not root: return [] node_list = deque() node_list.append(root) count = 1 while count > 0: layer_nodes = [] next_count = 0 for i in range(count): node = node_list.popleft() layer_nodes.append(node.val) if node.left: node_list.append(node.left) next_count += 1 if node.right: node_list.append(node.right) next_count += 1 count = next_count print(str(layer_nodes)) \u3010\u8bf4\u660e\u3011\uff1a\u4e3a\u4e86\u628a\u4e8c\u53c9\u6811\u7684\u6bcf\u4e00\u884c\u5355\u72ec\u6253\u5370\u5230\u4e00\u884c\u91cc\uff0c\u9700\u8981\u501f\u52a9\u4e24\u4e2a\u53d8\u91cf\u3002 \u8282\u70b9\u6570\uff1a\u8868\u793a\u5728\u5f53\u524d\u5c42\u4e2d\u8fd8\u6ca1\u6709\u6253\u5370\u7684\u8282\u70b9\u6570\u3002 \u4e0b\u5c42\u8282\u70b9\u6570\uff1a\u8868\u793a\u4e0b\u4e00\u5c42\u8282\u70b9\u7684\u6570\u76ee\u3002 \u3010\u725b\u5ba2\u7f51\u4ee3\u7801\u3011\uff1a if not pRoot: return [] node_list = [] node_list.append(pRoot) count = 1 total_list = [] while count > 0: layer_nodes = [] next_count = 0 for i in range(count): node = node_list.pop(0) layer_nodes.append(node.val) if node.left: node_list.append(node.left) next_count += 1 if node.right: node_list.append(node.right) next_count += 1 count = next_count total_list.append(layer_nodes) return total_list","title":"\u9762\u8bd5\u9898 32-2\uff1a\u5206\u884c\u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811"},{"location":"\u89e3\u51b3\u9762\u8bd5\u9898\u7684\u601d\u8def/#32-3","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6309\u7167\u4e4b\u5b57\u5f62\u987a\u5e8f\u6253\u5370\u4e8c\u53c9\u6811\uff0c\u5373\u7b2c\u4e00\u884c\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u7b2c\u4e8c\u5c42\u6309\u7167\u4ece\u53f3\u5230\u5de6\u7684\u987a\u5e8f\u6253\u5370\uff0c\u5176\u4ed6\u884c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a\u540c\u9762\u8bd5\u9898 33\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u6570\u7ec4\u9006\u5e8f\u65b9\u6cd5\u3002 def PrintFromTopToBottom(root): if not root: return [] node_list = deque() node_list.append(root) count = 1 layer = 0 while count > 0: layer_nodes = [] next_count = 0 for i in range(count): node = node_list.popleft() layer_nodes.append(node.val) if node.left: node_list.append(node.left) next_count += 1 if node.right: node_list.append(node.right) next_count += 1 count = next_count layer += 1 if layer & 0x01 == 0: layer_nodes.sort(reverse=True) print(str(layer_nodes)) \u3010\u8bf4\u660e\u3011\uff1a\u5728\u9762\u8bd5\u9898 33-2 \u7684\u57fa\u7840\u4e0a\u65b0\u589e\u4e00\u4e2a\u53d8\u91cf layer \u7528\u4ee5\u5224\u65ad\u5f53\u524d\u5c42\u6570\u3002\u82e5\u4e3a\u5947\u6570\uff0c\u5219\u4ece\u5de6\u5230\u53f3\u6253\u5370\uff0c\u5373\u987a\u5e8f\u6253\u5370\u3002\u82e5\u4e3a\u5076\u6570\uff0c\u5219\u4ece\u53f3\u5230\u5de6\u6253\u5370\uff0c\u5373\u9006\u5e8f\u6253\u5370\u3002\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u81ea\u884c\u5b9e\u73b0\u6570\u7ec4\u7684\u9006\u5e8f\u8f93\u51fa\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5806\u6808\u5b9e\u73b0\u3002 if not root: return [] node_list = [root] next_list = [] count = 1 layer = 1 while count > 0: layer_nodes = [] next_count = 0 for i in range(count): node = node_list.pop() layer_nodes.append(node.val) if layer & 0x01 != 0: if node.left: next_list.append(node.left) next_count += 1 if node.right: next_list.append(node.right) next_count += 1 else: if node.right: next_list.append(node.right) next_count += 1 if node.left: next_list.append(node.left) next_count += 1 node_list = next_list.copy() count = next_count layer += 1 print(str(layer_nodes)) \u3010\u8bf4\u660e\u3011\uff1a\u9700\u8981\u4e24\u4e2a\u6808\uff0c\u5728\u6253\u5370\u67d0\u4e00\u5c42\u7684\u8282\u70b9\u65f6\uff0c\u628a\u4e0b\u4e00\u5c42\u7684\u5b50\u8282\u70b9\u4fdd\u5b58\u5230\u76f8\u5e94\u7684\u6808\u91cc\u3002\u5982\u679c\u5f53\u524d\u6253\u5370\u7684\u662f\u5947\u6570\u5c42\uff0c\u5219\u5148\u4fdd\u5b58\u5de6\u5b50\u8282\u70b9\u518d\u4fdd\u5b58\u53f3\u5b50\u8282\u70b9\uff1b\u5982\u679c\u5f53\u524d\u6253\u5370\u7684\u662f\u5076\u6570\u5c42\uff0c\u5219\u5148\u4fdd\u5b58\u53f3\u5b50\u8282\u70b9\u518d\u4fdd\u5b58\u5de6\u5b50\u8282\u70b9\u3002","title":"\u9762\u8bd5\u9898 32-3\uff1a\u4e4b\u5b57\u5f62\u6253\u5370\u4e8c\u53c9\u6811"},{"location":"\u89e3\u51b3\u9762\u8bd5\u9898\u7684\u601d\u8def/#33","text":"\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u4e0d\u662f\u67d0\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002\u5982\u679c\u662f\u5219\u8f93\u51fa Yes\uff0c\u5426\u5219\u8f93\u51fa No\u3002\u5047\u8bbe\u8f93\u5165\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c\u3002 \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u6b63\u786e\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u540e\u5e8f\u904d\u5386\u6570\u7ec4\uff0c\u9519\u8bef\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u540e\u5e8f\u904d\u5386\u6570\u7ec4\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6570\u7ec4\uff0c\u53ea\u6709\u4e00\u4e2a\u503c\u7684\u6570\u7ec4\u3002 # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6570\u7ec4 result1 = VerifySquenceOfBST([]) # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u53ea\u6709\u4e00\u4e2a\u503c\u7684\u6570\u7ec4 result2 = VerifySquenceOfBST([1]) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u6210\u529f result3 = VerifySquenceOfBST([5, 7, 6, 9, 11, 10, 8]) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u5931\u8d25 result4 = VerifySquenceOfBST([7, 4, 6, 5]) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u6210\u529f result5 = VerifySquenceOfBST([1, 4, 23, 37, 29, 41, 12, 84, 71, 100, 90, 60]) \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u9012\u5f52\u5b9e\u73b0\u3002 def VerifySquenceOfBST(sequence): if len(sequence) == 0: return False return loop(sequence) def loop(sequence): length = len(sequence) if length <= 1: return True root = sequence[-1] middle = 0 is_big = False for i in range(length): if sequence[i] >= root: is_big = True middle = i if sequence[i] < root and is_big: return False return loop(sequence[:middle]) & loop(sequence[middle:length - 1]) \u3010\u8bf4\u660e\u3011\uff1a \u9996\u5148\u5bf9\u8f93\u5165\u8fdb\u884c\u9a8c\u8bc1\uff0c\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\u6570\u7ec4\u3002\u82e5\u4e3a\u7a7a\u6570\u7ec4\uff0c\u5219\u76f4\u63a5\u8fd4\u56de False\u3002 \u5728\u540e\u5e8f\u904d\u5386\u5f97\u5230\u7684\u5e8f\u5217\u4e2d\uff0c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f\u6811\u7684\u6839\u7ed3\u70b9\u7684\u503c\u3002\u6570\u7ec4\u4e2d\u524d\u9762\u7684\u6570\u5b57\u53ef\u4ee5\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\u7b2c\u4e00\u90e8\u5206\u662f\u5de6\u5b50\u6811\u8282\u70b9\u7684\u503c\uff0c\u5b83\u4eec\u90fd\u6bd4\u6839\u7ed3\u70b9\u7684\u503c\u5c0f\uff1b\u7b2c\u4e8c\u90e8\u5206\u662f\u53f3\u5b50\u6811\u8282\u70b9\u7684\u503c\uff0c\u5b83\u4eec\u90fd\u6bd4\u6839\u7ed3\u70b9\u7684\u503c\u5927\u3002\u56e0\u6b64\uff0c\u82e5\u662f\u4e0d\u80fd\u5c06\u6570\u7ec4\u5212\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u6362\u8a00\u4e4b\uff0c\u524d\u534a\u90e8\u5206\u5b58\u5728\u6bd4\u6839\u7ed3\u70b9\u7684\u503c\u5927\u7684\u6570\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u540e\u5e8f\u904d\u5386\u6570\u7ec4\u6ca1\u6709\u5bf9\u5e94\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u6b64\u65f6\u53ef\u76f4\u63a5\u8fd4\u56de Fasle\u3002 \u4e0d\u65ad\u9012\u5f52\uff0c\u76f4\u5230\u62b5\u8fbe\u53f6\u8282\u70b9\u3002 \u5177\u4f53\u5185\u5bb9\u53ef\u9605\u8bfb\u300a\u5251\u6307offer\u300bP180\u3002 \u3010\u6539\u8fdb\u3011\uff1a def VerifySquenceOfBST(sequence): length = len(sequence) if length == 0: return False root = sequence[-1] middle = 0 for i in range(length - 1): if sequence[i] > root: break middle += 1 for i in range(middle + 1, length - 1): if sequence[i] < root: return False result_left, result_right = True, True if middle > 0: result_left = VerifySquenceOfBST(sequence[:middle]) if middle < length - 1: result_right = VerifySquenceOfBST(sequence[middle:length-1]) return result_left & result_right \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1aO(nlogn)\uff0cn \u7528\u4ee5\u68c0\u7d22\u6570\u7ec4\u662f\u5426\u5212\u5206\u4e3a\u4e24\u90e8\u5206\uff0clogn \u4e3a\u9012\u5f52\u5c42\u7ea7\u3002 \u7a7a\u95f4\u6548\u7387\uff1aO(logn)\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u590d\u6742\u95ee\u9898\u7684\u601d\u7ef4\u80fd\u529b\u3002\u80fd\u5426\u89e3\u51b3\u8fd9\u9053\u9898\u7684\u5173\u952e\u5728\u4e8e\u5e94\u8058\u8005\u662f\u5426\u80fd\u627e\u51fa\u540e\u5e8f\u904d\u5386\u7684\u89c4\u5f8b\u3002\u4e00\u65e6\u627e\u5230\u4e86\u89c4\u5f8b\uff0c\u7528\u9012\u5f52\u7684\u4ee3\u7801\u7f16\u7801\u76f8\u5bf9\u800c\u8a00\u5c31\u7b80\u5355\u4e86\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u4e8c\u53c9\u6811\u540e\u5e8f\u904d\u5386\u7684\u7406\u89e3\u3002","title":"\u9762\u8bd5\u9898 33\uff1a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217"},{"location":"\u89e3\u51b3\u9762\u8bd5\u9898\u7684\u601d\u8def/#34","text":"\u8f93\u5165\u4e00\u9897\u4e8c\u53c9\u6811\u7684\u8ddf\u8282\u70b9\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u4e2d\u7ed3\u70b9\u503c\u7684\u548c\u4e3a\u8f93\u5165\u6574\u6570\u7684\u6240\u6709\u8def\u5f84\u3002\u8def\u5f84\u5b9a\u4e49\u4e3a\u4ece\u6811\u7684\u6839\u7ed3\u70b9\u5f00\u59cb\u5f80\u4e0b\u4e00\u76f4\u5230\u53f6\u7ed3\u70b9\u6240\u7ecf\u8fc7\u7684\u7ed3\u70b9\u5f62\u6210\u4e00\u6761\u8def\u5f84\u3002(\u6ce8\u610f: \u5728\u8fd4\u56de\u503c\u7684list\u4e2d\uff0c\u6570\u7ec4\u957f\u5ea6\u5927\u7684\u6570\u7ec4\u9760\u524d) \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class ListNode: def __init__(self, x): self.val = x self.left = None self.right = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u4e8c\u53c9\u6811\u4e2d\u6709\u4e00\u6761\u3001\u591a\u6761\u7b26\u5408\u8981\u6c42\u7684\u8def\u5f84\uff0c\u4e8c\u53c9\u6811\u4e2d\u6ca1\u6709\u7b26\u5408\u8981\u6c42\u7684\u8def\u5f84\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811\uff0c\u503c\u4e3a\u8d1f\u6570\u6216 0\u3002 # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1aexpectNumber \u5c0f\u4e8e\u7b49\u4e8e 0 result1 = FindPath(ListNode(1), 0) result2 = FindPath(ListNode(1), -1) # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811 result3 = FindPath(None, 10) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u7b26\u5408\u8981\u6c42 node_1 = ListNode(10) node_2 = ListNode(5) node_3 = ListNode(12) node_4 = ListNode(4) node_5 = ListNode(7) node_1.left, node_1.right = node_2, node_3 node_2.left, node_2.right = node_4, node_5 result4 = FindPath(node_1, 22) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u4e0d\u7b26\u5408\u8981\u6c42 result5 = FindPath(node_1, 20) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u4e0d\u7b26\u5408\u8981\u6c42 result6 = FindPath(node_1, 15) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u7b26\u5408\u8981\u6c42 result7 = FindPath(node_1, 19) \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5148\u5e8f\u904d\u5386\u3002 def FindPath(root, expectNumber): if expectNumber <= 0 or root is None: return [] path = [] pre_traver(root, expectNumber, 0, [], path) return path def pre_traver(node, number, value, path, total_path): path_new = [] path_new.extend(path) path_new.append(node.val) value += node.val if not node.left and not node.right and value == number: total_path.append(path_new) else: if node.left: pre_traver(node.left, number, value, path_new, total_path) if node.right: pre_traver(node.right, number, value, path_new, total_path) \u3010\u8bf4\u660e\u3011\uff1a \u6bcf\u4e00\u6b65\u904d\u5386\u65f6\uff0c\u5c06\u5f53\u524d\u8282\u70b9\u6dfb\u52a0\u5230\u8def\u5f84\u4e2d\uff0c\u540c\u65f6\u8ba1\u7b97\u5f53\u524d\u8def\u5f84\u7d2f\u52a0\u7684\u503c\uff08\u9700\u8981\u6ce8\u610f Python \u8bed\u8a00\u7684\u7279\u6027\uff09\u3002 path_new = [] path_new.extend(path) path_new.append(node.val) value += node.val \u5224\u65ad\u5f53\u524d\u8282\u70b9\u662f\u5426\u4e3a\u53f6\u8282\u70b9\u3002\u82e5\u4e3a\u53f6\u8282\u70b9\u4e14\u7d2f\u52a0\u7684\u503c\u7b26\u5408\u8981\u6c42\uff0c\u5219\u5c06\u5f53\u524d\u8def\u5f84\u6dfb\u52a0\u5230\u603b\u8def\u5f84\u4e2d\u3002 if not node.left and not node.right and value == number: total_path.append(path_new) \u5426\u5219\uff0c\u7ee7\u7eed\u904d\u5386\u3002 if node.left: pre_traver(node.left, number, value, path_new, total_path) if node.right: pre_traver(node.right, number, value, path_new, total_path) \u3010\u5176\u4ed6\u3011\uff1a\u5982\u679c\u4ec5\u4ec5\u662f\u6253\u5370\u800c\u975e\u83b7\u53d6\u6240\u6709\u8def\u5f84\u5219\u4f1a\u76f8\u5bf9\u7b80\u5355\u4e00\u4e9b\u3002 def FindPath(root, expectNumber): if expectNumber <= 0 or root is None: return [] path = [] pre_traver(root, expectNumber, 0, []) return path def pre_traver(node, number, value, path): path.append(node.val) value += node.val if not node.left and not node.right and value == number: print(str(path)) else: if node.left: pre_traver(node.left, number, value, path) if node.right: pre_traver(node.right, number, value, path) path.pop() \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u590d\u6742\u95ee\u9898\u7684\u601d\u7ef4\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u7684\u7406\u89e3\u3002","title":"\u9762\u8bd5\u9898 34\uff1a\u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84"},{"location":"\u89e3\u51b3\u9762\u8bd5\u9898\u7684\u601d\u8def/#_3","text":"\u5728\u9762\u8bd5\u4e2d\uff0c\u5f53\u6211\u4eec\u9047\u5230\u590d\u6742\u7684\u5927\u95ee\u9898\u7684\u65f6\u5019\uff0c\u5982\u679c\u80fd\u591f\u5148\u628a\u5927\u95ee\u9898\u5206\u89e3\u6210\u82e5\u5e72\u4e2a\u7b80\u5355\u7684\u5c0f\u95ee\u9898\uff0c\u7136\u540e\u518d\u9010\u4e2a\u89e3\u51b3\u8fd9\u4e9b\u5c0f\u95ee\u9898\uff0c\u5219\u53ef\u80fd\u4e5f\u4f1a\u5bb9\u6613\u5f88\u591a\u3002 \u6211\u4eec\u53ef\u4ee5\u6309\u7167\u89e3\u51b3\u95ee\u9898\u7684\u6b65\u9aa4\u6765\u5206\u89e3\u590d\u6742\u95ee\u9898\uff0c\u6bcf\u4e00\u6b65\u89e3\u51b3\u4e00\u4e2a\u5c0f\u95ee\u9898\u3002\u6bd4\u5982\u5728\u9762\u8bd5\u9898 35\u201c\u590d\u6742\u94fe\u8868\u7684\u590d\u5236\u201d\u4e2d\uff0c\u5c06\u590d\u6742\u94fe\u8868\u590d\u5236\u7684\u8fc7\u7a0b\u5206\u89e3\u6210 3 \u4e2a\u6b65\u9aa4\u3002\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\u4e3a\u6bcf\u4e00\u6b65\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd9\u6837\u6bcf\u4e2a\u51fd\u6570\u5b8c\u6210\u4e00\u4e2a\u529f\u80fd\uff0c\u6574\u4e2a\u8fc7\u7a0b\u7684\u903b\u8f91\u4e5f\u5c31\u975e\u5e38\u6e05\u6670\u660e\u4e86\u4e86\u3002 \u5728\u8ba1\u7b97\u673a\u9886\u57df\u6709\u4e00\u7c7b\u7b97\u6cd5\u53eb\u5206\u6cbb\u6cd5\uff0c\u5373\u201c\u5206\u800c\u6cbb\u4e4b\u201d\uff0c\u91c7\u7528\u7684\u5c31\u662f\u5404\u4e2a\u51fb\u7834\u7684\u601d\u60f3\u3002\u6211\u4eec\u628a\u5206\u89e3\u4e4b\u540e\u7684\u5c0f\u95ee\u9898\u5404\u4e2a\u89e3\u51b3\uff0c\u7136\u540e\u628a\u5c0f\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u7ed3\u5408\u8d77\u6765\u89e3\u51b3\u5927\u95ee\u9898\u3002","title":"\u5206\u89e3\u8ba9\u590d\u6742\u95ee\u9898\u7b80\u5355\u5316"},{"location":"\u89e3\u51b3\u9762\u8bd5\u9898\u7684\u601d\u8def/#35","text":"\u8f93\u5165\u4e00\u4e2a\u590d\u6742\u94fe\u8868\uff08\u6bcf\u4e2a\u8282\u70b9\u4e2d\u6709\u8282\u70b9\u503c\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u53e6\u4e00\u4e2a\u7279\u6b8a\u6307\u9488\u6307\u5411\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff09\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\u590d\u5236\u540e\u590d\u6742\u94fe\u8868\u7684head\u3002\uff08\u6ce8\u610f\uff0c\u8f93\u51fa\u7ed3\u679c\u4e2d\u8bf7\u4e0d\u8981\u8fd4\u56de\u53c2\u6570\u4e2d\u7684\u8282\u70b9\u5f15\u7528\uff0c\u5426\u5219\u5224\u9898\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u8fd4\u56de\u7a7a\uff09\u3002 \u3010\u96be\u70b9\u3011\uff1a\u5982\u4f55\u5904\u7406 random \u6307\u5411\u7684\u8282\u70b9\u590d\u5236\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class RandomListNode: def __init__(self, x): self.label = x self.next = None self.random = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u94fe\u8868\uff1b \u529f\u80fd\u6d4b\u8bd5\uff1a\u5355\u8282\u70b9\u94fe\u8868\uff0c\u8282\u70b9\u7684 random \u6307\u5411\u8282\u70b9\u81ea\u8eab\uff0c\u4e24\u4e2a\u8282\u70b9 random \u5f62\u6210\u73af\u72b6\u7ed3\u6784\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u54c8\u5e0c\u8868 def Clone(pHead): if not pHead: return None node = pHead node_list = [] node_clone_list = [] node_hash = {} # \u521b\u5efa\u590d\u5236\u94fe\u8868\u8282\u70b9\uff0c\u5e76\u6784\u9020\u54c8\u5e0c\u8868 while node: node_list.append(node) node_clone = RandomListNode(node.label) node_clone_list.append(node_clone) node_hash[node] = node_clone node = node.next # \u94fe\u63a5\u590d\u5236\u94fe\u8868\u8282\u70b9\u7684\u540c\u65f6\uff0c\u94fe\u63a5 random for i in range(len(node_clone_list) - 1): node = node_list[i] if node.random: node_clone_list[i].random = node_hash[node.random] node_clone_list[i].next = node_clone_list[i + 1] return node_clone_list[0] \u3010\u8bf4\u660e\u3011\uff1a \u7b2c\u4e00\u6b65\u521b\u5efa\u590d\u5236\u94fe\u8868\u8282\u70b9\uff0c\u5e76\u6784\u9020\u54c8\u5e0c\u8868\uff1b \u94fe\u63a5\u590d\u5236\u94fe\u8868\u8282\u70b9\u7684\u540c\u65f6\uff0c\u94fe\u63a5\u8282\u70b9\u7684 random\u3002 \u8fd9\u79cd\u65b9\u6cd5\u76f8\u5f53\u4e8e\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1aO(n)\uff0c\u521b\u5efa\u590d\u5236\u94fe\u8868\u8282\u70b9 O(n)\uff0c\u94fe\u63a5\u8fc7\u7a0b O(n)\u3002 \u7a7a\u95f4\u6548\u7387\uff1aO(n)\uff0c\u54c8\u5e0c\u8868\u7684\u957f\u5ea6\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5de7\u5999\u7684\u65b9\u6cd5 def Clone(pHead): if not pHead: return None node = pHead while node: node_clone = RandomListNode(node.label) node_clone.next, node.next = node.next, node_clone node = node_clone.next node = pHead while node: if node.random: node_random = node.random node.next.random = node_random.next node = node.next.next node, count, clone_head = pHead, 0, pHead.next while node.next: temp = node.next node.next = node.next.next node = temp return clone_head \u3010\u8bf4\u660e\u3011\uff1a \u7b2c\u4e00\u6b65\uff0c\u6839\u636e\u539f\u59cb\u94fe\u8868\u7684\u6bcf\u4e2a\u8282\u70b9 N \u521b\u5efa\u5bf9\u5e94\u7684 N'\uff0c\u5e76\u628a N' \u94fe\u63a5\u5728 N \u7684\u540e\u9762\uff1b \u7b2c\u4e8c\u6b65\uff0c\u8bbe\u7f6e\u590d\u5236\u8282\u70b9\u7684 random\u3002\u5047\u8bbe\u539f\u59cb\u94fe\u8868\u4e0a\u7684 N \u7684 random \u6307\u5411\u8282\u70b9 S\uff0c\u90a3\u4e48\u5176\u5bf9\u5e94\u590d\u5236\u51fa\u6765\u7684 N' \u662f N \u7684 next \u6307\u5411\u7684\u8282\u70b9\uff0c\u540c\u6837 S' \u662f S \u7684 next \u6307\u5411\u7684\u8282\u70b9\u3002\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7 node.next.random = node.random.next \u6765\u5b9e\u73b0\u94fe\u63a5\u3002 \u7b2c\u4e09\u6b65\uff0c\u628a\u8fd9\u4e2a\u957f\u94fe\u62c6\u5206\u6210\u4e24\u4e2a\u94fe\u8868\uff0c\u628a\u5947\u6570\u4f4d\u7f6e\u7684\u8282\u70b9\u7528 next \u94fe\u63a5\u8d77\u6765\u5c31\u662f\u539f\u59cb\u94fe\u8868\uff0c\u628a\u5076\u6570\u4f4d\u7f6e\u7684\u8282\u70b9\u7528 next \u94fe\u63a5\u8d77\u6765\u5c31\u662f\u590d\u5236\u51fa\u6765\u7684\u94fe\u8868\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1a\u4e09\u6b65\u90fd\u4e3a O(n)\uff0c\u6240\u4ee5\u603b\u65f6\u957f\u4e3a O(n)\uff1b \u7a7a\u95f4\u6548\u7387\uff1aO(1)\uff0c\u6ca1\u6709\u4f7f\u7528\u989d\u5916\u7684\u5185\u5b58\u7a7a\u95f4\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u590d\u6742\u95ee\u9898\u7684\u601d\u7ef4\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u65f6\u95f4\u6548\u7387\u548c\u7a7a\u95f4\u6548\u7387\u7684\u80fd\u529b\u3002","title":"\u9762\u8bd5\u9898 35\uff1a\u590d\u6742\u94fe\u8868\u7684\u590d\u5236"},{"location":"\u89e3\u51b3\u9762\u8bd5\u9898\u7684\u601d\u8def/#36","text":"\u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5c06\u8be5\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u6210\u4e00\u4e2a\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868\u3002\u8981\u6c42\u4e0d\u80fd\u521b\u5efa\u4efb\u4f55\u65b0\u7684\u7ed3\u70b9\uff0c\u53ea\u80fd\u8c03\u6574\u6811\u4e2d\u7ed3\u70b9\u6307\u9488\u7684\u6307\u5411\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811\u3001\u53ea\u6709\u6839\u8282\u70b9\u7684\u6811\uff1b \u529f\u80fd\u6d4b\u8bd5\uff1a\u5b8c\u5168\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u53ea\u6709\u5de6\u5b50\u6811\uff08\u53f3\u5b50\u6811\uff09\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002 # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811 result1 = Convert(None) # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u53ea\u6709\u6839\u8282\u70b9\u7684\u6811 result2 = Convert(TreeNode(1)) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u5b8c\u5168\u4e8c\u53c9\u641c\u7d22\u6811 node1 = TreeNode(5) node2 = TreeNode(3) node3 = TreeNode(7) node4 = TreeNode(2) node5 = TreeNode(4) node6 = TreeNode(6) node7 = TreeNode(8) node1.left, node1.right = node2, node3 node2.left, node2.right = node4, node5 node3.left, node3.right = node6, node7 result3 = Convert(node1) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u53ea\u6709\u5de6\u5b50\u6811\u7684\u4e8c\u53c9\u641c\u7d22\u6811 node1 = TreeNode(5) node2 = TreeNode(4) node3 = TreeNode(3) node4 = TreeNode(2) node5 = TreeNode(1) node1.left, node2.left = node2, node3 node3.left, node4.left = node4, node5 result4 = Convert(node1) \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a def Convert(pRootOfTree): if not pRootOfTree: return None path = [] in_order_traver(pRootOfTree, path) for i in range(len(path)): if i - 1 < 0: path[i].left = None else: path[i].left = path[i - 1] if i + 1 > len(path) - 1: path[i].right = None else: path[i].right = path[i + 1] return path[0] def in_order_traver(node, path): if node.left: in_order_traver(node.left, path) path.append(node) if node.right: in_order_traver(node.right, path) \u3010\u8bf4\u660e\u3011\uff1a\u56e0\u4e3a\u9700\u8981\u6392\u5e8f\u540e\u7684\u53cc\u5411\u94fe\u8868\uff0c\u56e0\u6b64\u5148\u901a\u8fc7\u4e2d\u5e8f\u904d\u5386\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4ee5\u83b7\u5f97\u6392\u5e8f\u7684\u904d\u5386\u5e8f\u5217\u5e76\u5b58\u653e\u5230 path \u5217\u8868\u4e2d\u3002\u7136\u540e\u8c03\u6574 path \u5217\u8868\u4e2d\u6bcf\u4e00\u9879\u7684\u6307\u9488\uff0c\u4f7f\u5f53\u524d\u4f4d\u7f6e\u7684\u8282\u70b9 left \u6307\u5411\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u8282\u70b9\uff0cright \u6307\u5411\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u4f4d\u7f6e\u3002\u9700\u8981\u6ce8\u610f\u8fb9\u754c\u70b9\u7684 left \u548c right \u5904\u7406\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1a\u904d\u5386\u4e8c\u53c9\u641c\u7d22\u6811\u9700\u8981 O(n)\uff0c\u5904\u7406 path \u5217\u8868\u4e5f\u9700\u8981 O(n) \u65f6\u95f4\uff0c\u603b\u65f6\u95f4\u4e3a O(n)\uff1b \u7a7a\u95f4\u6548\u7387\uff1aO(n)\uff0c\u521b\u5efa path \u5217\u8868\u6240\u9700\u7684\u5185\u5b58\u7a7a\u95f4\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5728\u9012\u5f52\u7684\u8fc7\u7a0b\u4e2d\u5b8c\u6210\u6307\u9488\u8c03\u6574 def Convert(pRootOfTree): if not pRootOfTree: return None in_order_traver(pRootOfTree, [None]) root = pRootOfTree while root.left: root = root.left return root def in_order_traver(node, last_node): if node.left: in_order_traver(node.left, last_node) if last_node[0]: last_node[0].right = node node.left = last_node[0] last_node[0] = node if node.right: in_order_traver(node.right, last_node) \u3010\u8bf4\u660e\u3011\uff1a\u5173\u952e\u5728\u4e8e\u6bcf\u6b21\u9012\u5f52\u7684\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u4e0a\u4e00\u4e2a\u8282\u70b9\u3002\u5177\u4f53\u5185\u5bb9\u53ef\u53c2\u8003\u300a\u5251\u6307offer\u300bP192-P194\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u590d\u6742\u95ee\u9898\u7684\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u4e8c\u53c9\u6811\u548c\u53cc\u5411\u94fe\u8868\u7684\u7406\u89e3\u53ca\u7f16\u7a0b\u80fd\u529b\u3002","title":"\u9762\u8bd5\u9898 36\uff1a\u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868"},{"location":"\u89e3\u51b3\u9762\u8bd5\u9898\u7684\u601d\u8def/#37","text":"\u8bf7\u5b9e\u73b0\u4e24\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u7528\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811\uff0c\u53ea\u6709\u6839\u8282\u70b9\u7684\u6811\uff1b \u529f\u80fd\u6d4b\u8bd5\uff1a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u53ea\u6709\u5de6\u5b50\u6811/\u53f3\u5b50\u6811\u7684\u4e8c\u53c9\u6811\uff0c\u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u76f8\u540c\u7684\u4e8c\u53c9\u6811\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a class Solution: def __init__(self): self.root = None def Serialize(self, root): path = [] self.pre_order(root, path) return \",\".join(path) def Deserialize(self, s): node_list = s.split(',') root = self.pre_order_create(node_list) self.root = root def pre_order(self, node, path): if node: path.append(str(node.val)) self.pre_order(node.left, path) self.pre_order(node.right, path) else: path.append('#') def pre_order_create(self, node_list): node_val = node_list.pop(0) if node_val == '#': return None node = TreeNode(int(node_val)) node.left = self.pre_order_create(node_list) node.right = self.pre_order_create(node_list) return node \u3010\u8bf4\u660e\u3011\uff1a\u5b9e\u9645\u4e0a\u5c31\u662f\u5148\u5e8f\u904d\u5386\u4ee5\u53ca\u6839\u636e\u5148\u5e8f\u904d\u5386\u521b\u5efa\u4e8c\u53c9\u6811\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u590d\u6742\u95ee\u9898\u7684\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u4e8c\u53c9\u6811\u904d\u5386\u7684\u7406\u89e3\u53ca\u7f16\u7a0b\u80fd\u529b\u3002","title":"\u9762\u8bd5\u9898 37\uff1a\u5e8f\u5217\u5316\u4e8c\u53c9\u6811"},{"location":"\u89e3\u51b3\u9762\u8bd5\u9898\u7684\u601d\u8def/#38","text":"\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32,\u6309\u5b57\u5178\u5e8f\u6253\u5370\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u6240\u6709\u6392\u5217\u3002\u4f8b\u5982\u8f93\u5165\u5b57\u7b26\u4e32abc,\u5219\u6253\u5370\u51fa\u7531\u5b57\u7b26a,b,c\u6240\u80fd\u6392\u5217\u51fa\u6765\u7684\u6240\u6709\u5b57\u7b26\u4e32abc,acb,bac,bca,cab\u548ccba\u3002 \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5355\u4e2a\u5b57\u7b26\u4e32\uff1b \u529f\u80fd\u6d4b\u8bd5\uff1a\u7b26\u5408\u8981\u6c42\u7684\u5b57\u7b26\u4e32\uff0c\u5b58\u5728\u91cd\u590d\u7684\u5b57\u7b26\u4e32\u3002 # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u5b57\u7b26\u4e32 result1 = Permutation('') # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u5355\u4e2a\u5b57\u7b26\u4e32 result2 = Permutation('a') # \u529f\u80fd\u6d4b\u8bd5\uff1a\u7b26\u5408\u8981\u6c42 result3 = Permutation('abc') # \u529f\u80fd\u6d4b\u8bd5\uff1a\u91cd\u590d\u5b57\u7b26\u4e32 result4 = Permutation('abbc') \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a def Permutation(ss): if len(ss) == 0: return [] ss_list = list(ss) total_str = [] loop(ss_list, '', total_str) return sorted(list(set(total_str))) def loop(str_list, string, total_str): if len(str_list) == 0: total_str.append(string) for i in range(len(str_list)): loop(str_list[0:i] + str_list[i + 1:], string + str_list[i], total_str) \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u7684\u601d\u7ef4\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u9012\u5f52\u7684\u7406\u89e3\u548c\u7f16\u7a0b\u80fd\u529b\u3002","title":"\u9762\u8bd5\u9898 38\uff1a\u5b57\u7b26\u4e32\u7684\u6392\u5217"},{"location":"\u89e3\u51b3\u9762\u8bd5\u9898\u7684\u601d\u8def/#_4","text":"\u5728\u9762\u8bd5\u65f6\uff0c\u6211\u4eec\u96be\u514d\u4f1a\u9047\u5230\u96be\u9898\uff0c\u753b\u56fe\u3001\u4e3e\u4f8b\u548c\u5206\u89e3\u8fd9\u4e09\u79cd\u65b9\u6cd5\u80fd\u591f\u5e2e\u52a9\u6211\u4eec\u89e3\u51b3\u590d\u6742\u7684\u95ee\u9898\u3002 \u56fe\u5f62\u80fd\u4f7f\u62bd\u8c61\u7684\u95ee\u9898\u5f62\u8c61\u5316\u3002\u5f53\u9762\u8bd5\u9898\u6d89\u53ca\u94fe\u8868\u3001\u4e8c\u53c9\u6811\u7b49\u6570\u636e\u7ed3\u6784\u65f6\uff0c\u5982\u679c\u5728\u7eb8\u4e0a\u753b\u51e0\u5f20\u8349\u56fe\uff0c\u5219\u9898\u76ee\u4e2d\u9690\u85cf\u7684\u89c4\u5f8b\u5c31\u6709\u53ef\u80fd\u53d8\u5f97\u5f88\u76f4\u89c2\u3002 \u4e00\u4e24\u4e2a\u4f8b\u5b50\u80fd\u4f7f\u62bd\u8c61\u7684\u95ee\u9898\u5177\u4f53\u5316\u3002\u5f88\u591a\u4e0e\u7b97\u6cd5\u76f8\u5173\u7684\u95ee\u9898\u90fd\u5f88\u62bd\u8c61\uff0c\u672a\u5fc5\u4e00\u773c\u5c31\u80fd\u770b\u51fa\u5b83\u4eec\u7684\u89c4\u5f8b\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u4e0d\u59a8\u4e3e\u51e0\u4e2a\u4f8b\u5b50\uff0c\u4e00\u6b65\u4e00\u6b65\u6a21\u62df\u8fd0\u884c\u7684\u8fc7\u7a0b\uff0c\u8bf4\u4e0d\u5b9a\u80fd\u53d1\u73b0\u5176\u4e2d\u7684\u89c4\u5f8b\uff0c\u4ece\u800c\u627e\u5230\u89e3\u51b3\u95ee\u9898\u7684\u7a8d\u95e8\u3002 \u628a\u590d\u6742\u95ee\u9898\u5206\u89e3\u6210\u82e5\u5e72\u4e2a\u5c0f\u95ee\u9898\uff0c\u662f\u89e3\u51b3\u5f88\u591a\u590d\u6742\u95ee\u9898\u7684\u6709\u6548\u65b9\u6cd5\u3002\u5982\u679c\u6211\u4eec\u9047\u5230\u7684\u95ee\u9898\u5f88\u5927\uff0c\u5219\u53ef\u4ee5\u5c1d\u8bd5\u5148\u628a\u5927\u95ee\u9898\u5206\u89e3\u6210\u5c0f\u95ee\u9898\uff0c\u7136\u540e\u518d\u9012\u5f52\u5730\u89e3\u51b3\u8fd9\u4e9b\u5c0f\u95ee\u9898\u3002\u5206\u6cbb\u6cd5\u3001\u52a8\u6001\u89c4\u5212\u7b49\u65b9\u6cd5\u5e94\u7528\u7684\u90fd\u662f\u5206\u89e3\u590d\u6742\u95ee\u9898\u7684\u601d\u8def\u3002","title":"\u672c\u7ae0\u5c0f\u7ed3"},{"location":"\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801/","text":"\u4ee3\u7801\u7684\u89c4\u8303\u6027 \u9762\u8bd5\u5b98\u662f\u6839\u636e\u5e94\u8058\u8005\u5199\u51fa\u7684\u4ee3\u7801\u6765\u51b3\u5b9a\u662f\u5426\u5f55\u7528\u4ed6\u7684\u3002\u5982\u679c\u5e94\u8058\u8005\u4ee3\u7801\u5199\u5f97\u4e0d\u591f\u89c4\u8303\uff0c\u5f71\u54cd\u9762\u8bd5\u5b98\u9605\u8bfb\u4ee3\u7801\u7684\u5174\u81f4\uff0c\u90a3\u4e48\u9762\u8bd5\u5b98\u5c31\u4f1a\u9ed8\u9ed8\u5730\u51cf\u53bb\u51e0\u5206\u3002 \u3010\u5f71\u54cd\u56e0\u7d20\u3011\uff1a \u6e05\u6670\u7684\u4e66\u5199 \u6e05\u6670\u7684\u5e03\u5c40 \u5408\u7406\u7684\u547d\u540d \u3010\u6e05\u6670\u7684\u4e66\u5199\u3011\uff1a\u7edd\u5927\u90e8\u5206\u9762\u8bd5\u90fd\u662f\u8981\u6c42\u5e94\u8058\u8005\u5728\u767d\u7eb8\u6216\u8005\u767d\u677f\u4e0a\u4e66\u5199\u3002\u5728\u9762\u8bd5\u8fc7\u7a0b\u4e2d\u51cf\u6162\u5199\u5b57\u7684\u901f\u5ea6\uff0c\u5c3d\u91cf\u628a\u6bcf\u4e2a\u5b57\u6bcd\u5199\u6e05\u695a\u8fd8\u662f\u5f88\u6709\u5fc5\u8981\u7684\u3002\u4e0d\u7528\u62c5\u5fc3\u6ca1\u6709\u65f6\u95f4\u53bb\u5199\u4ee3\u7801\uff0c\u901a\u5e38\u7f16\u7a0b\u9762\u8bd5\u7684\u4ee3\u7801\u91cf\u90fd\u4e0d\u4f1a\u8d85\u8fc7 \u884c\uff0c\u4e66\u5199\u4e0d\u7528\u82b1\u591a\u5c11\u65f6\u95f4\uff0c \u5173\u952e\u662f\u5728\u5199\u4ee3\u7801\u4e4b\u524d\u5f62\u6210\u6e05\u6670\u7684\u601d\u8def\u5e76\u80fd\u628a\u601d\u8def\u7528\u7f16\u7a0b\u8bed\u8a00\u6e05\u695a\u5730\u4e66\u5199\u51fa\u6765 \u3002 \u3010\u6e05\u6670\u7684\u5e03\u5c40\u3011\uff1a\u4e66\u5199\u4ee3\u7801\u65f6\u9700\u8981\u6ce8\u610f\u5faa\u73af\u4ee5\u53ca\u5224\u65ad\uff0c\u903b\u8f91\u8f83\u590d\u6742\u65f6\uff0c\u7f29\u8fdb\u7684\u5c42\u6b21\u53ef\u80fd\u4f1a\u6bd4\u8f83\u591a\u3002\u5982\u679c\u5e03\u5c40\u4e0d\u591f\u6e05\u6670\uff0c\u7f29\u8fdb\u4e5f\u4e0d\u80fd\u4f53\u73b0\u4ee3\u7801\u7684\u903b\u8f91\uff0c\u90a3\u4e48\u9762\u8bd5\u5b98\u9762\u5bf9\u8fd9\u6837\u7684\u4ee3\u7801\u5c06\u4f1a\u5934\u660f\u8111\u6da8\u3002 \u3010\u5408\u7406\u7684\u547d\u540d\u3011\uff1a \u5f3a\u70c8\u5efa\u8bae\u5e94\u8058\u8005\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u7528\u5b8c\u6574\u7684\u82f1\u6587\u5355\u8bcd\u7ec4\u5408\u547d\u540d\u53d8\u91cf\u548c\u51fd\u6570 \u3002\u5982\u679c\u4e00\u773c\u80fd\u770b\u51fa\u53d8\u91cf\u3001\u51fd\u6570\u7684\u7528\u9014\uff0c\u5e94\u8058\u8005\u5c31\u80fd\u907f\u514d\u81ea\u5df1\u641e\u6df7\u6dc6\u800c\u72af\u4e00\u4e9b\u4f4e\u7ea7\u7684\u9519\u8bef\u3002\u540c\u65f6\u5408\u7406\u7684\u547d\u540d\u4e5f\u80fd\u8ba9\u9762\u8bd5\u5b98\u4e00\u773c\u5c31\u80fd\u8bfb\u61c2\u4ee3\u7801\u7684\u610f\u56fe\u3002 \u4ee3\u7801\u7684\u5b8c\u6574\u6027 \u5728\u9762\u8bd5\u8fc7\u7a0b\u4e2d\uff0c\u9762\u8bd5\u5b98\u4f1a\u975e\u5e38\u5173\u6ce8\u5e94\u8058\u8005\u8003\u8651\u95ee\u9898\u662f\u5426\u5468\u5168\u3002\u9762\u8bd5\u5b98\u901a\u8fc7\u68c0\u67e5\u4ee3\u7801\u662f\u5426\u5b8c\u6574\u6765\u8003\u67e5\u5e94\u8058\u8005\u7684\u601d\u7ef4\u662f\u5426\u5168\u9762\u3002\u901a\u5e38\u4f1a\u68c0\u67e5\uff1a \u5e94\u8058\u8005\u7684\u4ee3\u7801\u662f\u5426\u5b8c\u6210\u4e86\u57fa\u672c\u529f\u80fd\uff1b \u8f93\u5165\u8fb9\u754c\u503c\u662f\u5426\u80fd\u5f97\u5230\u6b63\u786e\u7684\u8f93\u51fa\uff1b \u662f\u5426\u5bf9\u5404\u79cd\u4e0d\u5408\u89c4\u8303\u7684\u975e\u6cd5\u8f93\u5165\u505a\u51fa\u4e86\u5408\u7406\u7684\u9519\u8bef\u5904\u7406\u3002 \u4ece 3 \u4e2a\u65b9\u9762\u786e\u4fdd\u4ee3\u7801\u7684\u5b8c\u6574\u6027 \u5e94\u8058\u8005\u5728\u5199\u4ee3\u7801\u4e4b\u524d\uff0c\u9996\u5148\u8981\u628a\u53ef\u80fd\u7684\u8f93\u5165\u90fd\u60f3\u6e05\u695a\uff0c\u4ece\u800c\u907f\u514d\u5728\u7a0b\u5e8f\u4e2d\u51fa\u73b0\u5404\u79cd\u5404\u6837\u7684\u8d28\u91cf\u6f0f\u6d1e\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u7f16\u7801\u4e4b\u524d\u8981\u8003\u8651\u5355\u5143\u6d4b\u8bd5\u3002\u5982\u679c\u80fd\u591f\u8bbe\u8ba1\u5168\u9762\u7684\u5355\u5143\u6d4b\u8bd5\u7528\u4f8b\u5e76\u5728\u4ee3\u7801\u4e2d\u4f53\u73b0\u51fa\u6765\uff0c\u90a3\u4e48\u5199\u51fa\u7684\u4ee3\u7801\u81ea\u7136\u4e5f\u5c31\u662f\u5b8c\u6574\u6b63\u786e\u7684\u4e86\u3002 \u3010\u65b9\u9762\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5 \u8fb9\u754c\u6d4b\u8bd5 \u8d1f\u9762\u6d4b\u8bd5 \u3010\u529f\u80fd\u6d4b\u8bd5\u3011\uff1a\u9996\u5148\u8981\u4fdd\u8bc1\u5199\u51fa\u7684\u4ee3\u7801\u80fd\u591f\u5b8c\u6210\u9762\u8bd5\u5b98\u8981\u6c42\u7684\u57fa\u672c\u529f\u80fd\u3002\u5728\u8003\u8651\u529f\u80fd\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c\u8981\u5c3d\u91cf\u7a81\u7834\u5e38\u89c4\u601d\u7ef4\u7684\u9650\u5236\uff0c\u4ece\u9898\u76ee\u4e2d\u6316\u6398\u51fa\u66f4\u591a\u7684\u6f5c\u5728\u4fe1\u606f\u548c\u8981\u6c42\u3002 \u3010\u8fb9\u754c\u6d4b\u8bd5\u3011\uff1a\u5f88\u591a\u65f6\u5019\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\u90fd\u4f1a\u6709\u5faa\u73af\u6216\u8005\u9012\u5f52\u3002\u5982\u679c\u6211\u4eec\u7684\u4ee3\u7801\u57fa\u4e8e\u5faa\u73af\uff0c\u90a3\u4e48\u7ed3\u675f\u5faa\u73af\u7684\u8fb9\u754c\u6761\u4ef6\u662f\u5426\u6b63\u786e\uff1f\u5982\u679c\u57fa\u4e8e\u9012\u5f52\uff0c\u90a3\u4e48\u9012\u5f52\u7ec8\u6b62\u7684\u8fb9\u754c\u503c\u662f\u5426\u6b63\u786e\uff1f\u8fd9\u4e9b\u90fd\u662f\u8fb9\u754c\u6d4b\u8bd5\u65f6\u8981\u8003\u8651\u7684\u7528\u4f8b\u3002 \u3010\u8d1f\u9762\u6d4b\u8bd5\u3011\uff1a\u5f53\u8f93\u5165\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u65f6\u5019\u9700\u8981\u4f5c\u51fa\u5408\u7406\u7684\u9519\u8bef\u5904\u7406\u3002 \u6b64\u5916\uff0c\u5728\u8f6f\u4ef6\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u6c38\u8fdc\u4e0d\u53d8\u7684\u662f\u9700\u6c42\u4f1a\u4e00\u76f4\u6539\u53d8\u3002\u5982\u679c\u6211\u4eec\u5728\u9762\u8bd5\u7684\u65f6\u5019\u5199\u51fa\u7684\u4ee3\u7801\u80fd\u591f\u628a\u5c06\u6765\u9700\u6c42\u53ef\u80fd\u7684\u53d8\u5316\u90fd\u8003\u8651\u8fdb\u53bb\uff0c\u5728\u9700\u6c42\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\u80fd\u591f\u5c3d\u91cf\u51cf\u5c11\u4ee3\u7801\u6539\u52a8\u7684\u98ce\u9669\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5411\u9762\u8bd5\u5b98\u5c55\u793a\u4e86\u81ea\u5df1\u5bf9\u7a0b\u5e8f\u53ef\u6269\u5c55\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u7684\u7406\u89e3\u3002 \u9762\u8bd5\u9898 16\uff1a\u6570\u503c\u7684\u6574\u6570\u6b21\u65b9 \u7ed9\u5b9a\u4e00\u4e2a double \u7c7b\u578b\u7684\u6d6e\u70b9\u6570 base \u548c int \u7c7b\u578b\u7684\u6574\u6570 exponent\u3002\u6c42 base \u7684 exponent \u6b21\u65b9\u3002 \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1abase \u548c exponent \u5206\u522b\u53d6\u6b63\u6570\u30010 \u548c\u8d1f\u6570\u3002 \u7279\u6b8a\u8f93\u5165\u5904\u7406\uff1a\u975e\u6574\u6570\u6b21\u65b9\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1apython ** \u5b9e\u73b0\u3002 def Power(base, exponent): if not isinstance(exponent, int): return None if base == 0: # 0 \u7684 0 \u6b21\u5e42\u6ca1\u6709\u610f\u4e49 if exponent == 0: return None return 0 return base ** exponent if __name__ == '__main__': base = 2.0 base2 = 0.0 base3 = -3.0 test_exponent1 = 5 test_exponent2 = 0 test_exponent3 = -3 test_exponent4 = 2.3 print(Power(base, test_exponent1)) print(Power(base2, test_exponent1)) print(Power(base3, test_exponent1)) print(Power(base, test_exponent2)) print(Power(base, test_exponent3)) print(Power(base3, test_exponent3)) print(Power(base, test_exponent4)) \u3010\u8bf4\u660e\u3011\uff1aPython \u7684 ** \u64cd\u4f5c\u7b26\u53ef\u4ee5\u5b9e\u73b0\u4e58\u65b9\uff0c\u5e76\u4e14\u652f\u6301\u6d6e\u70b9\u6570\u5e42\uff0c\u4f8b\u5982 5 ** 2.3 == 40.51641491731905 \u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u5f53 base = 0 \u4e14 exponent \u4e3a\u8d1f\u6570\u65f6\uff0c\u5047\u8bbe exponent \u4e3a -2\u3002 \u800c 0 \u7684\u4efb\u4f55\u6b21\u5e42\uff08\u9664 0\uff0c0 \u7684 0 \u6b21\u5e42\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\uff09\u90fd\u4e3a 0\uff0c\u5206\u6bcd\u4e3a 0 \u4f5c\u9664\u6cd5\u4f1a\u62a5\u9519\uff0c\u56e0\u6b64\u9700\u8981\u8fdb\u884c\u7279\u6b8a\u8f93\u5165\u5904\u7406\uff0c\u5728\u4ee3\u7801\u7684\u524d\u90e8\u52a0\u4e0a\uff1a if base == 0: return 0 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u4e2d\u89c4\u4e2d\u77e9\u7684\u505a\u6cd5\u3002 def Power(base, exponent): if not isinstance(exponent, int): return None if base == 0: # \u65e0\u610f\u4e49 if exponent == 0: return None return 0 result = 1 if exponent > 0: for i in range(exponent): result *= base else: for i in range(-exponent): result /= base return result \u3010\u8bf4\u660e\u3011\uff1a\u5176\u5b9e\u53ea\u662f\u5728\u524d\u4e00\u4e2a\u793a\u4f8b\u7684\u57fa\u7840\u4e0a\u5b9e\u73b0\u4e86 Python \u7684 ** \u64cd\u4f5c\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5229\u7528\u4e58\u65b9\u516c\u5f0f\u6765\u51cf\u5c11\u6c42\u6574\u6570\u6b21\u65b9\u7684\u6b21\u6570\u3002 def Power(base, exponent): # \u7279\u6b8a\u5904\u7406 if not isinstance(exponent, int): return None if base == 0: # \u65e0\u610f\u4e49 if exponent == 0: return None return 0 # \u5224\u65ad exponent \u7684\u6b63\u8d1f is_neg = True if exponent < 0 else False # \u5982\u679c\u662f\u8d1f\u6570\u5219\u53d6\u53cd if is_neg: exponent = -exponent if exponent & 0x1 == 0: result = loop_half_exponent(base, exponent) else: result = loop_half_exponent(base, exponent - 1) * base if is_neg: result = 1 / result return result def loop_half_exponent(base, exponent): if exponent == 0: return 1 if exponent == 1: return base result = base * base return loop_half_exponent(result, exponent >> 1) \u3010\u8bf4\u660e\u3011\uff1a\u5047\u8bbe\u8981\u8f93\u51fa\u7684 exponent \u4e3a 32\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u5b83\u7684 16 \u6b21\u65b9\uff0c\u90a3\u4e48\u53ea\u8981\u5728 16 \u6b21\u65b9\u7684\u57fa\u7840\u4e0a\u518d\u5e73\u65b9\u4e00\u6b21\u5c31\u53ef\u4ee5\u4e86\u3002\u800c 16 \u6b21\u65b9\u662f 8 \u6b21\u65b9\u7684\u5e73\u65b9\u3002\u8fd9\u6837\u4ee5\u6b64\u7c7b\u63a8\uff0c\u6211\u4eec\u6c42 32 \u6b21\u65b9\u53ea\u9700\u8981\u505a 5 \u6b21\u4e58\u6cd5\uff1a\u5148\u6c42\u5e73\u65b9\uff0c\u5728\u5e73\u65b9\u7684\u57fa\u7840\u4e0a\u6c42 4 \u6b21\u65b9\uff0c\u5728 4 \u6b21\u65b9\u7684\u57fa\u7840\u4e0a\u6c42 8 \u6b21\u65b9\uff0c\u5728 8 \u6b21\u65b9\u7684\u57fa\u7840\u4e0a\u6c42 16 \u6b21\u65b9\uff0c\u6700\u540e\u5728 16 \u6b21\u65b9\u7684\u57fa\u7840\u4e0a\u6c42 32 \u6b21\u65b9\u3002 \u3010\u7ec6\u8282\u3011\uff1a\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u6bd4\u4e58\u9664\u6cd5\u53ca\u6c42\u4f59\u8fd0\u7b97\u7684\u6548\u7387\u8981\u9ad8\u5f88\u591a\u3002 \u53f3\u79fb\u8fd0\u7b97\u7b26\u4ee3\u66ff\u4e86\u9664\u4ee5 2\u3002 \u4f4d\u4e0e\u8fd0\u7b97\u7b26\u4ee3\u66ff\u4e86\u6c42\u4f59\u8fd0\u7b97\u7b26\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u601d\u7ef4\u7684\u5168\u9762\u6027\uff0c\u4e0d\u8981\u5ffd\u89c6\u5e95\u6570\u4e3a 0 \u800c\u6307\u6570\u4e3a\u8d1f\u6570\u65f6\u7684\u9519\u8bef\u5904\u7406\u3002 \u5bf9\u6548\u7387\u8981\u6c42\u9ad8\u7684\u9762\u8bd5\u5b98\u8fd8\u4f1a\u8003\u67e5\u5e94\u8058\u8005\u5feb\u901f\u505a\u4e58\u65b9\u7684\u80fd\u529b\u3002 \u9762\u8bd5\u9898 17\uff1a\u6253\u5370\u4ece 1 \u5230\u6700\u5927\u7684 n \u4f4d\u6570 \u8f93\u5165\u6570\u5b57 n\uff0c\u6309\u987a\u5e8f\u6253\u5370\u51fa\u4ece 1 \u5230\u6700\u5927\u7684 n \u4f4d\u5341\u8fdb\u5236\u6570\u3002\u6bd4\u5982\u8f93\u5165 3\uff0c\u5219\u6253\u5370\u51fa 1\u30012\u30013 \u4e00\u76f4\u5230\u6700\u5927\u7684 3 \u4f4d\u6570 999\u3002 \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1an \u4e3a\u6b63\u6574\u6570 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1an = 0\u3001n < 0\u3001n \u975e\u6574\u6570 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a def Print1ToMaxOfNDigits(n): if not isinstance(n, int) or n < 1: print('error!') return None max_num = 10 ** n for i in range(1, max_num): print(i) if __name__ == '__main__': Print1ToMaxOfNDigits(3) Print1ToMaxOfNDigits(0) Print1ToMaxOfNDigits(2.4) Print1ToMaxOfNDigits(-5) \u3010\u8bf4\u660e\u3011\uff1a\u8fd9\u9053\u9898\u76ee\u770b\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u4f46\u8fd9\u5f80\u5f80\u5bb9\u6613\u8df3\u8fdb\u9762\u8bd5\u5b98\u7684\u9677\u9631\u3002\u7531\u4e8e\u9898\u76ee\u4e2d\u6ca1\u6709\u89c4\u5b9a n \u7684\u8303\u56f4\uff0c\u5f53\u8f93\u5165\u7684 n \u5f88\u5927\u65f6\uff0c\u6c42\u6700\u5927\u7684 n \u4f4d\u6570\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6574\u578b\u6ea2\u51fa\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u5927\u6570\u95ee\u9898\u3002\u8fd9\u662f\u9762\u8bd5\u5b98\u5728\u8fd9\u9053\u9898\u91cc\u8bbe\u7f6e\u7684\u4e00\u4e2a\u5927\u9677\u9631\u3002 \u3010\u65b9\u6848\u3011\uff1a\u6700\u5e38\u7528\u4e5f\u662f\u6700\u5bb9\u6613\u7684\u65b9\u6cd5\u662f\u7528\u5b57\u7b26\u4e32\u6216\u8005\u6570\u7ec4\u6765\u8868\u8fbe\u5927\u6570\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u7528\u5217\u8868\u8868\u8fbe\u5927\u6570\u3002 def Print1ToMaxOfNDigits(n): # \u7279\u6b8a\u8f93\u5165\u5904\u7406 if not isinstance(n, int) or n < 1: print('error!') return None # \u521b\u5efa\u957f\u5ea6\u4e3a n \u7684\u5217\u8868 number_list = [0] * n while number_add(number_list): print_number(number_list) def number_add(number_list): bit = -1 n = len(number_list) while True: if abs(bit) > n: return False number_bit = number_list[bit] number_bit += 1 # print('number_bit:', number_bit) if number_bit == 10: number_list[bit] = 0 bit -= 1 else: number_list[bit] = number_bit break return True def print_number(number_list): number_str = \"\" pos_start = 0 for i in range(len(number_list)): if number_list[i] != 0: pos_start = i break for i in range(pos_start, len(number_list)): number_str += str(number_list[i]) print(number_str) if __name__ == '__main__': Print1ToMaxOfNDigits(3) \u3010\u8bf4\u660e\u3011\uff1a \u5148\u6839\u636e n \u521b\u5efa\u957f\u5ea6\u4e3a n \u7684\u5217\u8868\uff0c\u5217\u8868\u7684\u6bcf\u4e00\u4e2a\u4e0b\u6807\u4ee3\u8868\u6570\u5b57\u7684\u6bcf\u4e00\u4f4d\uff0c\u4f8b\u5982 [1, 2, 3]\uff0c\u4e0b\u6807 0 \u4ee3\u8868\u767e\u4f4d\uff0c\u4e0b\u6807 1 \u4ee3\u8868\u5341\u4f4d\u3002 \u5b9e\u73b0\u5217\u8868\u6a21\u62df\u6570\u5b57\u52a0\u6cd5\uff1a\u5bf9\u5217\u8868\u7684\u6700\u540e\u4e00\u4f4d\uff08\u56e0\u4e3a\u5217\u8868\u7684\u6700\u540e\u4e00\u4f4d\u4ee3\u8868\u4e2a\u4f4d\uff09\u6267\u884c\u52a0\u4e00\u64cd\u4f5c\uff0c\u5982\u679c\u6ee1\u8db3\u8fdb\u4f4d\u5219\u5bf9\u5217\u8868\u7684\u5012\u6570\u7b2c\u4e8c\u4f4d\u6267\u884c\u76f8\u540c\u7684\u64cd\u4f5c\uff0c\u76f4\u5230\u8d85\u8fc7 n \u7684\u957f\u5ea6\uff0c\u6b64\u65f6\u8fd4\u56de False\uff0c\u5426\u5219\u7acb\u5373\u8df3\u51fa\u5faa\u73af\uff0c\u5e76\u8fd4\u56de True\u3002 \u5b9e\u73b0\u5217\u8868\u62fc\u6210\u6570\u5b57\u6253\u5370\uff1a\u4ece\u5217\u8868\u5934\u90e8\u5f00\u59cb\u5411\u53f3\u904d\u5386\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u96f6\u7684\u4e0b\u6807\u3002\u7136\u540e\u5c06\u8be5\u4e0b\u6807\u540e\u7684\u5404\u9879\u6dfb\u52a0\u5230\u5b57\u7b26\u4e32\u53d8\u91cf\u4e2d\uff0c\u6700\u540e\u6253\u5370\u8be5\u53d8\u91cf\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u6570\u5b57\u6392\u5217\uff0c\u9012\u5f52\u5b9e\u73b0\u3002 def Print1ToMaxOfNDigits(n): if not isinstance(n, int) or n < 1: print('error!') return None loop_print('', n) def loop_print(num, n): if n < 1: # \u53bb\u9664\u9996\u4f4d\u7684\u96f6 i = 0 for i in range(len(num)): if num[i] != '0': break if num[i:] != '0': print(num[i:]) return \"\" for i in range(10): loop_print(num + str(i), n - 1) \u3010\u8bf4\u660e\u3011\uff1a n \u4f4d\u5341\u8fdb\u5236\u6570\u5176\u5b9e\u5c31\u662f n \u4e2a\u4ece 0 \u5230 9 \u7684\u5168\u6392\u5217\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u628a\u6570\u5b57\u7684\u6bcf\u4e00\u4f4d\u90fd\u4ece 0 \u5230 9 \u6392\u5217\u4e00\u904d\uff0c\u5c31\u5f97\u5230\u4e86\u6240\u6709\u7684\u5341\u8fdb\u5236\u6570\u3002\u53ea\u662f\u5728\u6253\u5370\u7684\u65f6\u5019\uff0c\u6392\u5728\u524d\u9762\u7684 0 \u4e0d\u6253\u5370\u51fa\u6765\u7f62\u4e86\u3002 \u5168\u6392\u5217\u7528\u9012\u5f52\u5f88\u5bb9\u6613\u8868\u8fbe\uff0c\u6570\u5b57\u7684\u6bcf\u4e00\u4f4d\u90fd\u53ef\u80fd\u662f 0~9 \u4e2d\u7684\u4e00\u4e2a\u6570\uff0c\u7136\u540e\u8bbe\u7f6e\u4e0b\u4e00\u4f4d\u3002\u9012\u5f52\u7ed3\u675f\u7684\u6761\u4ef6\u662f\u6211\u4eec\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u6570\u5b57\u7684\u6700\u540e\u4e00\u4f4d\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u89e3\u51b3\u5927\u6570\u95ee\u9898\u7684\u80fd\u529b\u3002\u9762\u8bd5\u5b98\u51fa\u8fd9\u9053\u9898\u76ee\u7684\u65f6\u5019\uff0c\u5979\u671f\u671b\u5e94\u8058\u8005\u80fd\u610f\u8bc6\u5230\u8fd9\u662f\u4e00\u4e2a\u5927\u6570\u95ee\u9898\uff0c\u540c\u4e8b\u8fd8\u671f\u5f85\u5e94\u8058\u8005\u80fd\u5b9a\u4e49\u5408\u9002\u7684\u6570\u636e\u8868\u793a\u65b9\u5f0f\u6765\u89e3\u51b3\u5927\u6570\u95ee\u9898\u3002 \u9762\u8bd5\u5b98\u8fd8\u5c06\u5173\u6ce8\u5e94\u8058\u8005\u6253\u5370\u6570\u5b57\u65f6\u4f1a\u4e0d\u4f1a\u6253\u5370\u51fa\u4f4d\u4e8e\u6570\u5b57\u524d\u9762\u7684 0\u3002\u8fd9\u91cc\u80fd\u4f53\u73b0\u51fa\u5e94\u8058\u8005\u5728\u8bbe\u8ba1\u5f00\u53d1\u8f6f\u4ef6\u65f6\u662f\u4e0d\u662f\u4f1a\u8003\u8651\u7528\u6237\u7684\u4f7f\u7528\u4e60\u60ef\u3002\u901a\u5e38\u6211\u4eec\u7684\u8f6f\u4ef6\u8bbe\u8ba1\u548c\u5f00\u53d1\u9700\u8981\u7b26\u5408\u5927\u90e8\u5206\u7528\u6237\u7684\u4eba\u673a\u4ea4\u4e92\u4e60\u60ef\u3002 \u9762\u8bd5\u9898 18\uff1a\u5220\u9664\u94fe\u8868\u7684\u8282\u70b9 \u5728 O(1) \u65f6\u95f4\u5185\u5220\u9664\u94fe\u8868\u8282\u70b9\u3002\u7ed9\u5b9a\u5355\u5411\u94fe\u8868\u7684\u5934\u6307\u9488\u548c\u4e00\u4e2a\u8282\u70b9\u6307\u9488\uff0c\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5728 O(1) \u65f6\u95f4\u5185\u5220\u9664\u8be5\u8282\u70b9\u3002 \u3010\u94fe\u8868\u7ed3\u6784\u3011\uff1a class Node: def __init__(self, value): self.value = value self.next = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u5220\u9664\u5934\u8282\u70b9\u3001\u5220\u9664\u4e2d\u95f4\u67d0\u8282\u70b9\u3001\u5220\u9664\u5c3e\u8282\u70b9\u3001\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u94fe\u8868\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a def DeleteNode(head, node_to_be_deleted): if not head or not node_to_be_deleted: return None node_next = None if node_to_be_deleted.next: node_next = node_to_be_deleted.next node_to_be_deleted.value = node_next.value node_to_be_deleted.next = node_next.next else: if head == node_to_be_deleted: return None node = head while node: if node.next == node_to_be_deleted: node.next = None break node = node.next del node_next return head def test_1(): node_a = Node('a') node_b = Node('b') node_c = Node('c') node_a.next = node_b node_b.next = node_c return DeleteNode(node_a, node_b) def test_2(): node_a = Node('a') node_b = Node('b') node_c = Node('c') node_a.next = node_b node_b.next = node_c return DeleteNode(node_a, node_a) def test_3(): node_a = Node('a') node_b = Node('b') node_c = Node('c') node_a.next = node_b node_b.next = node_c return DeleteNode(node_a, node_c) def test_4(): node_a = Node('a') return DeleteNode(node_a, node_a) if __name__ == '__main__': result_1 = test_1() result_2 = test_2() result_3 = test_3() result_4 = test_4() result_5 = DeleteNode(None, None) \u3010\u8bf4\u660e\u3011\uff1a \u5728\u5355\u5411\u94fe\u8868\u4e2d\u5220\u9664\u4e00\u4e2a\u8282\u70b9\uff0c\u5e38\u89c4\u7684\u505a\u6cd5\u65e0\u7591\u662f\u4ece\u94fe\u8868\u7684\u5934\u8282\u70b9\u5f00\u59cb\uff0c\u987a\u5e8f\u904d\u5386\u67e5\u627e\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u5e76\u5728\u94fe\u8868\u4e2d\u5220\u9664\u8be5\u8282\u70b9\u3002\u7531\u4e8e\u9700\u8981\u987a\u5e8f\u67e5\u627e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u81ea\u7136\u662f O(n)\u3002\u4e4b\u6240\u4ee5\u9700\u8981\u4ece\u5934\u5f00\u59cb\u67e5\u627e\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u5f97\u5230\u5c06\u88ab\u5220\u9664\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u3002\u5728\u5355\u5411\u94fe\u8868\u4e2d\uff0c\u8282\u70b9\u6ca1\u6709\u6307\u5411\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\uff0c\u6240\u4ee5\u53ea\u597d\u4ece\u94fe\u8868\u7684\u5934\u8282\u70b9\u5f00\u59cb\u987a\u5e8f\u67e5\u627e\u3002 \u5176\u5b9e\u4e0d\u4e00\u5b9a\u9700\u8981\u5f97\u5230\u88ab\u5220\u9664\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u3002\u6211\u4eec\u53ea\u8981\u628a\u8981\u5220\u9664\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u5185\u5bb9\u8986\u76d6\u8981\u5220\u9664\u8282\u70b9\u7684\u5185\u5bb9\uff0c\u518d\u628a\u4e0b\u4e00\u4e2a\u8282\u70b9\u5220\u9664\uff0c\u5c31\u76f8\u5f53\u4e8e\u628a\u5f53\u524d\u9700\u8981\u5220\u9664\u7684\u8282\u70b9\u7ed9\u5220\u9664\u4e86\u3002 \u3010\u6ce8\u610f\u3011\uff1a \u82e5\u5220\u9664\u8282\u70b9\u4e3a\u94fe\u8868\u7684\u5c3e\u8282\u70b9\uff0c\u5373\u6ca1\u6709\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u5219\u5fc5\u987b\u4ece\u5934\u8282\u70b9\u5f00\u59cb\u5faa\u73af\u904d\u5386\u5230\u8be5\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u5b8c\u6210\u5220\u9664\u64cd\u4f5c\u3002 \u82e5\u94fe\u8868\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\uff0c\u5219\u5220\u9664\u8be5\u8282\u70b9\uff0c\u5e76\u5c06\u5934\u8282\u70b9\u8bbe\u7f6e\u4e3a None\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1a\u5bf9\u4e8e n - 1 \u4e2a\u975e\u5c3e\u8282\u70b9\u800c\u8a00\uff0c\u53ef\u4ee5\u5728 O(1) \u65f6\u95f4\u5185\u5b8c\u6210\u5220\u9664\u64cd\u4f5c\u3002\u5bf9\u4e8e\u5c3e\u8282\u70b9\u800c\u8a00\uff0c\u7531\u4e8e\u4ecd\u7136\u9700\u8981\u987a\u5e8f\u67e5\u627e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\u3002\u56e0\u6b64\uff0c\u603b\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u662f [(n - 1) x O(1) + O(n)] / n\uff0c\u7ed3\u679c\u8fd8\u662f O(1)\u3002 \u3010\u5176\u4ed6\u3011\uff1a\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e0a\u8ff0\u4ee3\u7801\u4ecd\u7136\u4e0d\u591f\u5b8c\u5584\uff0c\u56e0\u4e3a\u5b83\u57fa\u4e8e\u4e00\u4e2a\u5047\u8bbe\uff1a\u8981\u5220\u9664\u7684\u8282\u70b9\u7684\u786e\u5728\u94fe\u8868\u4e2d\u3002\u6211\u4eec\u9700\u8981 O(n) \u7684\u65f6\u95f4\u624d\u80fd\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u5305\u542b\u67d0\u4e00\u8282\u70b9\u3002\u53d7\u5230 O(1) \u65f6\u95f4\u7684\u9650\u5236\uff0c\u6211\u4eec\u4e0d\u5f97\u4e0d\u786e\u4fdd\u8282\u70b9\u5728\u94fe\u8868\u4e2d\u7684\u8d23\u4efb\u63a8\u7ed9\u4e86\u51fd\u6570 DeleteNode \u7684\u8c03\u7528\u8005\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u94fe\u8868\u7684\u7f16\u7a0b\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u7684\u521b\u65b0\u601d\u7ef4\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u601d\u7ef4\u7684\u5168\u9762\u6027\u3002 \u9762\u8bd5\u9898 18-2\uff1a\u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u8282\u70b9 \u5728\u4e00\u4e2a\u6392\u5e8f\u7684\u94fe\u8868\u4e2d\uff0c\u5b58\u5728\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u8bf7\u5220\u9664\u8be5\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u91cd\u590d\u7684\u7ed3\u70b9\u4e0d\u4fdd\u7559\uff0c\u8fd4\u56de\u94fe\u8868\u5934\u6307\u9488\u3002 \u4f8b\u5982\uff0c\u94fe\u8868 1->2->3->3->4->4->5 \u5904\u7406\u540e\u4e3a 1->2->5\u3002 \u3010\u94fe\u8868\u7ed3\u6784\u3011\uff1a class ListNode: def __init__(self, x): self.val = x self.next = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u5b58\u6709\u91cd\u590d\u8282\u70b9\uff08\u5934\u90e8\u3001\u4e2d\u95f4\u3001\u5c3e\u90e8\uff09\u7684\u94fe\u8868\uff0c\u65e0\u91cd\u590d\u8282\u70b9\u7684\u94fe\u8868\uff0c\u5355\u4e2a\u8282\u70b9\u7684\u94fe\u8868\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u94fe\u8868\u3001\u5168\u4e3a\u91cd\u590d\u8282\u70b9\u7684\u94fe\u8868\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5e38\u89c4\u5b9e\u73b0\u3002 def deleteDuplication(pHead): if not pHead: return None node_visited = {} node = pHead while node: if node.val in node_visited: node_visited[node.val] += 1 else: node_visited[node.val] = 1 node = node.next print('node_visited:', node_visited) head_node = ListNode(0) head_node.next = pHead node = pHead prev_node = head_node while node: if node_visited[node.val] > 1: prev_node.next = node.next node = node.next else: prev_node, node = node, node.next return head_node.next if __name__ == '__main__': l1 = get_linklist([1, 2, 3, 3, 4, 4, 5]) result1 = deleteDuplication(l1.root) l2 = get_linklist([1, 1, 2, 2, 3, 4, 5]) result2 = deleteDuplication(l2.root) l3 = get_linklist([1, 2, 3, 4, 4, 5, 5]) result3 = deleteDuplication(l3.root) l4 = get_linklist([1, 2, 3, 4, 5]) result4 = deleteDuplication(l4.root) l5 = get_linklist([]) result5 = deleteDuplication(l5.root) l6 = get_linklist([1]) result6 = deleteDuplication(l6.root) l7 = get_linklist([1, 1, 2, 2]) result7 = deleteDuplication(l7.root) \u3010\u8bf4\u660e\u3011\uff1a\u9996\u5148\u904d\u5386\u94fe\u8868\uff0c\u83b7\u53d6\u6bcf\u4e2a\u8282\u70b9\u7684\u6b21\u6570\u3002\u518d\u904d\u5386\u94fe\u8868\u7684\u8fc7\u7a0b\u4e2d\u5c06\u91cd\u590d\u7684\u8282\u70b9\u4f9d\u6b21\u5220\u9664\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1aO(2n) \u7a7a\u95f4\u6548\u7387\uff1a\u9700\u8981\u501f\u52a9\u989d\u5916\u7684 node_visited \u5b57\u5178\u6765\u5b58\u50a8\u91cd\u590d\u8282\u70b9\u7684\u60c5\u51b5\uff0c\u6700\u574f\u7684\u60c5\u51b5\u662f\u6ca1\u6709\u91cd\u590d\u8282\u70b9\uff0c\u56e0\u6b64\u9700\u8981 n \u957f\u5ea6\u7684\u5b57\u5178\uff0c\u7a7a\u95f4\u6548\u7387\u4e3a O(n)\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5bf9\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u5b9e\u73b0\u7684\u6539\u8fdb\u3002 if not pHead: return None node_visited = {} node = pHead while node: if node.val in node_visited: node_visited[node.val] += 1 else: node_visited[node.val] = 1 node = node.next print('node_visited:', node_visited) node_prev = None node = pHead while node: if node_visited[node.val] > 1: node_next = node.next # \u627e\u5230\u4e0d\u91cd\u590d\u7684\u8282\u70b9 while node_next: if node_visited[node_next.val] == 1: break node_next = node_next.next # \u5230\u8fbe\u5c3e\u8282\u70b9 if not node_next: if not node_prev: return None else: node_prev.next = None else: node.val, node.next = node_next.val, node_next.next node_prev, node = node, node.next return pHead \u3010\u8bf4\u660e\u3011\uff1a\u524d\u9762\u6b65\u9aa4\u76f8\u540c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5220\u9664\u91cd\u590d\u8282\u70b9\u7684\u8fc7\u7a0b\u3002\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u53d1\u73b0\u5f53\u524d\u8282\u70b9\u4e3a\u91cd\u590d\u8282\u70b9\uff0c\u5219\u5bfb\u627e\u4e0b\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u8282\u70b9\uff0c\u5c06\u8be5\u8282\u70b9\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u82e5\u5f53\u524d\u8282\u70b9\u540e\u9762\u7684\u8282\u70b9\u5168\u4e3a\u91cd\u590d\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5c06\u5f53\u524d\u8282\u70b9\u53ca\u540e\u9762\u7684\u8282\u70b9\u5168\u90e8\u5220\u9664\uff0c\u56e0\u6b64\u9700\u8981\u501f\u52a9 node_prev\uff0c\u901a\u8fc7 node_prev.next = None\uff0c\u6765\u5220\u9664\u540e\u7eed\u7684\u8282\u70b9\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u501f\u52a9\u9898\u76ee\u6761\u4ef6\u2014\u2014\u6392\u5e8f\u3002 \u9762\u8bd5\u9898 19\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5339\u914d\u5305\u62ec '.' \u548c ' ' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u6a21\u5f0f\u4e2d\u7684\u5b57\u7b26 '.' \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c ' ' \u8868\u793a\u5b83\u524d\u9762\u7684\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b0\u4efb\u610f\u6b21\uff08\u5305\u542b0\u6b21\uff09\u3002 \u5728\u672c\u9898\u4e2d\uff0c\u5339\u914d\u662f\u6307\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u5339\u914d\u6574\u4e2a\u6a21\u5f0f\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32 \"aaa\" \u4e0e\u6a21\u5f0f \"a.a\" \u548c \"ab ac a\" \u5339\u914d\uff0c\u4f46\u662f\u4e0e \"aa.a\" \u548c \"ab*a\" \u5747\u4e0d\u5339\u914d\u3002 \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u8f93\u5165\u5b57\u7b26\u4e32\u548c\u6a21\u5f0f\u5b57\u7b26\u4e32\u4e3a None\uff0c\u6216\u7a7a\u5b57\u7b26\u4e32\u3002 \u529f\u80fd\u6d4b\u8bd5\uff1a\u6a21\u5f0f\u5b57\u7b26\u4e32\u5305\u542b\u666e\u901a\u5b57\u7b26\u3001'.'\u3001'*'\uff1b\u6a21\u5f0f\u5b57\u7b26\u4e32\u548c\u8f93\u5165\u5b57\u7b26\u4e32\u5339\u914d/\u4e0d\u5339\u914d\u3002 test_s1 = 'aaa' test_p1 = 'a.a' print(match(test_s1, test_p1)) test_s2 = '' test_p2 = 'a.a' print(match(test_s2, test_p2)) test_p3 = 'a*a' print(match(test_s1, test_p3)) test_p4 = 'ab*ac*a' print(match(test_s1, test_p4)) test_p5 = 'aa.a' print(match(test_s1, test_p5)) test_s3 = '' test_p6 = 'c*' print(match(test_s3, test_p6)) test_p7 = '.*' print(match(test_s3, test_p7)) print(match('a', test_p7)) \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a def match(s, pattern): # write code here if (len(s) == 0 and len(pattern) == 0): return True if (len(s) > 0 and len(pattern) == 0): return False if (len(pattern) > 1 and pattern[1] == '*'): if (len(s) > 0 and (s[0] == pattern[0] or pattern[0] == '.')): return (self.match(s, pattern[2:]) or self.match(s[1:], pattern[2:]) or self.match(s[1:], pattern)) else: return self.match(s, pattern[2:]) if (len(s) > 0 and (pattern[0] == '.' or pattern[0] == s[0])): return self.match(s[1:], pattern[1:]) return False \u3010\u8bf4\u660e\u3011\uff1a\u5177\u4f53\u5185\u5bb9\u53ef\u53c2\u8003\u300a\u5251\u6307offer\u300bP124~P125 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u5b57\u7b26\u4e32\u7684\u7f16\u7a0b\u80fd\u529b\uff1b \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u7406\u89e3\uff1b \u8003\u67e5\u5e94\u8058\u8005\u601d\u7ef4\u7684\u5168\u9762\u6027\u3002 \u9762\u8bd5\u9898 20\uff1a\u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u8868\u793a\u6570\u503c\uff08\u5305\u62ec\u6574\u6570\u548c\u5c0f\u6570\uff09\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32 \"+100\", \"5e2\", \"-123\", \"3.1416\" \u548c \"-1E-16\" \u90fd\u8868\u793a\u6570\u503c\u3002 \u4f46\u662f \"12e\", \"1a3.14\", \"1.2.3\", \"+-5\" \u548c \"12e+4.3\" \u90fd\u4e0d\u662f\u3002 \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a+100\u30015e2\u3001-123\u30013.1416\u3001-1E-16\u30013.14e-2\u300112e\u30011a3.14\u30011.2.3\u3001+-5\u300112e+4.3\u3001e+4.3\u300112e+4\u3001-012e+4\u3001010 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u975e\u5b57\u7b26\u4e32\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a def isNumeric(s): char_number = ('1', '2', '3', '4', '5', '6', '7', '8', '9', '0') char_index = 0 has_e, has_dot, is_first = False, False, True for char in s: if char in char_number: if is_first and char == '0' and s[char_index + 1] != '.': return False is_first = False char_index += 1 elif char == '.': # e \u540e\u63a5\u6574\u6570 if has_e: return False # \u51fa\u73b0\u4e24\u4e2a\u5c0f\u6570\u70b9\uff0c\u5219\u6709\u9519 if has_dot: return False has_dot = True char_index += 1 elif char == '+' or char == '-': if char_index == 0 or s[char_index - 1] == 'e' or s[char_index - 1] == 'E': char_index += 1 else: return False elif char == 'e' or char == 'E': # \u51fa\u73b0\u4e24\u6b21 e\uff0c\u5219\u8868\u660e\u6709\u9519 if has_e: return False # e \u7684\u524d\u65b9\u5fc5\u987b\u8981\u6709\u6570\u503c if char_index - 1 > 0 and s[char_index - 1] not in char_number: return False # \u5426\u5219\u8868\u660e\u5f53\u524d\u5b58\u5728 e has_e = True char_index += 1 # \u82e5\u4ee5\u4e0a\u60c5\u51b5\u90fd\u4e0d\u5b58\u5728\uff0c\u5219\u8868\u660e\u6709\u5176\u4ed6\u5b57\u7b26\uff0c\u8fd4\u56de False else: return False if s[-1] == '+' or s[-1] == '-' or s[-1] == 'e' or s[-1] == 'E': return False return True if __name__ == '__main__': test_s1 = '+100' print(isNumeric(test_s1)) test_s2 = '5e2' print(isNumeric(test_s2)) test_s3 = '-123' print(isNumeric(test_s3)) test_s4 = '3.1416' print(isNumeric(test_s4)) test_s5 = '-1E-16' print(isNumeric(test_s5)) test_s6 = '12e' print(isNumeric(test_s6)) test_s7 = '1a3.14' print(isNumeric(test_s7)) test_s8 = '1.2.3' print(isNumeric(test_s8)) test_s9 = '+-5' print(isNumeric(test_s9)) test_s10 = '12e+4.3' print(isNumeric(test_s10)) test_s11 = 'e+4.3' print(isNumeric(test_s11)) test_s12 = '12e+4' print(isNumeric(test_s12)) test_s13 = '-012e+4' print(isNumeric(test_s13)) test_s14 = '010' print(isNumeric(test_s14)) test_s15 = '0.123' print(isNumeric(test_s15)) \u3010\u8bf4\u660e\u3011\uff1a [0~9]\uff1a\u7b2c\u4e00\u4e2a\u6570\u503c\u4e0d\u80fd\u4e3a '0'\uff0c\u4ec5\u6709\u540e\u9762\u4e3a\u5c0f\u6570\u70b9\u624d\u884c\uff0c\u5373 0.123\u3002 '.'\uff1a\u5c0f\u6570\u70b9\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\uff0c\u4e14\u5c0f\u6570\u70b9\u4e0d\u80fd\u51fa\u73b0\u5728 e \u7684\u540e\u9762\u3002 '+' or '-'\uff1a\u6b63\u8d1f\u53f7\u53ea\u80fd\u51fa\u73b0\u5728\u7b2c\u4e00\u4f4d\u6216\u8005\u5728 e\uff08E\uff09\u7684\u540e\u9762\u3002 'e' or 'E'\uff1a\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\uff0c\u4e14\u524d\u540e\u5fc5\u987b\u5b58\u5728\u6570\u503c\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 def isNumeric(s): pattern = re.compile('[+-]?\\d*(\\.\\d+)?([eE][+-]?\\d+)?') return len(s) == pattern.match(s).end() \u3010\u8bf4\u660e\u3011\uff1a\u5206\u4e3a\u4e09\u90e8\u5206\uff0c\u6574\u6570\u3001\u5c0f\u6570\u4ee5\u53ca\u6307\u6570\u3002 \u6574\u6570\uff1a[+-]?\\d*\u3002 \u5c0f\u6570\uff1a\u53ef\u9009 (.\\d+)?\uff0c\u5207\u8bb0 . \u9700\u8981\u8f6c\u4e49\uff0c\u56e0\u4e3a . \u662f\u4efb\u610f\u5b57\u7b26\u3002 \u6307\u6570\uff1a\u53ef\u9009 ([eE][+-]?\\d+)?\u3002 \u6b64\u5916\uff0c\u5728\u8fd9\u79cd\u65b9\u5f0f\u4e0b\uff0c010 \u4e5f\u89c6\u4f5c\u6b63\u786e\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u5b57\u7b26\u4e32\u7684\u7f16\u7a0b\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u95ee\u9898\u7684\u80fd\u529b\u3002\u9762\u8bd5\u5b98\u5e0c\u671b\u5e94\u8058\u8005\u80fd\u591f\u4ece\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u503c\u4e2d\u5206\u6790\u51fa\u89c4\u5f8b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u601d\u7ef4\u7684\u5168\u9762\u6027\u3002\u5e94\u8058\u8005\u8981\u5168\u9762\u8003\u8651\u6570\u503c\u6574\u6570\u3001\u5c0f\u6570\u3001\u6307\u6570\u90e8\u5206\u7684\u7279\u70b9\u3002 \u9762\u8bd5\u9898 21\uff1a\u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u8c03\u6574\u8be5\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u6240\u6709\u7684\u5947\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u524d\u534a\u90e8\u5206\uff0c\u6240\u6709\u7684\u5076\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u540e\u534a\u90e8\u5206\uff0c\u5e76\u4fdd\u8bc1\u5947\u6570\u548c\u5947\u6570\uff0c\u5076\u6570\u548c\u5076\u6570\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002 \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u7b26\u5408\u8981\u6c42\u7684\u6570\u7ec4\u3001\u5b8c\u5168\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u6570\u7ec4\u3001\u5947\u6570\u957f\u5ea6\u7684\u6570\u7ec4\u3001\u5076\u6570\u957f\u5ea6\u7684\u6570\u7ec4\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6570\u7ec4\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u904d\u5386 + \u989d\u5916\u7a7a\u95f4\u3002 def reOrderArray(array): array_even = [] odd_pos = 0 for item in array: if item & 0x01 == 0: array_even.append(item) else: array[odd_pos] = item odd_pos += 1 for item in array_even: array[odd_pos] = item odd_pos += 1 if __name__ == '__main__': # \u7279\u6b8a\u8f93\u5165\u5904\u7406\uff1a\u7a7a\u6570\u7ec4 test_array_1 = [] reOrderArray(test_array_1) print(test_array_1) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u5076\u6570\u957f\u5ea6 test_array_2 = [1, 2, 4, 3, 6, 7] reOrderArray(test_array_2) print(test_array_2) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u5947\u6570\u957f\u5ea6 test_array_2_2 = [1, 2, 4, 3, 6, 7, 8] reOrderArray(test_array_2_2) print(test_array_2_2) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u5df2\u7ecf\u7b26\u5408\u8981\u6c42 test_array_3 = [1, 3, 5, 2, 4, 6] reOrderArray(test_array_3) print(test_array_3) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u5b8c\u5168\u4e0d\u7b26\u5408\u8981\u6c42 test_array_4 = [2, 4, 6, 1, 3, 5] reOrderArray(test_array_4) print(test_array_4) \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1a\u7531\u4e8e\u9700\u8981\u904d\u5386\u4e00\u6b21\u6570\u7ec4\u548c\u65b0\u521b\u5efa\u7684\u5217\u8868\uff0c\u56e0\u6b64\u9700\u8981\u65f6\u95f4 O(n)\u3002 \u7a7a\u95f4\u6548\u7387\uff1a\u9700\u8981\u521b\u5efa\u989d\u5916\u7684\u5217\u8868\uff0c\u6700\u574f\u7684\u60c5\u51b5\u4e0b\u662f\u6570\u7ec4\u5168\u4e3a\u5076\u6570\uff0c\u56e0\u6b64\u9700\u8981 O(n) \u957f\u5ea6\u7684\u7a7a\u95f4\u3002 \u3010\u6ce8\u610f\u3011\uff1a\u725b\u5ba2\u7f51\u4e0a\u7684\u9898\u76ee\u8981\u6c42\u548c\u4e66\u672c\u6709\u51fa\u5165\uff0c\u65b0\u589e\u4e86 \u5947\u6570\u95f4\u3001\u5076\u6570\u95f4\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8 \u7684\u8981\u6c42\u3002\u4e0d\u8fc7\u5bf9\u4e8e\u540e\u7eed\u7684\u6269\u5c55\u8981\u6c42\u662f\u53ef\u4ee5\u5b9e\u73b0\u7684\u3002 - \u8d1f\u6570\u5728\u975e\u8d1f\u6570\u7684\u524d\u65b9\u3002 if item / param < 0: array_even.append(item) test_array = [-1, 3, -2, 6, -7, 8] reOrderArray(test_array, -1) print(test_array) \u88ab 3 \u6574\u9664\u7684\u6570\u653e\u5728\u4e0d\u80fd\u88ab 3 \u6574\u9664\u7684\u6570\u524d\u9762\u3002 if item % param != 0: array_even.append(item) test_array = [3, 4, 5, 6, 8, 9] reOrderArray(test_array, 3) print(test_array) \u5b9e\u9645\u4e0a\uff0c\u5947\u6570\u548c\u5076\u6570\u662f\u4e0a\u8ff0\u4ee3\u7801\u7684\u4e00\u4e2a\u7279\u4f8b\uff0c\u5373 param == 2\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u4fee\u6539 != \u548c == \u6765\u8c03\u6574\u524d\u540e\u987a\u5e8f\u3002 \u3010\u5efa\u8bae\u3011\uff1a\u5982\u679c\u9762\u8bd5\u5b98\u4e0d\u65ad\u5730\u95ee\u4f60\u4e00\u9053\u9898\u76ee\u5728\u4e0d\u540c\u6761\u4ef6\u4e0b\u8be5\u5982\u4f55\u5904\u7406\u65f6\uff0c\u4f60\u8981\u7acb\u5373\u53cd\u5e94\u8fc7\u6765\uff0c\u9762\u8bd5\u5b98\u671f\u5f85\u6211\u4eec\u63d0\u4f9b\u7684\u4e0d\u4ec5\u4ec5\u662f\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\u7684\u529e\u6cd5\uff0c\u800c\u662f\u89e3\u51b3\u4e00\u7cfb\u5217\u540c\u7c7b\u95ee\u9898\u7684\u901a\u7528\u529e\u6cd5\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u7684\u5feb\u901f\u601d\u7ef4\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u6269\u5c55\u6027\u7684\u7406\u89e3\uff0c\u8981\u6c42\u5e94\u8058\u8005\u5199\u51fa\u7684\u4ee3\u7801\u5177\u6709\u53ef\u91cd\u7528\u6027\u3002 \u4ee3\u7801\u7684\u9c81\u68d2\u6027 \u9c81\u68d2\u662f\u82f1\u6587 Robust \u7684\u97f3\u8bd1\uff0c\u6709\u65f6\u4e5f\u7ffb\u8bd1\u6210\u5065\u58ee\u6027\u3002\u6240\u8c13\u7684\u9c81\u68d2\u6027\u662f\u6307\u7a0b\u5e8f\u80fd\u591f\u5224\u65ad\u8f93\u5165\u662f\u5426\u5408\u4e4e\u89c4\u8303\u8981\u6c42\uff0c\u5e76\u5bf9\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u8f93\u5165\u4e88\u4ee5\u5408\u7406\u7684\u5904\u7406\u3002 \u5bb9\u9519\u6027\u662f\u9c81\u68d2\u6027\u7684\u4e00\u4e2a\u91cd\u8981\u4f53\u73b0\u3002\u4e0d\u9c81\u68d2\u7684\u8f6f\u4ef6\u5728\u53d1\u751f\u5f02\u5e38\u4e8b\u4ef6\u7684\u65f6\u5019\uff0c\u6bd4\u5982\u7528\u6237\u8f93\u5165\u9519\u8bef\u7684\u7528\u6237\u540d\u3001\u8bd5\u56fe\u6253\u5f00\u7684\u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u8005\u7f51\u7edc\u4e0d\u80fd\u8fde\u63a5\uff0c\u5c31\u4f1a\u51fa\u73b0\u4e0d\u53ef\u9884\u89c1\u7684\u8be1\u5f02\u884c\u4e3a\uff0c\u6216\u8005\u5e72\u8106\u6574\u4e2a\u8f6f\u4ef6\u5d29\u6e83\u3002 \u7531\u4e8e\u9c81\u68d2\u6027\u5bf9\u8f6f\u4ef6\u5f00\u53d1\u975e\u5e38\u91cd\u8981\uff0c\u6240\u4ee5\u9762\u8bd5\u5b98\u5728\u62db\u8058\u7684\u65f6\u5019\u5bf9\u5e94\u8058\u8005\u5199\u51fa\u7684\u4ee3\u7801\u662f\u5426\u9c81\u68d2\u4e5f\u975e\u5e38\u5173\u6ce8\u3002 \u63d0\u9ad8\u4ee3\u7801\u7684\u9c81\u68d2\u6027\u7684\u6709\u6548\u9014\u5f84\u662f\u8fdb\u884c\u9632\u5fa1\u6027\u7f16\u7a0b \u3002 \u3010\u9632\u5fa1\u6027\u7f16\u7a0b\u3011\uff1a\u9884\u89c1\u5728\u4ec0\u4e48\u5730\u65b9\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\uff0c\u5e76\u4e3a\u8fd9\u4e9b\u53ef\u80fd\u51fa\u73b0\u7684\u95ee\u9898\u5236\u5b9a\u5904\u7406\u65b9\u5f0f\u3002 \u5728\u9762\u8bd5\u65f6\uff0c\u6700\u7b80\u5355\u4e5f\u6700\u5b9e\u7528\u7684\u9632\u5fa1\u6027\u7f16\u7a0b\u5c31\u662f\u5728\u51fd\u6570\u5165\u53e3\u6dfb\u52a0\u4ee3\u7801\u4ee5\u9a8c\u8bc1\u7528\u6237\u8f93\u5165\u662f\u5426\u7b26\u5408\u8981\u6c42\u3002\u5f53\u7136\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u4e0e\u9c81\u68d2\u6027\u76f8\u5173\u7684\u95ee\u9898\u90fd\u53ea\u662f\u68c0\u67e5\u8f93\u5165\u7684\u53c2\u6570\u8fd9\u4e48\u7b80\u5355\u3002\u770b\u5230\u95ee\u9898\u65f6\uff0c\u9700\u8981\u601d\u8003\u9898\u76ee\u4e2d\u9690\u542b\u7740\u7684\u6761\u4ef6\u3002 \u9762\u8bd5\u9898 22\uff1a\u94fe\u8868\u4e2d\u5012\u6570\u7b2c K \u4e2a\u8282\u70b9 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class ListNode: def __init__(self, x): self.val = x self.next = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u975e\u7a7a\u94fe\u8868\uff0c\u6b63\u6574\u6570 k\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u94fe\u8868\uff0c\u975e\u6b63\u6574\u6570 k\uff08\u8d1f\u6570\u3001\u96f6\u6216\u5c0f\u6570\uff09\uff0ck \u5927\u4e8e\u94fe\u8868\u957f\u5ea6\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u4e2d\u89c4\u4e2d\u77e9\u505a\u6cd5\u3002 def FindKthToTail(head, k): if not head or k <= 0: return None stack = [] node = head while node: stack.append(node) node = node.next if k > len(stack): return None return stack[-k] \u3010\u8bf4\u660e\u3011\uff1a\u56e0\u4e3a\u662f\u5355\u5411\u94fe\u8868\uff0c\u6240\u4ee5\u5f97\u4ece\u5934\u8282\u70b9\u5f00\u59cb\u5411\u5c3e\u8282\u70b9\u904d\u5386\u4e00\u904d\uff0c\u5c06\u904d\u5386\u7684\u8282\u70b9\u4fdd\u5b58\u5230\u5806\u6808\u4e2d\u3002\u63a5\u7740\u5229\u7528\u5806\u6808\u7684\u7279\u6027\u6765\u5b9e\u73b0\u83b7\u53d6\u5012\u6570\u7b2c k \u4e2a\u8282\u70b9\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1aO(n)\uff0c\u6700\u574f\u7684\u60c5\u51b5\u662f k \u521a\u597d\u7b49\u4e8e\u94fe\u8868\u957f\u5ea6\uff0c\u56e0\u6b64\u9700\u8981\u4e24\u4e2a O(n) \u65f6\u95f4\uff08\u5f53\u5b9e\u9645\u4e0a Python \u83b7\u53d6\u5217\u8868\u4e2d\u5143\u7d20\u7684\u65f6\u95f4\u4e3a O(1)\uff09\uff0c\u8fd1\u4f3c\u4e8e O(n)\u3002 \u7a7a\u95f4\u6548\u7387\uff1aO(n)\uff0c\u9700\u8981\u5f00\u8f9f\u7b49\u540c\u4e8e\u94fe\u8868\u957f\u5ea6\u7684\u5806\u6808\u7a7a\u95f4\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5de7\u5999\u7684\u53cc\u6307\u9488\u505a\u6cd5\u3002 def FindKthToTail(head, k): if not head or k <= 0: return None iter_count = 0 node = head node_k = None while node: node = node.next iter_count += 1 if iter_count >= k: if not node_k: node_k = head else: node_k = node_k.next return node_k \u3010\u8bf4\u660e\u3011\uff1a\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488\uff0c\u7b2c\u4e00\u4e2a\u6307\u9488\u4ece\u94fe\u8868\u7684\u5934\u6307\u9488\u5f00\u59cb\u904d\u5386\u5411\u524d\u8d70 k - 1 \u6b65\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488\u4fdd\u6301\u4e0d\u52a8\uff1b\u4ece\u7b2c k \u6b65\u5f00\u59cb\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488\u4e5f\u5f00\u59cb\u4ece\u94fe\u8868\u7684\u5934\u6307\u9488\u5f00\u59cb\u904d\u5386\u3002\u7531\u4e8e\u4e24\u4e2a\u6307\u9488\u7684\u8ddd\u79bb\u4fdd\u6301\u5728 k - 1\uff0c\u5f53\u7b2c\u4e00\u4e2a\u6307\u9488\u8fbe\u5230\u94fe\u8868\u7684\u5c3e\u8282\u70b9\u65f6\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488\u6b63\u597d\u6307\u5411\u5012\u6570\u7b2c k \u4e2a\u8282\u70b9\u3002 \u867d\u7136\u9012\u5f52\u4e5f\u80fd\u5b9e\u73b0\uff0c\u4e0d\u8fc7\u5f97\u501f\u52a9\u9012\u5f52\u51fd\u6570\u5916\u7684\u5168\u5c40\u53d8\u91cf\u6216\u5bf9\u8c61\u5c5e\u6027\u6765\u5b9e\u73b0\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u94fe\u8868\u7684\u7406\u89e3\u3002 \u8003\u67e5\u5e94\u8058\u8005\u6240\u5199\u4ee3\u7801\u7684\u9c81\u68d2\u6027\u3002 \u9762\u8bd5\u9898 22-2\uff1a\u6c42\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9 \u6c42\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9\u3002\u5982\u679c\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u603b\u6570\u4e3a\u5947\u6570\uff0c\u5219\u8fd4\u56de\u4e2d\u95f4\u8282\u70b9\uff1b\u5982\u679c\u8282\u70b9\u603b\u6570\u662f\u5076\u6570\uff0c\u5219\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u8282\u70b9\u7684\u4efb\u610f\u4e00\u4e2a\u3002 \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u8282\u70b9\u603b\u6570\u4e3a\u5947\u6570\u7684\u94fe\u8868\u3001\u8282\u70b9\u603b\u6570\u4e3a\u5076\u6570\u7684\u94fe\u8868\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u94fe\u8868\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class ListNode: def __init__(self, x): self.val = x self.next = None \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u4e2d\u89c4\u4e2d\u77e9\u3002 def FindMiddleToTail(head): if not head: return None # \u989d\u5916\u5f00\u8f9f\u4e00\u5757\u5185\u5b58\u7a7a\u95f4\uff0c\u4ee5\u5806\u6808\u7684\u5f62\u5f0f\u5b58\u50a8\u904d\u5386\u8282\u70b9 stack = [] node = head while node: stack.append(node) node = node.next return stack[int(len(stack) / 2)] \u3010\u8bf4\u660e\u3011\uff1a\u904d\u5386\u83b7\u53d6\u94fe\u8868\u4e2a\u8282\u70b9\uff0c\u5e76\u5b58\u50a8\u5230\u5217\u8868\u4e2d\uff0c\u6700\u540e\u83b7\u53d6\u5217\u8868\u4e2d\u95f4\u4f4d\u7f6e\u7684\u8282\u70b9\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u53cc\u6307\u9488\u3002 def FindMiddleToTail(head): if not head: return None node = head node_2 = head while node_2: if not node: break node = node.next if not node: break node = node.next node_2 = node_2.next return node_2 \u3010\u8bf4\u660e\u3011\uff1a\u5f53 node_2 \u6307\u9488\u8d70\u4e00\u6b65\u65f6\uff0cnode \u6307\u9488\u8d70\u4e24\u6b65\uff0c\u56e0\u6b64\u5f53 node \u6307\u9488\u8d70\u5230\u5c3e\u8282\u70b9\u65f6\uff0c\u6b64\u65f6 node_2 \u6307\u9488\u6307\u5411\u4e2d\u95f4\u8282\u70b9\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1aO(n/2) \u7a7a\u95f4\u6548\u7387\uff1aO(1) \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u8ba9 node \u4f5c\u4e3a\u5916\u5c42\u5faa\u73af\u7684\u5224\u5b9a\u6761\u4ef6\u3002 def FindMiddleToTail(head): if not head: return None node = head node_2 = head iter_count = 1 while node: if iter_count & 0x01 == 0: node_2 = node_2.next iter_count += 1 node = node.next return node_2 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1aO(n) \u7a7a\u95f4\u6548\u7387\uff1aO(1) \u5b9e\u9645\u4e0a\u83b7\u53d6\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9\u7b49\u540c\u4e8e\u83b7\u53d6\u94fe\u8868\u5012\u6570 K \u8282\u70b9\u7684\u4e00\u4e2a\u7279\u6b8a\u60c5\u51b5\uff0c\u5373 k = \u94fe\u8868\u957f\u5ea6\u7684\u4e00\u534a\u3002 \u9762\u8bd5\u9898 23\uff1a\u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u8282\u70b9 \u7ed9\u4e00\u4e2a\u94fe\u8868\uff0c\u82e5\u5176\u4e2d\u5305\u542b\u73af\uff0c\u8bf7\u627e\u51fa\u8be5\u94fe\u8868\u7684\u73af\u7684\u5165\u53e3\u7ed3\u70b9\uff0c\u5426\u5219\uff0c\u8f93\u51fa null\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class ListNode: def __init__(self, x): self.val = x self.next = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u542b\u6709\u73af\u7684\u94fe\u8868\uff0c\u6ca1\u6709\u73af\u7684\u94fe\u8868\uff0c\u5355\u4e2a\u8282\u70b9\u7684\u94fe\u8868\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u94fe\u8868\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u8bb0\u5f55\u8282\u70b9\u7684\u65b9\u5f0f\u3002 def EntryNodeOfLoop(pHead): if not pHead: return None node_list = [] node = pHead while node: if node in node_list: return node node_list.append(node) node = node.next return None \u3010\u8bf4\u660e\u3011\uff1a\u904d\u5386\u94fe\u8868\u7684\u540c\u65f6\u8bb0\u5f55\u4e0b\u6bcf\u6b21\u904d\u5386\u7684\u8282\u70b9\u4fe1\u606f\uff0c\u540c\u65f6\u5224\u65ad\u5f53\u524d\u8282\u70b9\u662f\u5426\u5df2\u7ecf\u88ab\u8bb0\u5f55\u3002\u82e5\u5df2\u88ab\u8bb0\u5f55\u5219\u8bf4\u660e\u5f53\u524d\u8282\u70b9\u662f\u73af\u7684\u5165\u53e3\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1aO(n)\uff0c\u81f3\u5c11\u904d\u5386\u4e00\u904d\u94fe\u8868\u3002 \u7a7a\u95f4\u6548\u7387\uff1aO(n)\uff0c\u9700\u8981\u4e0e\u94fe\u8868\u7b49\u957f\u7684\u5217\u8868\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u53cc\u6307\u9488\u6cd5\u3002 def EntryNodeOfLoop(pHead): node_ptr_1, node_ptr_2 = pHead, pHead is_loop, length = False, 1 # \u5224\u65ad\u662f\u5426\u6210\u73af while node_ptr_2: node_ptr_1 = node_ptr_1.next if not node_ptr_1: return None if node_ptr_1 == node_ptr_2: # \u6210\u73af\uff0c\u5219\u627e\u51fa\u94fe\u8868\u7684\u957f\u5ea6 is_loop = True node_ptr_2 = node_ptr_2.next while node_ptr_2 != node_ptr_1: length += 1 node_ptr_2 = node_ptr_2.next break node_ptr_1 = node_ptr_1.next if not node_ptr_1: return None if node_ptr_1 == node_ptr_2: is_loop = True node_ptr_2 = node_ptr_2.next while node_ptr_2 != node_ptr_1: length += 1 node_ptr_2 = node_ptr_2.next break node_ptr_2 = node_ptr_2.next # \u4e0d\u6210\u73af\uff0c\u5219\u8fd4\u56de None if not is_loop: return None node_ptr_1, node_ptr_2 = pHead, pHead # \u5148\u8ba9\u5176\u4e2d\u4e00\u4e2a\u6307\u9488\u79fb\u52a8 length \u957f\u5ea6 for i in list(range(length)): node_ptr_2 = node_ptr_2.next while node_ptr_1 != node_ptr_2: node_ptr_1 = node_ptr_1.next node_ptr_2 = node_ptr_2.next return node_ptr_2 \u3010\u8bf4\u660e\u3011\uff1a \u5982\u4f55\u786e\u5b9a\u4e00\u4e2a\u94fe\u8868\u627e\u4e2d\u5305\u542b\u73af\uff1a\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488\uff0c\u540c\u65f6\u4ece\u94fe\u8868\u7684\u5934\u8282\u70b9\u51fa\u53d1\uff0c\u4e00\u4e2a\u6307\u9488\u4e00\u6b21\u8d70\u4e00\u6b65\uff0c\u53e6\u4e00\u4e2a\u6307\u9488\u4e00\u6b21\u8d70\u4e24\u6b65\u3002\u5982\u679c\u8d70\u5f97\u5feb\u7684\u6307\u9488\u8ffd\u4e0a\u4e86\u8d70\u5f97\u6162\u7684\u6307\u9488\uff0c\u90a3\u4e48\u94fe\u8868\u5c31\u5305\u542b\u73af\uff1b\u5982\u679c\u8d70\u5f97\u5feb\u7684\u6307\u9488\u8d70\u5230\u4e86\u94fe\u8868\u7684\u672b\u5c3e\u90fd\u6ca1\u6709\u8ffd\u4e0a\u7b2c\u4e00\u4e2a\u6307\u9488\uff0c\u90a3\u4e48\u94fe\u8868\u5c31\u4e0d\u5305\u542b\u73af\u3002 \u5982\u4f55\u627e\u5230\u73af\u7684\u5165\u53e3\uff1a\u5148\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488\u6307\u5411\u94fe\u8868\u7684\u5934\u8282\u70b9\uff0c\u5982\u679c\u94fe\u8868\u4e2d\u7684\u73af\u6709 n \u4e2a\u8282\u70b9\uff0c\u5219\u7b2c\u4e00\u4e2a\u6307\u9488\u5148\u5728\u94fe\u8868\u4e0a\u79fb\u52a8 n \u6b65\uff0c\u7136\u540e\u4e24\u4e2a\u6307\u9488\u4ee5\u76f8\u540c\u7684\u901f\u5ea6\u5411\u524d\u79fb\u52a8\u3002\u5f53\u7b2c\u4e8c\u4e2a\u6307\u9488\u6307\u5411\u73af\u7684\u5165\u53e3\u65f6\uff0c\u7b2c\u4e00\u4e2a\u6307\u9488\u5df2\u7ecf\u56f4\u7ed5\u73af\u8d70\u4e86\u4e00\u5708\uff0c\u53c8\u56de\u5230\u4e86\u5165\u53e3\u8282\u70b9\u3002\u56e0\u6b64\u5224\u65ad\u8fd9\u4e24\u4e2a\u6307\u9488\u76f8\u540c\uff0c\u5219\u6307\u9488\u6307\u5411\u7684\u8282\u70b9\u5373\u4e3a\u5165\u53e3\u8282\u70b9\u3002 \u5982\u4f55\u5f97\u5230\u73af\u4e2d\u8282\u70b9\u7684\u6570\u76ee\uff1a\u5728\u5224\u65ad\u662f\u5426\u73af\u7684\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u5b58\u5728\u73af\u5219\u7ee7\u7eed\u6267\u884c\u4e0b\u8ff0\u64cd\u4f5c\u3002\u4ece\u5f53\u524d\u8282\u70b9\u89e6\u53d1\uff0c\u4e00\u8fb9\u7ee7\u7eed\u5411\u524d\u79fb\u52a8\u4e00\u8fb9\u8ba1\u6570\uff0c\u5f53\u518d\u6b21\u56de\u5230\u8be5\u8282\u70b9\u65f6\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u73af\u4e2d\u8282\u70b9\u6570\u4e86\u3002 \u4e0a\u8ff0\u4ee3\u7801\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u8fdb\u884c\u4f18\u5316\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u94fe\u8868\u7684\u7406\u89e3\u3002 \u8003\u67e5\u5e94\u8058\u8005\u6240\u5199\u4ee3\u7801\u7684\u9c81\u68d2\u6027\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u95ee\u9898\u7684\u80fd\u529b\u3002 \u9762\u8bd5\u9898 24\uff1a\u53cd\u8f6c\u94fe\u8868 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u53cd\u8f6c\u94fe\u8868\u540e\uff0c\u8f93\u51fa\u65b0\u94fe\u8868\u7684\u8868\u5934\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class ListNode: def __init__(self, x): self.val = x self.next = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u957f\u5ea6\u4e3a 1 \u7684\u94fe\u8868\uff0c\u4efb\u610f\u957f\u5ea6\u7684\u94fe\u8868\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u94fe\u8868\u3002 if __name__ == '__main__': # \u529f\u80fd\u6d4b\u8bd5 test_node1 = get_linklist([1, 2, 3, 4, 5]) result1 = ReverseList(test_node1.root) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u957f\u5ea6\u4e3a 1 \u7684\u94fe\u8868 test_node2 = get_linklist([1]) result2 = ReverseList(test_node2.root) # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5 result3 = ReverseList(None) \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u501f\u52a9\u5806\u6808\u5b9e\u73b0\u3002 def ReverseList(pHead): node_list = [None] node = pHead while node: node_list.append(node) node = node.next node = node_list.pop() head = node while node: cur_node = node_list.pop() node.next = cur_node node = cur_node return head \u3010\u8bf4\u660e\u3011\uff1a\u501f\u52a9\u5806\u6808\uff08\u5217\u8868\uff09\u6765\u5b58\u653e\u6240\u6709\u94fe\u8868\u8282\u70b9\uff0c\u5e76\u5229\u7528\u5806\u6808\u7684\u7279\u6027\u6765\u53cd\u8f6c\u94fe\u8868\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f node_list \u5f00\u59cb\u5b58\u6709 None\uff0c\u5176\u76ee\u7684\u662f\u8ba9\u5f53\u524d\u7684\u5c3e\u8282\u70b9\uff08\u5148\u524d\u7684\u5934\u8282\u70b9\uff09\u7684 next \u6307\u5411 None\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1a\u9700\u8981\u5faa\u73af\u4e24\u6b21\u94fe\u8868\u957f\u5ea6\uff0c\u56e0\u6b64\u9700\u8981 O(2n) \u7684\u65f6\u95f4\u3002 \u7a7a\u95f4\u6548\u7387\uff1a\u9700\u8981\u989d\u5916\u7684\u5806\u6808\uff0c\u5806\u6808\u7684\u957f\u5ea6\u7b49\u540c\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u56e0\u6b64\u9700\u8981 O(n) \u7684\u5185\u5b58\u7a7a\u95f4\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u9012\u5f52 + \u5168\u5c40\u53d8\u91cf\u3002 head = None def ReverseList(pHead): if not pHead: return None tail = loop(pHead) tail.next = None return head def loop(node): if node.next: node_next = loop(node.next) node_next.next = node return node global head head = node return node \u3010\u8bf4\u660e\u3011\uff1a\u9012\u5f52\u7528\u4e8e\u53cd\u8f6c\u94fe\u8868\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u7684\u662f\u53cd\u8f6c\u540e\u7684\u5934\u8282\u70b9\u9700\u8981\u7528\u5168\u5c40\u53d8\u91cf\u6765\u5b58\u50a8\uff0c\u5e76\u4e14\u53cd\u8f6c\u540e\u7684\u5c3e\u8282\u70b9\uff08\u5148\u524d\u7684\u5934\u8282\u70b9\uff09\u7684\u4e0b\u4e00\u4e2a\u6307\u9488\u4ecd\u7136\u662f\u6307\u5411\u5c3e\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u56e0\u6b64\u9700\u8981\u5728\u9012\u5f52\u8c03\u7528\u7ed3\u675f\u540e\uff0c\u5c06\u8fd4\u56de\u7684\u5c3e\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u6307\u9488\u6307\u5411 None\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1a\u94fe\u8868\u957f\u5ea6\u7684\u9012\u5f52\u8c03\u7528\u6b21\u6570\uff0c\u56e0\u6b64\u65f6\u95f4\u6548\u7387\u4e3a O(n)\u3002 \u7a7a\u95f4\u6548\u7387\uff1a\u94fe\u8868\u957f\u5ea6\u7684\u9012\u5f52\u8c03\u7528\u6df1\u5ea6\uff0c\u7a7a\u95f4\u6548\u7387\u4e3a O(n)\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5de7\u5999\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002 def ReverseList(pHead): node = pHead node_prev = None while node: node_next = node.next node.next = node_prev node_prev, node = node, node_next return node_prev \u3010\u8bf4\u660e\u3011\uff1a\u521d\u59cb\u5316\u65f6\uff0c\u5c06\u5934\u8282\u70b9\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\uff0c\u7a7a\u8282\u70b9\u4f5c\u4e3a\u4e0a\u4e00\u4e2a\u8282\u70b9\u3002\u5728\u904d\u5386\u94fe\u8868\u65f6\uff0c\u9996\u5148\u83b7\u53d6\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5c06\u5f53\u524d\u8282\u70b9\u7684 next \u6307\u5411\u4e0a\u4e00\u4e2a\u8282\u70b9\uff0c\u6700\u540e\u5c06\u5f53\u524d\u8282\u70b9\u8d4b\u503c\u7ed9\u4e0a\u4e00\u4e2a\u8282\u70b9\uff0c\u4e0b\u4e00\u4e2a\u8282\u70b9\u8d4b\u503c\u7ed9\u5f53\u524d\u8282\u70b9\uff0c\u4ee5\u6b64\u6765\u8fdb\u884c\u5faa\u73af\u3002 \u3010\u6838\u5fc3\u601d\u60f3\u3011\uff1a\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u7528\u65b0\u7684\u53d8\u91cf\u4fdd\u5b58\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u4fe1\u606f\uff0c\u56e0\u6b64\u4fee\u6539\u5f53\u524d\u8282\u70b9\u7684 next \u503c\u65f6\u4e0d\u4f1a\u5f71\u54cd\u5230\u5faa\u73af\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1aO(n)\u3002 \u7a7a\u95f4\u6548\u7387\uff1aO(1)\u3002 \u3010\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\u3011\uff1a \u8f93\u5165\u7a7a\u94fe\u8868\u6216\u8005\u6574\u4e2a\u94fe\u8868\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u7a0b\u5e8f\u7acb\u5373\u5d29\u6e83\u3002 \u53cd\u8f6c\u540e\u7684\u94fe\u8868\u51fa\u73b0\u65ad\u88c2\u3002 \u8fd4\u56de\u7684\u53cd\u8f6c\u4e4b\u540e\u7684\u5934\u8282\u70b9\u4e0d\u662f\u539f\u59cb\u94fe\u8868\u7684\u5c3e\u8282\u70b9\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u94fe\u8868\u3001\u6307\u9488\u7684\u7f16\u7a0b\u80fd\u529b\u3002 \u7279\u522b\u6ce8\u91cd\u8003\u67e5\u5e94\u8058\u8005\u601d\u7ef4\u7684\u5168\u9762\u6027\u53ca\u5199\u51fa\u6765\u7684\u4ee3\u7801\u7684\u9c81\u68d2\u6027\u3002 \u9762\u8bd5\u9898 25\uff1a\u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u5217\u8868 \u8f93\u5165\u4e24\u4e2a\u5355\u8c03\u9012\u589e\u7684\u94fe\u8868\uff0c\u8f93\u51fa\u4e24\u4e2a\u94fe\u8868\u5408\u6210\u540e\u7684\u94fe\u8868\uff0c\u5f53\u7136\u6211\u4eec\u9700\u8981\u5408\u6210\u540e\u7684\u94fe\u8868\u6ee1\u8db3\u5355\u8c03\u4e0d\u51cf\u89c4\u5219\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class ListNode: def __init__(self, x): self.val = x self.next = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u4e24\u4e2a\u94fe\u8868\u6709\u591a\u4e2a\u8282\u70b9\uff0c\u8282\u70b9\u7684\u503c\u4e92\u4e0d\u76f8\u540c\u6216\u8005\u5b58\u5728\u503c\u76f8\u7b49\u7684\u591a\u4e2a\u8282\u70b9\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u4e24\u4e2a\u94fe\u8868\u6709\u4e00\u4e2a\u6216\u8005\u4e24\u4e2a\u90fd\u4e3a\u7a7a\u94fe\u8868\uff0c\u4e24\u4e2a\u94fe\u8868\u4e2d\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u3002 def traversal(node): node_list = [] if not node: print('None') while node: node_list.append(node.val) node = node.next print(str(node_list)) def test_1(): \"\"\" \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u5b58\u5728\u7a7a\u94fe\u8868 \"\"\" result1 = Merge(None, None) traversal(result1) result2 = Merge(None, get_linklist([1, 2, 3, 4, 5]).root) traversal(result2) result3 = Merge(get_linklist([1, 2, 3, 4, 5]).root, None) traversal(result3) result4 = Merge(get_linklist([1]).root, get_linklist([2]).root) traversal(result4) def test_2(): \"\"\" \u529f\u80fd\u6d4b\u8bd5\uff1a \"\"\" result1 = Merge(get_linklist([1, 3, 5, 7, 9]).root, get_linklist([2, 4, 6, 8, 10]).root) traversal(result1) result2 = Merge(get_linklist([1]).root, get_linklist([2, 4, 6, 8, 10]).root) traversal(result2) result3 = Merge(get_linklist([1, 3, 5, 7, 9]).root, get_linklist([2]).root) traversal(result3) result4 = Merge(get_linklist([1, 3, 5, 7, 9]).root, get_linklist([2, 3, 4, 5]).root) traversal(result4) if __name__ == '__main__': print('test1') test_1() print('------') print('test2') test_2() print('------') \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u53cc\u6307\u9488\u505a\u6cd5\u3002 def Merge(pHead1, pHead2): ptr_1, ptr_2 = pHead1, pHead2 if not pHead1: return pHead2 elif not pHead2: return pHead1 if ptr_1.val < ptr_2.val: head = ptr_1 ptr_1 = ptr_1.next else: head = ptr_2 ptr_2 = ptr_2.next node = head while True: if not ptr_1: node.next = ptr_2 break if not ptr_2: node.next = ptr_1 break if ptr_1.val < ptr_2.val: node.next = ptr_1 ptr_1 = ptr_1.next else: node.next = ptr_2 ptr_2 = ptr_2.next node = node.next return head \u3010\u8bf4\u660e\u3011\uff1a\u5148\u786e\u5b9a\u5934\u8282\u70b9\uff0c\u7136\u540e\u5728\u5faa\u73af\u4f53\u5185\u6bd4\u8f83\u4e24\u4e2a\u94fe\u8868\u5f53\u524d\u4f4d\u7f6e\u7684\u5927\u5c0f\uff0c\u82e5\u94fe\u8868 1 \u7684\u503c\u5c0f\u4e8e\u94fe\u8868 2 \u7684\u503c\uff0c\u5219\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684 next \u6307\u5411\u94fe\u8868 1 \u5f53\u524d\u8282\u70b9\uff0c\u5e76\u8ba9\u94fe\u8868 1 \u7684\u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002\u6309\u7167\u8be5\u6b65\u9aa4\u4f9d\u6b21\u5faa\u73af\uff0c\u76f4\u5230\u5230\u8fbe\u67d0\u4e2a\u94fe\u8868\u7684\u5c3e\u8282\u70b9\uff0c\u6b64\u65f6\u8ba9\u53e6\u4e00\u4e2a\u94fe\u8868\u6dfb\u52a0\u5230\u5f53\u524d\u8282\u70b9\u7684\u5c3e\u90e8\u5373\u53ef\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1a\u6700\u7cdf\u7cd5\u7684\u60c5\u51b5\u662f\u4e24\u4e2a\u94fe\u8868\u7684\u6570\u636e\u76f8\u4e92\u4ea4\u53c9\uff0c\u5373 [1, 3, 5, 7]\uff0c[2, 4, 6, 8] \u8fd9\u79cd\u60c5\u51b5\uff0c\u56e0\u6b64\u904d\u5386\u7684\u65f6\u957f\u4e3a O(2n)\u3002 \u7a7a\u95f4\u6548\u7387\uff1aO(1)\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u9012\u5f52\u7684\u65b9\u5f0f\u3002 def Merge(pHead1, pHead2): if not pHead1: return pHead2 if not pHead2: return pHead1 if pHead1.val < pHead2.val: pHead1.next = Merge(pHead1.next, pHead2) return pHead1 else: pHead2.next = Merge(pHead1, pHead2.next) return pHead2 \u3010\u8bf4\u660e\u3011\uff1a\u8003\u8651\u8fc7\u7a0b\u53ef\u4ee5\u53c2\u8003\u300a\u5251\u6307offer\u300b\u7b2c 145-147 \u9875\u7684\u5185\u5bb9\u3002\u4e0d\u8fc7\u5176\u5b9e\u4e5f\u633a\u597d\u7406\u89e3\u7684\uff0c\u5148\u9009\u51fa\u4e24\u4e2a\u5934\u8282\u70b9\u4e2d\u6700\u5c0f\u7684\u8282\u70b9\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528 Merge() \u4ece\u4f59\u4e0b\u7684\u94fe\u8868\u4e2d\u518d\u6b21\u53d6\u51fa\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u4f9d\u6b21\u6267\u884c\u76f4\u5230\u5176\u4e2d\u4e00\u4e2a\u94fe\u8868\u4e3a\u7a7a\uff0c\u6b64\u65f6\u5c06\u53e6\u5916\u4e00\u4e2a\u94fe\u8868\u4f5c\u4e3a\u5c3e\u90e8\u6dfb\u52a0\u5230\u5408\u5e76\u94fe\u8868\u7684\u5c3e\u90e8\u5373\u53ef\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u95ee\u9898\u7684\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u80fd\u4e0d\u80fd\u5199\u51fa\u9c81\u68d2\u7684\u4ee3\u7801\u3002 \u9762\u8bd5\u9898 26\uff1a\u6811\u7684\u5b50\u7ed3\u6784 \u8f93\u5165\u4e24\u68f5\u4e8c\u53c9\u6811A\uff0cB\uff0c\u5224\u65adB\u662f\u4e0d\u662fA\u7684\u5b50\u7ed3\u6784\u3002\uff08ps\uff1a\u6211\u4eec\u7ea6\u5b9a\u7a7a\u6811\u4e0d\u662f\u4efb\u610f\u4e00\u4e2a\u6811\u7684\u5b50\u7ed3\u6784\uff09 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u6811A \u548c\u6811 B \u90fd\u662f\u666e\u901a\u7684\u4e8c\u53c9\u6811\u4e14\u7b26\u5408\u8981\u6c42\uff0c\u4e0d\u7b26\u5408\u8981\u6c42\uff0c\u6811 A \u548c\u6811 B \u53ea\u6709\u5de6\u5b50\u6811\u6216\u53f3\u5b50\u6811\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811\uff0c\u53ea\u6709\u6839\u8282\u70b9\u7684\u6811\u3002 node1 = TreeNode(8) node2 = TreeNode(8) node3 = TreeNode(7) node4 = TreeNode(9) node5 = TreeNode(2) node6 = TreeNode(4) node7 = TreeNode(7) node1.left, node1.right = node2, node3 node2.left, node2.right = node4, node5 node5.left, node5.right = node6, node7 # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811 result1 = HasSubtree(node1, None) # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u53ea\u6709\u6839\u8282\u70b9 result2 = HasSubtree(node1, TreeNode(4)) # \u529f\u80fd\u6d4b\u8bd5\uff1a sub_node1 = TreeNode(8) sub_node2 = TreeNode(9) sub_node3 = TreeNode(2) sub_node1.left, sub_node1.right = sub_node2, sub_node3 result3 = HasSubtree(node1, sub_node1) # \u529f\u80fd\u6d4b\u8bd5\uff1a sub_node1 = TreeNode(8) sub_node2 = TreeNode(9) sub_node3 = TreeNode(2) sub_node4 = TreeNode(7) sub_node1.left, sub_node1.right = sub_node2, sub_node3 sub_node2.left = sub_node4 result4 = HasSubtree(node1, sub_node1) # \u529f\u80fd\u6d4b\u8bd5\uff1a node1 = TreeNode(8) node2 = TreeNode(8) node3 = TreeNode(9) node4 = TreeNode(2) node5 = TreeNode(5) node1.right, node2.right = node2, node3 node3.right, node4.right = node4, node5 sub_node1 = TreeNode(8) sub_node2 = TreeNode(9) sub_node3 = TreeNode(3) sub_node4 = TreeNode(2) sub_node1.right, sub_node2.left, sub_node2.right = sub_node2, sub_node3, sub_node4 result5 = HasSubtree(node1, sub_node1) \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a def HasSubtree(pRoot1, pRoot2): if not pRoot2: return False node_list = [pRoot1] while len(node_list) > 0: node = node_list.pop(0) if node.val == pRoot2.val: if is_root1_has_root2(node, pRoot2): return True if node.left: node_list.append(node.left) if node.right: node_list.append(node.right) return False def is_root1_has_root2(node1, node2): if node2: if node1 is None: return False if node1.val == node2.val: result_left = is_root1_has_root2(node1.left, node2.left) result_right = is_root1_has_root2(node1.right, node2.right) return result_left and result_right else: return False else: return True \u3010\u8bf4\u660e\u3011\uff1a \u5148\u5c42\u5e8f\u904d\u5386\u6811 A\uff0c\u627e\u51fa\u4e0e\u6811 B \u6839\u8282\u70b9\u76f8\u540c\u7684\u8282\u70b9\uff1b \u4ece\u8be5\u8282\u70b9\u5f00\u59cb\uff0c\u5224\u65ad\u6811 A \u662f\u5426\u5305\u542b\u4e0e\u6811 B \u76f8\u540c\u7684\u7ed3\u6784\u3002 \u9012\u5f52\u5224\u65ad\u8fc7\u7a0b\u4ee5\u6811 B \u4e3a\u4e3b\uff1a \u82e5\u6811 B \u8282\u70b9\u5b58\u5728\uff0c\u800c\u6811 A \u8282\u70b9\u4e0d\u5b58\u5728\uff0c\u5219\u6811 B \u4e00\u5b9a\u4e0d\u662f\u6811 A \u7684\u5b50\u7ed3\u6784\uff1b \u82e5\u6811 B \u8282\u70b9\u4e0e\u6811 A \u8282\u70b9\u4e0d\u76f8\u540c\uff0c\u5219\u6811 B \u4e00\u5b9a\u4e0d\u662f\u6811 A \u7684\u5b50\u7ed3\u6784\uff1b \u82e5\u6811 B \u8282\u70b9\u4e0e\u6811 A \u8282\u70b9\u76f8\u540c\uff0c\u5219\u7ee7\u7eed\u9012\u5f52\u904d\u5386\uff0c\u76f4\u5230\u53f6\u7ed3\u70b9\u3002 \u3010\u7ec6\u8282\u3011\uff1a\u8ba1\u7b97\u673a\u5185\u8868\u793a\u5c0f\u6570\u65f6\u5b58\u5728\u8bef\u5dee\uff0c\u5224\u65ad\u4e24\u4e2a\u5c0f\u6570\u662f\u5426\u76f8\u7b49\uff0c\u6bd4\u8f83\u597d\u7684\u65b9\u6cd5\u662f\u5224\u65ad\u5b83\u4eec\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c\u5728\u4e00\u4e2a\u5f88\u5c0f\u7684\u8303\u56f4\u5185\u3002\u5982\u679c\u76f8\u5dee\u5f88\u5c0f\uff0c\u5219\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u7b49\u7684\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u4e8c\u53c9\u6811\u904d\u5386\u7b97\u6cd5\u7684\u7406\u89e3\u53ca\u9012\u5f52\u7f16\u7a0b\u80fd\u529b\uff1b \u8003\u67e5\u5e94\u8058\u8005\u6240\u5199\u4ee3\u7801\u7684\u9c81\u68d2\u6027\u3002 \u672c\u7ae0\u5c0f\u7ed3 \u672c\u7ae0\u4ece\u89c4\u8303\u6027\u3001\u5b8c\u6574\u6027\u548c\u9c81\u68d2\u6027 3 \u4e2a\u65b9\u9762\u4ecb\u7ecd\u4e86\u5982\u4f55\u5728\u9762\u8bd5\u65f6\u5199\u51fa\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801\u3002 \u5927\u591a\u6570\u9762\u8bd5\u90fd\u8981\u6c42\u5e94\u8058\u8005\u5728\u767d\u7eb8\u6216\u8005\u767d\u677f\u4e0a\u4e9b\u4ee3\u7801\u3002\u5e94\u8058\u8005\u5728\u7f16\u7801\u7684\u65f6\u5019\u8981\u6ce8\u610f\u89c4\u8303\u6027\uff0c\u5c3d\u91cf\u6e05\u6670\u5730\u4e66\u5199\u6bcf\u4e2a\u5b57\u6bcd\uff0c\u901a\u8fc7\u7f29\u8fdb\u548c\u5bf9\u9f50\u62ec\u53f7\u8ba9\u4ee3\u7801\u5e03\u5c40\u5408\u7406\uff0c\u540c\u65f6\u5408\u7406\u547d\u540d\u4ee3\u7801\u4e2d\u7684\u53d8\u91cf\u548c\u51fd\u6570\u3002 \u6700\u597d\u5728\u7f16\u7801\u4e4b\u524d\u5168\u9762\u8003\u8651\u6240\u6709\u53ef\u80fd\u7684\u8f93\u5165\uff0c\u786e\u4fdd\u5199\u51fa\u7684\u4ee3\u7801\u5728\u5b8c\u6210\u4e86 \u57fa\u672c\u529f\u80fd \u4e4b\u5916\uff0c\u8fd8\u8003\u8651 \u8fb9\u754c\u6761\u4ef6 \uff0c\u5e76\u505a\u597d\u4e86 \u9519\u8bef\u5904\u7406 \u3002\u53ea\u6709\u5168\u9762\u8003\u8651\u5230\u8fd9 3 \u4e2a\u65b9\u9762\u7684\u4ee3\u7801\u624d\u662f\u5b8c\u6574\u7684\u4ee3\u7801\u3002 \u53e6\u5916\uff0c\u8981\u786e\u4fdd\u81ea\u5df1\u5199\u51fa\u7684\u7a0b\u5e8f\u4e0d\u4f1a\u8f7b\u6613\u5d29\u6e83\u3002\u5e73\u65f6\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\uff0c \u5e94\u8058\u8005\u6700\u597d\u517b\u6210\u9632\u5fa1\u6027\u7f16\u7a0b\u7684\u4e60\u60ef \uff0c\u5728\u51fd\u6570\u5165\u53e3\u5224\u65ad\u8f93\u5165\u662f\u5426\u6709\u6548\uff0c\u5e76\u5bf9\u5404\u79cd\u65e0\u6548\u8f93\u5165\u505a\u597d\u76f8\u5e94\u7684\u5904\u7406\u3002 \u3010\u89c4\u8303\u6027\u3011\uff1a \u4e66\u5199\u6e05\u6670 \u5e03\u5c40\u6e05\u6670 \u547d\u540d\u5408\u7406 \u3010\u5b8c\u6574\u6027\u3011\uff1a \u5b8c\u6210\u57fa\u672c\u529f\u80fd \u8003\u8651\u8fb9\u754c\u6761\u4ef6 \u505a\u597d\u9519\u8bef\u5904\u7406 \u3010\u9c81\u68d2\u6027\u3011\uff1a \u91c7\u53d6\u9632\u5fa1\u6027\u7f16\u7a0b \u5904\u7406\u65e0\u6548\u7684\u8f93\u5165","title":"\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801"},{"location":"\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801/#_1","text":"\u9762\u8bd5\u5b98\u662f\u6839\u636e\u5e94\u8058\u8005\u5199\u51fa\u7684\u4ee3\u7801\u6765\u51b3\u5b9a\u662f\u5426\u5f55\u7528\u4ed6\u7684\u3002\u5982\u679c\u5e94\u8058\u8005\u4ee3\u7801\u5199\u5f97\u4e0d\u591f\u89c4\u8303\uff0c\u5f71\u54cd\u9762\u8bd5\u5b98\u9605\u8bfb\u4ee3\u7801\u7684\u5174\u81f4\uff0c\u90a3\u4e48\u9762\u8bd5\u5b98\u5c31\u4f1a\u9ed8\u9ed8\u5730\u51cf\u53bb\u51e0\u5206\u3002 \u3010\u5f71\u54cd\u56e0\u7d20\u3011\uff1a \u6e05\u6670\u7684\u4e66\u5199 \u6e05\u6670\u7684\u5e03\u5c40 \u5408\u7406\u7684\u547d\u540d \u3010\u6e05\u6670\u7684\u4e66\u5199\u3011\uff1a\u7edd\u5927\u90e8\u5206\u9762\u8bd5\u90fd\u662f\u8981\u6c42\u5e94\u8058\u8005\u5728\u767d\u7eb8\u6216\u8005\u767d\u677f\u4e0a\u4e66\u5199\u3002\u5728\u9762\u8bd5\u8fc7\u7a0b\u4e2d\u51cf\u6162\u5199\u5b57\u7684\u901f\u5ea6\uff0c\u5c3d\u91cf\u628a\u6bcf\u4e2a\u5b57\u6bcd\u5199\u6e05\u695a\u8fd8\u662f\u5f88\u6709\u5fc5\u8981\u7684\u3002\u4e0d\u7528\u62c5\u5fc3\u6ca1\u6709\u65f6\u95f4\u53bb\u5199\u4ee3\u7801\uff0c\u901a\u5e38\u7f16\u7a0b\u9762\u8bd5\u7684\u4ee3\u7801\u91cf\u90fd\u4e0d\u4f1a\u8d85\u8fc7 \u884c\uff0c\u4e66\u5199\u4e0d\u7528\u82b1\u591a\u5c11\u65f6\u95f4\uff0c \u5173\u952e\u662f\u5728\u5199\u4ee3\u7801\u4e4b\u524d\u5f62\u6210\u6e05\u6670\u7684\u601d\u8def\u5e76\u80fd\u628a\u601d\u8def\u7528\u7f16\u7a0b\u8bed\u8a00\u6e05\u695a\u5730\u4e66\u5199\u51fa\u6765 \u3002 \u3010\u6e05\u6670\u7684\u5e03\u5c40\u3011\uff1a\u4e66\u5199\u4ee3\u7801\u65f6\u9700\u8981\u6ce8\u610f\u5faa\u73af\u4ee5\u53ca\u5224\u65ad\uff0c\u903b\u8f91\u8f83\u590d\u6742\u65f6\uff0c\u7f29\u8fdb\u7684\u5c42\u6b21\u53ef\u80fd\u4f1a\u6bd4\u8f83\u591a\u3002\u5982\u679c\u5e03\u5c40\u4e0d\u591f\u6e05\u6670\uff0c\u7f29\u8fdb\u4e5f\u4e0d\u80fd\u4f53\u73b0\u4ee3\u7801\u7684\u903b\u8f91\uff0c\u90a3\u4e48\u9762\u8bd5\u5b98\u9762\u5bf9\u8fd9\u6837\u7684\u4ee3\u7801\u5c06\u4f1a\u5934\u660f\u8111\u6da8\u3002 \u3010\u5408\u7406\u7684\u547d\u540d\u3011\uff1a \u5f3a\u70c8\u5efa\u8bae\u5e94\u8058\u8005\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u7528\u5b8c\u6574\u7684\u82f1\u6587\u5355\u8bcd\u7ec4\u5408\u547d\u540d\u53d8\u91cf\u548c\u51fd\u6570 \u3002\u5982\u679c\u4e00\u773c\u80fd\u770b\u51fa\u53d8\u91cf\u3001\u51fd\u6570\u7684\u7528\u9014\uff0c\u5e94\u8058\u8005\u5c31\u80fd\u907f\u514d\u81ea\u5df1\u641e\u6df7\u6dc6\u800c\u72af\u4e00\u4e9b\u4f4e\u7ea7\u7684\u9519\u8bef\u3002\u540c\u65f6\u5408\u7406\u7684\u547d\u540d\u4e5f\u80fd\u8ba9\u9762\u8bd5\u5b98\u4e00\u773c\u5c31\u80fd\u8bfb\u61c2\u4ee3\u7801\u7684\u610f\u56fe\u3002","title":"\u4ee3\u7801\u7684\u89c4\u8303\u6027"},{"location":"\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801/#_2","text":"\u5728\u9762\u8bd5\u8fc7\u7a0b\u4e2d\uff0c\u9762\u8bd5\u5b98\u4f1a\u975e\u5e38\u5173\u6ce8\u5e94\u8058\u8005\u8003\u8651\u95ee\u9898\u662f\u5426\u5468\u5168\u3002\u9762\u8bd5\u5b98\u901a\u8fc7\u68c0\u67e5\u4ee3\u7801\u662f\u5426\u5b8c\u6574\u6765\u8003\u67e5\u5e94\u8058\u8005\u7684\u601d\u7ef4\u662f\u5426\u5168\u9762\u3002\u901a\u5e38\u4f1a\u68c0\u67e5\uff1a \u5e94\u8058\u8005\u7684\u4ee3\u7801\u662f\u5426\u5b8c\u6210\u4e86\u57fa\u672c\u529f\u80fd\uff1b \u8f93\u5165\u8fb9\u754c\u503c\u662f\u5426\u80fd\u5f97\u5230\u6b63\u786e\u7684\u8f93\u51fa\uff1b \u662f\u5426\u5bf9\u5404\u79cd\u4e0d\u5408\u89c4\u8303\u7684\u975e\u6cd5\u8f93\u5165\u505a\u51fa\u4e86\u5408\u7406\u7684\u9519\u8bef\u5904\u7406\u3002","title":"\u4ee3\u7801\u7684\u5b8c\u6574\u6027"},{"location":"\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801/#3","text":"\u5e94\u8058\u8005\u5728\u5199\u4ee3\u7801\u4e4b\u524d\uff0c\u9996\u5148\u8981\u628a\u53ef\u80fd\u7684\u8f93\u5165\u90fd\u60f3\u6e05\u695a\uff0c\u4ece\u800c\u907f\u514d\u5728\u7a0b\u5e8f\u4e2d\u51fa\u73b0\u5404\u79cd\u5404\u6837\u7684\u8d28\u91cf\u6f0f\u6d1e\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u7f16\u7801\u4e4b\u524d\u8981\u8003\u8651\u5355\u5143\u6d4b\u8bd5\u3002\u5982\u679c\u80fd\u591f\u8bbe\u8ba1\u5168\u9762\u7684\u5355\u5143\u6d4b\u8bd5\u7528\u4f8b\u5e76\u5728\u4ee3\u7801\u4e2d\u4f53\u73b0\u51fa\u6765\uff0c\u90a3\u4e48\u5199\u51fa\u7684\u4ee3\u7801\u81ea\u7136\u4e5f\u5c31\u662f\u5b8c\u6574\u6b63\u786e\u7684\u4e86\u3002 \u3010\u65b9\u9762\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5 \u8fb9\u754c\u6d4b\u8bd5 \u8d1f\u9762\u6d4b\u8bd5 \u3010\u529f\u80fd\u6d4b\u8bd5\u3011\uff1a\u9996\u5148\u8981\u4fdd\u8bc1\u5199\u51fa\u7684\u4ee3\u7801\u80fd\u591f\u5b8c\u6210\u9762\u8bd5\u5b98\u8981\u6c42\u7684\u57fa\u672c\u529f\u80fd\u3002\u5728\u8003\u8651\u529f\u80fd\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c\u8981\u5c3d\u91cf\u7a81\u7834\u5e38\u89c4\u601d\u7ef4\u7684\u9650\u5236\uff0c\u4ece\u9898\u76ee\u4e2d\u6316\u6398\u51fa\u66f4\u591a\u7684\u6f5c\u5728\u4fe1\u606f\u548c\u8981\u6c42\u3002 \u3010\u8fb9\u754c\u6d4b\u8bd5\u3011\uff1a\u5f88\u591a\u65f6\u5019\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\u90fd\u4f1a\u6709\u5faa\u73af\u6216\u8005\u9012\u5f52\u3002\u5982\u679c\u6211\u4eec\u7684\u4ee3\u7801\u57fa\u4e8e\u5faa\u73af\uff0c\u90a3\u4e48\u7ed3\u675f\u5faa\u73af\u7684\u8fb9\u754c\u6761\u4ef6\u662f\u5426\u6b63\u786e\uff1f\u5982\u679c\u57fa\u4e8e\u9012\u5f52\uff0c\u90a3\u4e48\u9012\u5f52\u7ec8\u6b62\u7684\u8fb9\u754c\u503c\u662f\u5426\u6b63\u786e\uff1f\u8fd9\u4e9b\u90fd\u662f\u8fb9\u754c\u6d4b\u8bd5\u65f6\u8981\u8003\u8651\u7684\u7528\u4f8b\u3002 \u3010\u8d1f\u9762\u6d4b\u8bd5\u3011\uff1a\u5f53\u8f93\u5165\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u65f6\u5019\u9700\u8981\u4f5c\u51fa\u5408\u7406\u7684\u9519\u8bef\u5904\u7406\u3002 \u6b64\u5916\uff0c\u5728\u8f6f\u4ef6\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u6c38\u8fdc\u4e0d\u53d8\u7684\u662f\u9700\u6c42\u4f1a\u4e00\u76f4\u6539\u53d8\u3002\u5982\u679c\u6211\u4eec\u5728\u9762\u8bd5\u7684\u65f6\u5019\u5199\u51fa\u7684\u4ee3\u7801\u80fd\u591f\u628a\u5c06\u6765\u9700\u6c42\u53ef\u80fd\u7684\u53d8\u5316\u90fd\u8003\u8651\u8fdb\u53bb\uff0c\u5728\u9700\u6c42\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\u80fd\u591f\u5c3d\u91cf\u51cf\u5c11\u4ee3\u7801\u6539\u52a8\u7684\u98ce\u9669\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5411\u9762\u8bd5\u5b98\u5c55\u793a\u4e86\u81ea\u5df1\u5bf9\u7a0b\u5e8f\u53ef\u6269\u5c55\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u7684\u7406\u89e3\u3002","title":"\u4ece 3 \u4e2a\u65b9\u9762\u786e\u4fdd\u4ee3\u7801\u7684\u5b8c\u6574\u6027"},{"location":"\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801/#16","text":"\u7ed9\u5b9a\u4e00\u4e2a double \u7c7b\u578b\u7684\u6d6e\u70b9\u6570 base \u548c int \u7c7b\u578b\u7684\u6574\u6570 exponent\u3002\u6c42 base \u7684 exponent \u6b21\u65b9\u3002 \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1abase \u548c exponent \u5206\u522b\u53d6\u6b63\u6570\u30010 \u548c\u8d1f\u6570\u3002 \u7279\u6b8a\u8f93\u5165\u5904\u7406\uff1a\u975e\u6574\u6570\u6b21\u65b9\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1apython ** \u5b9e\u73b0\u3002 def Power(base, exponent): if not isinstance(exponent, int): return None if base == 0: # 0 \u7684 0 \u6b21\u5e42\u6ca1\u6709\u610f\u4e49 if exponent == 0: return None return 0 return base ** exponent if __name__ == '__main__': base = 2.0 base2 = 0.0 base3 = -3.0 test_exponent1 = 5 test_exponent2 = 0 test_exponent3 = -3 test_exponent4 = 2.3 print(Power(base, test_exponent1)) print(Power(base2, test_exponent1)) print(Power(base3, test_exponent1)) print(Power(base, test_exponent2)) print(Power(base, test_exponent3)) print(Power(base3, test_exponent3)) print(Power(base, test_exponent4)) \u3010\u8bf4\u660e\u3011\uff1aPython \u7684 ** \u64cd\u4f5c\u7b26\u53ef\u4ee5\u5b9e\u73b0\u4e58\u65b9\uff0c\u5e76\u4e14\u652f\u6301\u6d6e\u70b9\u6570\u5e42\uff0c\u4f8b\u5982 5 ** 2.3 == 40.51641491731905 \u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u5f53 base = 0 \u4e14 exponent \u4e3a\u8d1f\u6570\u65f6\uff0c\u5047\u8bbe exponent \u4e3a -2\u3002 \u800c 0 \u7684\u4efb\u4f55\u6b21\u5e42\uff08\u9664 0\uff0c0 \u7684 0 \u6b21\u5e42\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\uff09\u90fd\u4e3a 0\uff0c\u5206\u6bcd\u4e3a 0 \u4f5c\u9664\u6cd5\u4f1a\u62a5\u9519\uff0c\u56e0\u6b64\u9700\u8981\u8fdb\u884c\u7279\u6b8a\u8f93\u5165\u5904\u7406\uff0c\u5728\u4ee3\u7801\u7684\u524d\u90e8\u52a0\u4e0a\uff1a if base == 0: return 0 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u4e2d\u89c4\u4e2d\u77e9\u7684\u505a\u6cd5\u3002 def Power(base, exponent): if not isinstance(exponent, int): return None if base == 0: # \u65e0\u610f\u4e49 if exponent == 0: return None return 0 result = 1 if exponent > 0: for i in range(exponent): result *= base else: for i in range(-exponent): result /= base return result \u3010\u8bf4\u660e\u3011\uff1a\u5176\u5b9e\u53ea\u662f\u5728\u524d\u4e00\u4e2a\u793a\u4f8b\u7684\u57fa\u7840\u4e0a\u5b9e\u73b0\u4e86 Python \u7684 ** \u64cd\u4f5c\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5229\u7528\u4e58\u65b9\u516c\u5f0f\u6765\u51cf\u5c11\u6c42\u6574\u6570\u6b21\u65b9\u7684\u6b21\u6570\u3002 def Power(base, exponent): # \u7279\u6b8a\u5904\u7406 if not isinstance(exponent, int): return None if base == 0: # \u65e0\u610f\u4e49 if exponent == 0: return None return 0 # \u5224\u65ad exponent \u7684\u6b63\u8d1f is_neg = True if exponent < 0 else False # \u5982\u679c\u662f\u8d1f\u6570\u5219\u53d6\u53cd if is_neg: exponent = -exponent if exponent & 0x1 == 0: result = loop_half_exponent(base, exponent) else: result = loop_half_exponent(base, exponent - 1) * base if is_neg: result = 1 / result return result def loop_half_exponent(base, exponent): if exponent == 0: return 1 if exponent == 1: return base result = base * base return loop_half_exponent(result, exponent >> 1) \u3010\u8bf4\u660e\u3011\uff1a\u5047\u8bbe\u8981\u8f93\u51fa\u7684 exponent \u4e3a 32\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u5b83\u7684 16 \u6b21\u65b9\uff0c\u90a3\u4e48\u53ea\u8981\u5728 16 \u6b21\u65b9\u7684\u57fa\u7840\u4e0a\u518d\u5e73\u65b9\u4e00\u6b21\u5c31\u53ef\u4ee5\u4e86\u3002\u800c 16 \u6b21\u65b9\u662f 8 \u6b21\u65b9\u7684\u5e73\u65b9\u3002\u8fd9\u6837\u4ee5\u6b64\u7c7b\u63a8\uff0c\u6211\u4eec\u6c42 32 \u6b21\u65b9\u53ea\u9700\u8981\u505a 5 \u6b21\u4e58\u6cd5\uff1a\u5148\u6c42\u5e73\u65b9\uff0c\u5728\u5e73\u65b9\u7684\u57fa\u7840\u4e0a\u6c42 4 \u6b21\u65b9\uff0c\u5728 4 \u6b21\u65b9\u7684\u57fa\u7840\u4e0a\u6c42 8 \u6b21\u65b9\uff0c\u5728 8 \u6b21\u65b9\u7684\u57fa\u7840\u4e0a\u6c42 16 \u6b21\u65b9\uff0c\u6700\u540e\u5728 16 \u6b21\u65b9\u7684\u57fa\u7840\u4e0a\u6c42 32 \u6b21\u65b9\u3002 \u3010\u7ec6\u8282\u3011\uff1a\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u6bd4\u4e58\u9664\u6cd5\u53ca\u6c42\u4f59\u8fd0\u7b97\u7684\u6548\u7387\u8981\u9ad8\u5f88\u591a\u3002 \u53f3\u79fb\u8fd0\u7b97\u7b26\u4ee3\u66ff\u4e86\u9664\u4ee5 2\u3002 \u4f4d\u4e0e\u8fd0\u7b97\u7b26\u4ee3\u66ff\u4e86\u6c42\u4f59\u8fd0\u7b97\u7b26\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u601d\u7ef4\u7684\u5168\u9762\u6027\uff0c\u4e0d\u8981\u5ffd\u89c6\u5e95\u6570\u4e3a 0 \u800c\u6307\u6570\u4e3a\u8d1f\u6570\u65f6\u7684\u9519\u8bef\u5904\u7406\u3002 \u5bf9\u6548\u7387\u8981\u6c42\u9ad8\u7684\u9762\u8bd5\u5b98\u8fd8\u4f1a\u8003\u67e5\u5e94\u8058\u8005\u5feb\u901f\u505a\u4e58\u65b9\u7684\u80fd\u529b\u3002","title":"\u9762\u8bd5\u9898 16\uff1a\u6570\u503c\u7684\u6574\u6570\u6b21\u65b9"},{"location":"\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801/#17-1-n","text":"\u8f93\u5165\u6570\u5b57 n\uff0c\u6309\u987a\u5e8f\u6253\u5370\u51fa\u4ece 1 \u5230\u6700\u5927\u7684 n \u4f4d\u5341\u8fdb\u5236\u6570\u3002\u6bd4\u5982\u8f93\u5165 3\uff0c\u5219\u6253\u5370\u51fa 1\u30012\u30013 \u4e00\u76f4\u5230\u6700\u5927\u7684 3 \u4f4d\u6570 999\u3002 \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1an \u4e3a\u6b63\u6574\u6570 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1an = 0\u3001n < 0\u3001n \u975e\u6574\u6570 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a def Print1ToMaxOfNDigits(n): if not isinstance(n, int) or n < 1: print('error!') return None max_num = 10 ** n for i in range(1, max_num): print(i) if __name__ == '__main__': Print1ToMaxOfNDigits(3) Print1ToMaxOfNDigits(0) Print1ToMaxOfNDigits(2.4) Print1ToMaxOfNDigits(-5) \u3010\u8bf4\u660e\u3011\uff1a\u8fd9\u9053\u9898\u76ee\u770b\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u4f46\u8fd9\u5f80\u5f80\u5bb9\u6613\u8df3\u8fdb\u9762\u8bd5\u5b98\u7684\u9677\u9631\u3002\u7531\u4e8e\u9898\u76ee\u4e2d\u6ca1\u6709\u89c4\u5b9a n \u7684\u8303\u56f4\uff0c\u5f53\u8f93\u5165\u7684 n \u5f88\u5927\u65f6\uff0c\u6c42\u6700\u5927\u7684 n \u4f4d\u6570\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6574\u578b\u6ea2\u51fa\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u5927\u6570\u95ee\u9898\u3002\u8fd9\u662f\u9762\u8bd5\u5b98\u5728\u8fd9\u9053\u9898\u91cc\u8bbe\u7f6e\u7684\u4e00\u4e2a\u5927\u9677\u9631\u3002 \u3010\u65b9\u6848\u3011\uff1a\u6700\u5e38\u7528\u4e5f\u662f\u6700\u5bb9\u6613\u7684\u65b9\u6cd5\u662f\u7528\u5b57\u7b26\u4e32\u6216\u8005\u6570\u7ec4\u6765\u8868\u8fbe\u5927\u6570\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u7528\u5217\u8868\u8868\u8fbe\u5927\u6570\u3002 def Print1ToMaxOfNDigits(n): # \u7279\u6b8a\u8f93\u5165\u5904\u7406 if not isinstance(n, int) or n < 1: print('error!') return None # \u521b\u5efa\u957f\u5ea6\u4e3a n \u7684\u5217\u8868 number_list = [0] * n while number_add(number_list): print_number(number_list) def number_add(number_list): bit = -1 n = len(number_list) while True: if abs(bit) > n: return False number_bit = number_list[bit] number_bit += 1 # print('number_bit:', number_bit) if number_bit == 10: number_list[bit] = 0 bit -= 1 else: number_list[bit] = number_bit break return True def print_number(number_list): number_str = \"\" pos_start = 0 for i in range(len(number_list)): if number_list[i] != 0: pos_start = i break for i in range(pos_start, len(number_list)): number_str += str(number_list[i]) print(number_str) if __name__ == '__main__': Print1ToMaxOfNDigits(3) \u3010\u8bf4\u660e\u3011\uff1a \u5148\u6839\u636e n \u521b\u5efa\u957f\u5ea6\u4e3a n \u7684\u5217\u8868\uff0c\u5217\u8868\u7684\u6bcf\u4e00\u4e2a\u4e0b\u6807\u4ee3\u8868\u6570\u5b57\u7684\u6bcf\u4e00\u4f4d\uff0c\u4f8b\u5982 [1, 2, 3]\uff0c\u4e0b\u6807 0 \u4ee3\u8868\u767e\u4f4d\uff0c\u4e0b\u6807 1 \u4ee3\u8868\u5341\u4f4d\u3002 \u5b9e\u73b0\u5217\u8868\u6a21\u62df\u6570\u5b57\u52a0\u6cd5\uff1a\u5bf9\u5217\u8868\u7684\u6700\u540e\u4e00\u4f4d\uff08\u56e0\u4e3a\u5217\u8868\u7684\u6700\u540e\u4e00\u4f4d\u4ee3\u8868\u4e2a\u4f4d\uff09\u6267\u884c\u52a0\u4e00\u64cd\u4f5c\uff0c\u5982\u679c\u6ee1\u8db3\u8fdb\u4f4d\u5219\u5bf9\u5217\u8868\u7684\u5012\u6570\u7b2c\u4e8c\u4f4d\u6267\u884c\u76f8\u540c\u7684\u64cd\u4f5c\uff0c\u76f4\u5230\u8d85\u8fc7 n \u7684\u957f\u5ea6\uff0c\u6b64\u65f6\u8fd4\u56de False\uff0c\u5426\u5219\u7acb\u5373\u8df3\u51fa\u5faa\u73af\uff0c\u5e76\u8fd4\u56de True\u3002 \u5b9e\u73b0\u5217\u8868\u62fc\u6210\u6570\u5b57\u6253\u5370\uff1a\u4ece\u5217\u8868\u5934\u90e8\u5f00\u59cb\u5411\u53f3\u904d\u5386\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u96f6\u7684\u4e0b\u6807\u3002\u7136\u540e\u5c06\u8be5\u4e0b\u6807\u540e\u7684\u5404\u9879\u6dfb\u52a0\u5230\u5b57\u7b26\u4e32\u53d8\u91cf\u4e2d\uff0c\u6700\u540e\u6253\u5370\u8be5\u53d8\u91cf\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u6570\u5b57\u6392\u5217\uff0c\u9012\u5f52\u5b9e\u73b0\u3002 def Print1ToMaxOfNDigits(n): if not isinstance(n, int) or n < 1: print('error!') return None loop_print('', n) def loop_print(num, n): if n < 1: # \u53bb\u9664\u9996\u4f4d\u7684\u96f6 i = 0 for i in range(len(num)): if num[i] != '0': break if num[i:] != '0': print(num[i:]) return \"\" for i in range(10): loop_print(num + str(i), n - 1) \u3010\u8bf4\u660e\u3011\uff1a n \u4f4d\u5341\u8fdb\u5236\u6570\u5176\u5b9e\u5c31\u662f n \u4e2a\u4ece 0 \u5230 9 \u7684\u5168\u6392\u5217\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u628a\u6570\u5b57\u7684\u6bcf\u4e00\u4f4d\u90fd\u4ece 0 \u5230 9 \u6392\u5217\u4e00\u904d\uff0c\u5c31\u5f97\u5230\u4e86\u6240\u6709\u7684\u5341\u8fdb\u5236\u6570\u3002\u53ea\u662f\u5728\u6253\u5370\u7684\u65f6\u5019\uff0c\u6392\u5728\u524d\u9762\u7684 0 \u4e0d\u6253\u5370\u51fa\u6765\u7f62\u4e86\u3002 \u5168\u6392\u5217\u7528\u9012\u5f52\u5f88\u5bb9\u6613\u8868\u8fbe\uff0c\u6570\u5b57\u7684\u6bcf\u4e00\u4f4d\u90fd\u53ef\u80fd\u662f 0~9 \u4e2d\u7684\u4e00\u4e2a\u6570\uff0c\u7136\u540e\u8bbe\u7f6e\u4e0b\u4e00\u4f4d\u3002\u9012\u5f52\u7ed3\u675f\u7684\u6761\u4ef6\u662f\u6211\u4eec\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u6570\u5b57\u7684\u6700\u540e\u4e00\u4f4d\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u89e3\u51b3\u5927\u6570\u95ee\u9898\u7684\u80fd\u529b\u3002\u9762\u8bd5\u5b98\u51fa\u8fd9\u9053\u9898\u76ee\u7684\u65f6\u5019\uff0c\u5979\u671f\u671b\u5e94\u8058\u8005\u80fd\u610f\u8bc6\u5230\u8fd9\u662f\u4e00\u4e2a\u5927\u6570\u95ee\u9898\uff0c\u540c\u4e8b\u8fd8\u671f\u5f85\u5e94\u8058\u8005\u80fd\u5b9a\u4e49\u5408\u9002\u7684\u6570\u636e\u8868\u793a\u65b9\u5f0f\u6765\u89e3\u51b3\u5927\u6570\u95ee\u9898\u3002 \u9762\u8bd5\u5b98\u8fd8\u5c06\u5173\u6ce8\u5e94\u8058\u8005\u6253\u5370\u6570\u5b57\u65f6\u4f1a\u4e0d\u4f1a\u6253\u5370\u51fa\u4f4d\u4e8e\u6570\u5b57\u524d\u9762\u7684 0\u3002\u8fd9\u91cc\u80fd\u4f53\u73b0\u51fa\u5e94\u8058\u8005\u5728\u8bbe\u8ba1\u5f00\u53d1\u8f6f\u4ef6\u65f6\u662f\u4e0d\u662f\u4f1a\u8003\u8651\u7528\u6237\u7684\u4f7f\u7528\u4e60\u60ef\u3002\u901a\u5e38\u6211\u4eec\u7684\u8f6f\u4ef6\u8bbe\u8ba1\u548c\u5f00\u53d1\u9700\u8981\u7b26\u5408\u5927\u90e8\u5206\u7528\u6237\u7684\u4eba\u673a\u4ea4\u4e92\u4e60\u60ef\u3002","title":"\u9762\u8bd5\u9898 17\uff1a\u6253\u5370\u4ece 1 \u5230\u6700\u5927\u7684 n \u4f4d\u6570"},{"location":"\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801/#18","text":"\u5728 O(1) \u65f6\u95f4\u5185\u5220\u9664\u94fe\u8868\u8282\u70b9\u3002\u7ed9\u5b9a\u5355\u5411\u94fe\u8868\u7684\u5934\u6307\u9488\u548c\u4e00\u4e2a\u8282\u70b9\u6307\u9488\uff0c\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5728 O(1) \u65f6\u95f4\u5185\u5220\u9664\u8be5\u8282\u70b9\u3002 \u3010\u94fe\u8868\u7ed3\u6784\u3011\uff1a class Node: def __init__(self, value): self.value = value self.next = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u5220\u9664\u5934\u8282\u70b9\u3001\u5220\u9664\u4e2d\u95f4\u67d0\u8282\u70b9\u3001\u5220\u9664\u5c3e\u8282\u70b9\u3001\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u94fe\u8868\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a def DeleteNode(head, node_to_be_deleted): if not head or not node_to_be_deleted: return None node_next = None if node_to_be_deleted.next: node_next = node_to_be_deleted.next node_to_be_deleted.value = node_next.value node_to_be_deleted.next = node_next.next else: if head == node_to_be_deleted: return None node = head while node: if node.next == node_to_be_deleted: node.next = None break node = node.next del node_next return head def test_1(): node_a = Node('a') node_b = Node('b') node_c = Node('c') node_a.next = node_b node_b.next = node_c return DeleteNode(node_a, node_b) def test_2(): node_a = Node('a') node_b = Node('b') node_c = Node('c') node_a.next = node_b node_b.next = node_c return DeleteNode(node_a, node_a) def test_3(): node_a = Node('a') node_b = Node('b') node_c = Node('c') node_a.next = node_b node_b.next = node_c return DeleteNode(node_a, node_c) def test_4(): node_a = Node('a') return DeleteNode(node_a, node_a) if __name__ == '__main__': result_1 = test_1() result_2 = test_2() result_3 = test_3() result_4 = test_4() result_5 = DeleteNode(None, None) \u3010\u8bf4\u660e\u3011\uff1a \u5728\u5355\u5411\u94fe\u8868\u4e2d\u5220\u9664\u4e00\u4e2a\u8282\u70b9\uff0c\u5e38\u89c4\u7684\u505a\u6cd5\u65e0\u7591\u662f\u4ece\u94fe\u8868\u7684\u5934\u8282\u70b9\u5f00\u59cb\uff0c\u987a\u5e8f\u904d\u5386\u67e5\u627e\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u5e76\u5728\u94fe\u8868\u4e2d\u5220\u9664\u8be5\u8282\u70b9\u3002\u7531\u4e8e\u9700\u8981\u987a\u5e8f\u67e5\u627e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u81ea\u7136\u662f O(n)\u3002\u4e4b\u6240\u4ee5\u9700\u8981\u4ece\u5934\u5f00\u59cb\u67e5\u627e\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u5f97\u5230\u5c06\u88ab\u5220\u9664\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u3002\u5728\u5355\u5411\u94fe\u8868\u4e2d\uff0c\u8282\u70b9\u6ca1\u6709\u6307\u5411\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\uff0c\u6240\u4ee5\u53ea\u597d\u4ece\u94fe\u8868\u7684\u5934\u8282\u70b9\u5f00\u59cb\u987a\u5e8f\u67e5\u627e\u3002 \u5176\u5b9e\u4e0d\u4e00\u5b9a\u9700\u8981\u5f97\u5230\u88ab\u5220\u9664\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u3002\u6211\u4eec\u53ea\u8981\u628a\u8981\u5220\u9664\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u5185\u5bb9\u8986\u76d6\u8981\u5220\u9664\u8282\u70b9\u7684\u5185\u5bb9\uff0c\u518d\u628a\u4e0b\u4e00\u4e2a\u8282\u70b9\u5220\u9664\uff0c\u5c31\u76f8\u5f53\u4e8e\u628a\u5f53\u524d\u9700\u8981\u5220\u9664\u7684\u8282\u70b9\u7ed9\u5220\u9664\u4e86\u3002 \u3010\u6ce8\u610f\u3011\uff1a \u82e5\u5220\u9664\u8282\u70b9\u4e3a\u94fe\u8868\u7684\u5c3e\u8282\u70b9\uff0c\u5373\u6ca1\u6709\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u5219\u5fc5\u987b\u4ece\u5934\u8282\u70b9\u5f00\u59cb\u5faa\u73af\u904d\u5386\u5230\u8be5\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u5b8c\u6210\u5220\u9664\u64cd\u4f5c\u3002 \u82e5\u94fe\u8868\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\uff0c\u5219\u5220\u9664\u8be5\u8282\u70b9\uff0c\u5e76\u5c06\u5934\u8282\u70b9\u8bbe\u7f6e\u4e3a None\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1a\u5bf9\u4e8e n - 1 \u4e2a\u975e\u5c3e\u8282\u70b9\u800c\u8a00\uff0c\u53ef\u4ee5\u5728 O(1) \u65f6\u95f4\u5185\u5b8c\u6210\u5220\u9664\u64cd\u4f5c\u3002\u5bf9\u4e8e\u5c3e\u8282\u70b9\u800c\u8a00\uff0c\u7531\u4e8e\u4ecd\u7136\u9700\u8981\u987a\u5e8f\u67e5\u627e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\u3002\u56e0\u6b64\uff0c\u603b\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u662f [(n - 1) x O(1) + O(n)] / n\uff0c\u7ed3\u679c\u8fd8\u662f O(1)\u3002 \u3010\u5176\u4ed6\u3011\uff1a\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e0a\u8ff0\u4ee3\u7801\u4ecd\u7136\u4e0d\u591f\u5b8c\u5584\uff0c\u56e0\u4e3a\u5b83\u57fa\u4e8e\u4e00\u4e2a\u5047\u8bbe\uff1a\u8981\u5220\u9664\u7684\u8282\u70b9\u7684\u786e\u5728\u94fe\u8868\u4e2d\u3002\u6211\u4eec\u9700\u8981 O(n) \u7684\u65f6\u95f4\u624d\u80fd\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u5305\u542b\u67d0\u4e00\u8282\u70b9\u3002\u53d7\u5230 O(1) \u65f6\u95f4\u7684\u9650\u5236\uff0c\u6211\u4eec\u4e0d\u5f97\u4e0d\u786e\u4fdd\u8282\u70b9\u5728\u94fe\u8868\u4e2d\u7684\u8d23\u4efb\u63a8\u7ed9\u4e86\u51fd\u6570 DeleteNode \u7684\u8c03\u7528\u8005\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u94fe\u8868\u7684\u7f16\u7a0b\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u7684\u521b\u65b0\u601d\u7ef4\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u601d\u7ef4\u7684\u5168\u9762\u6027\u3002","title":"\u9762\u8bd5\u9898 18\uff1a\u5220\u9664\u94fe\u8868\u7684\u8282\u70b9"},{"location":"\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801/#18-2","text":"\u5728\u4e00\u4e2a\u6392\u5e8f\u7684\u94fe\u8868\u4e2d\uff0c\u5b58\u5728\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u8bf7\u5220\u9664\u8be5\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u91cd\u590d\u7684\u7ed3\u70b9\u4e0d\u4fdd\u7559\uff0c\u8fd4\u56de\u94fe\u8868\u5934\u6307\u9488\u3002 \u4f8b\u5982\uff0c\u94fe\u8868 1->2->3->3->4->4->5 \u5904\u7406\u540e\u4e3a 1->2->5\u3002 \u3010\u94fe\u8868\u7ed3\u6784\u3011\uff1a class ListNode: def __init__(self, x): self.val = x self.next = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u5b58\u6709\u91cd\u590d\u8282\u70b9\uff08\u5934\u90e8\u3001\u4e2d\u95f4\u3001\u5c3e\u90e8\uff09\u7684\u94fe\u8868\uff0c\u65e0\u91cd\u590d\u8282\u70b9\u7684\u94fe\u8868\uff0c\u5355\u4e2a\u8282\u70b9\u7684\u94fe\u8868\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u94fe\u8868\u3001\u5168\u4e3a\u91cd\u590d\u8282\u70b9\u7684\u94fe\u8868\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5e38\u89c4\u5b9e\u73b0\u3002 def deleteDuplication(pHead): if not pHead: return None node_visited = {} node = pHead while node: if node.val in node_visited: node_visited[node.val] += 1 else: node_visited[node.val] = 1 node = node.next print('node_visited:', node_visited) head_node = ListNode(0) head_node.next = pHead node = pHead prev_node = head_node while node: if node_visited[node.val] > 1: prev_node.next = node.next node = node.next else: prev_node, node = node, node.next return head_node.next if __name__ == '__main__': l1 = get_linklist([1, 2, 3, 3, 4, 4, 5]) result1 = deleteDuplication(l1.root) l2 = get_linklist([1, 1, 2, 2, 3, 4, 5]) result2 = deleteDuplication(l2.root) l3 = get_linklist([1, 2, 3, 4, 4, 5, 5]) result3 = deleteDuplication(l3.root) l4 = get_linklist([1, 2, 3, 4, 5]) result4 = deleteDuplication(l4.root) l5 = get_linklist([]) result5 = deleteDuplication(l5.root) l6 = get_linklist([1]) result6 = deleteDuplication(l6.root) l7 = get_linklist([1, 1, 2, 2]) result7 = deleteDuplication(l7.root) \u3010\u8bf4\u660e\u3011\uff1a\u9996\u5148\u904d\u5386\u94fe\u8868\uff0c\u83b7\u53d6\u6bcf\u4e2a\u8282\u70b9\u7684\u6b21\u6570\u3002\u518d\u904d\u5386\u94fe\u8868\u7684\u8fc7\u7a0b\u4e2d\u5c06\u91cd\u590d\u7684\u8282\u70b9\u4f9d\u6b21\u5220\u9664\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1aO(2n) \u7a7a\u95f4\u6548\u7387\uff1a\u9700\u8981\u501f\u52a9\u989d\u5916\u7684 node_visited \u5b57\u5178\u6765\u5b58\u50a8\u91cd\u590d\u8282\u70b9\u7684\u60c5\u51b5\uff0c\u6700\u574f\u7684\u60c5\u51b5\u662f\u6ca1\u6709\u91cd\u590d\u8282\u70b9\uff0c\u56e0\u6b64\u9700\u8981 n \u957f\u5ea6\u7684\u5b57\u5178\uff0c\u7a7a\u95f4\u6548\u7387\u4e3a O(n)\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5bf9\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u5b9e\u73b0\u7684\u6539\u8fdb\u3002 if not pHead: return None node_visited = {} node = pHead while node: if node.val in node_visited: node_visited[node.val] += 1 else: node_visited[node.val] = 1 node = node.next print('node_visited:', node_visited) node_prev = None node = pHead while node: if node_visited[node.val] > 1: node_next = node.next # \u627e\u5230\u4e0d\u91cd\u590d\u7684\u8282\u70b9 while node_next: if node_visited[node_next.val] == 1: break node_next = node_next.next # \u5230\u8fbe\u5c3e\u8282\u70b9 if not node_next: if not node_prev: return None else: node_prev.next = None else: node.val, node.next = node_next.val, node_next.next node_prev, node = node, node.next return pHead \u3010\u8bf4\u660e\u3011\uff1a\u524d\u9762\u6b65\u9aa4\u76f8\u540c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5220\u9664\u91cd\u590d\u8282\u70b9\u7684\u8fc7\u7a0b\u3002\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u53d1\u73b0\u5f53\u524d\u8282\u70b9\u4e3a\u91cd\u590d\u8282\u70b9\uff0c\u5219\u5bfb\u627e\u4e0b\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u8282\u70b9\uff0c\u5c06\u8be5\u8282\u70b9\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u82e5\u5f53\u524d\u8282\u70b9\u540e\u9762\u7684\u8282\u70b9\u5168\u4e3a\u91cd\u590d\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5c06\u5f53\u524d\u8282\u70b9\u53ca\u540e\u9762\u7684\u8282\u70b9\u5168\u90e8\u5220\u9664\uff0c\u56e0\u6b64\u9700\u8981\u501f\u52a9 node_prev\uff0c\u901a\u8fc7 node_prev.next = None\uff0c\u6765\u5220\u9664\u540e\u7eed\u7684\u8282\u70b9\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u501f\u52a9\u9898\u76ee\u6761\u4ef6\u2014\u2014\u6392\u5e8f\u3002","title":"\u9762\u8bd5\u9898 18-2\uff1a\u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u8282\u70b9"},{"location":"\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801/#19","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5339\u914d\u5305\u62ec '.' \u548c ' ' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u6a21\u5f0f\u4e2d\u7684\u5b57\u7b26 '.' \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c ' ' \u8868\u793a\u5b83\u524d\u9762\u7684\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b0\u4efb\u610f\u6b21\uff08\u5305\u542b0\u6b21\uff09\u3002 \u5728\u672c\u9898\u4e2d\uff0c\u5339\u914d\u662f\u6307\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u5339\u914d\u6574\u4e2a\u6a21\u5f0f\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32 \"aaa\" \u4e0e\u6a21\u5f0f \"a.a\" \u548c \"ab ac a\" \u5339\u914d\uff0c\u4f46\u662f\u4e0e \"aa.a\" \u548c \"ab*a\" \u5747\u4e0d\u5339\u914d\u3002 \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u8f93\u5165\u5b57\u7b26\u4e32\u548c\u6a21\u5f0f\u5b57\u7b26\u4e32\u4e3a None\uff0c\u6216\u7a7a\u5b57\u7b26\u4e32\u3002 \u529f\u80fd\u6d4b\u8bd5\uff1a\u6a21\u5f0f\u5b57\u7b26\u4e32\u5305\u542b\u666e\u901a\u5b57\u7b26\u3001'.'\u3001'*'\uff1b\u6a21\u5f0f\u5b57\u7b26\u4e32\u548c\u8f93\u5165\u5b57\u7b26\u4e32\u5339\u914d/\u4e0d\u5339\u914d\u3002 test_s1 = 'aaa' test_p1 = 'a.a' print(match(test_s1, test_p1)) test_s2 = '' test_p2 = 'a.a' print(match(test_s2, test_p2)) test_p3 = 'a*a' print(match(test_s1, test_p3)) test_p4 = 'ab*ac*a' print(match(test_s1, test_p4)) test_p5 = 'aa.a' print(match(test_s1, test_p5)) test_s3 = '' test_p6 = 'c*' print(match(test_s3, test_p6)) test_p7 = '.*' print(match(test_s3, test_p7)) print(match('a', test_p7)) \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a def match(s, pattern): # write code here if (len(s) == 0 and len(pattern) == 0): return True if (len(s) > 0 and len(pattern) == 0): return False if (len(pattern) > 1 and pattern[1] == '*'): if (len(s) > 0 and (s[0] == pattern[0] or pattern[0] == '.')): return (self.match(s, pattern[2:]) or self.match(s[1:], pattern[2:]) or self.match(s[1:], pattern)) else: return self.match(s, pattern[2:]) if (len(s) > 0 and (pattern[0] == '.' or pattern[0] == s[0])): return self.match(s[1:], pattern[1:]) return False \u3010\u8bf4\u660e\u3011\uff1a\u5177\u4f53\u5185\u5bb9\u53ef\u53c2\u8003\u300a\u5251\u6307offer\u300bP124~P125 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u5b57\u7b26\u4e32\u7684\u7f16\u7a0b\u80fd\u529b\uff1b \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u7406\u89e3\uff1b \u8003\u67e5\u5e94\u8058\u8005\u601d\u7ef4\u7684\u5168\u9762\u6027\u3002","title":"\u9762\u8bd5\u9898 19\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d"},{"location":"\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801/#20","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u8868\u793a\u6570\u503c\uff08\u5305\u62ec\u6574\u6570\u548c\u5c0f\u6570\uff09\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32 \"+100\", \"5e2\", \"-123\", \"3.1416\" \u548c \"-1E-16\" \u90fd\u8868\u793a\u6570\u503c\u3002 \u4f46\u662f \"12e\", \"1a3.14\", \"1.2.3\", \"+-5\" \u548c \"12e+4.3\" \u90fd\u4e0d\u662f\u3002 \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a+100\u30015e2\u3001-123\u30013.1416\u3001-1E-16\u30013.14e-2\u300112e\u30011a3.14\u30011.2.3\u3001+-5\u300112e+4.3\u3001e+4.3\u300112e+4\u3001-012e+4\u3001010 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u975e\u5b57\u7b26\u4e32\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a def isNumeric(s): char_number = ('1', '2', '3', '4', '5', '6', '7', '8', '9', '0') char_index = 0 has_e, has_dot, is_first = False, False, True for char in s: if char in char_number: if is_first and char == '0' and s[char_index + 1] != '.': return False is_first = False char_index += 1 elif char == '.': # e \u540e\u63a5\u6574\u6570 if has_e: return False # \u51fa\u73b0\u4e24\u4e2a\u5c0f\u6570\u70b9\uff0c\u5219\u6709\u9519 if has_dot: return False has_dot = True char_index += 1 elif char == '+' or char == '-': if char_index == 0 or s[char_index - 1] == 'e' or s[char_index - 1] == 'E': char_index += 1 else: return False elif char == 'e' or char == 'E': # \u51fa\u73b0\u4e24\u6b21 e\uff0c\u5219\u8868\u660e\u6709\u9519 if has_e: return False # e \u7684\u524d\u65b9\u5fc5\u987b\u8981\u6709\u6570\u503c if char_index - 1 > 0 and s[char_index - 1] not in char_number: return False # \u5426\u5219\u8868\u660e\u5f53\u524d\u5b58\u5728 e has_e = True char_index += 1 # \u82e5\u4ee5\u4e0a\u60c5\u51b5\u90fd\u4e0d\u5b58\u5728\uff0c\u5219\u8868\u660e\u6709\u5176\u4ed6\u5b57\u7b26\uff0c\u8fd4\u56de False else: return False if s[-1] == '+' or s[-1] == '-' or s[-1] == 'e' or s[-1] == 'E': return False return True if __name__ == '__main__': test_s1 = '+100' print(isNumeric(test_s1)) test_s2 = '5e2' print(isNumeric(test_s2)) test_s3 = '-123' print(isNumeric(test_s3)) test_s4 = '3.1416' print(isNumeric(test_s4)) test_s5 = '-1E-16' print(isNumeric(test_s5)) test_s6 = '12e' print(isNumeric(test_s6)) test_s7 = '1a3.14' print(isNumeric(test_s7)) test_s8 = '1.2.3' print(isNumeric(test_s8)) test_s9 = '+-5' print(isNumeric(test_s9)) test_s10 = '12e+4.3' print(isNumeric(test_s10)) test_s11 = 'e+4.3' print(isNumeric(test_s11)) test_s12 = '12e+4' print(isNumeric(test_s12)) test_s13 = '-012e+4' print(isNumeric(test_s13)) test_s14 = '010' print(isNumeric(test_s14)) test_s15 = '0.123' print(isNumeric(test_s15)) \u3010\u8bf4\u660e\u3011\uff1a [0~9]\uff1a\u7b2c\u4e00\u4e2a\u6570\u503c\u4e0d\u80fd\u4e3a '0'\uff0c\u4ec5\u6709\u540e\u9762\u4e3a\u5c0f\u6570\u70b9\u624d\u884c\uff0c\u5373 0.123\u3002 '.'\uff1a\u5c0f\u6570\u70b9\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\uff0c\u4e14\u5c0f\u6570\u70b9\u4e0d\u80fd\u51fa\u73b0\u5728 e \u7684\u540e\u9762\u3002 '+' or '-'\uff1a\u6b63\u8d1f\u53f7\u53ea\u80fd\u51fa\u73b0\u5728\u7b2c\u4e00\u4f4d\u6216\u8005\u5728 e\uff08E\uff09\u7684\u540e\u9762\u3002 'e' or 'E'\uff1a\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\uff0c\u4e14\u524d\u540e\u5fc5\u987b\u5b58\u5728\u6570\u503c\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 def isNumeric(s): pattern = re.compile('[+-]?\\d*(\\.\\d+)?([eE][+-]?\\d+)?') return len(s) == pattern.match(s).end() \u3010\u8bf4\u660e\u3011\uff1a\u5206\u4e3a\u4e09\u90e8\u5206\uff0c\u6574\u6570\u3001\u5c0f\u6570\u4ee5\u53ca\u6307\u6570\u3002 \u6574\u6570\uff1a[+-]?\\d*\u3002 \u5c0f\u6570\uff1a\u53ef\u9009 (.\\d+)?\uff0c\u5207\u8bb0 . \u9700\u8981\u8f6c\u4e49\uff0c\u56e0\u4e3a . \u662f\u4efb\u610f\u5b57\u7b26\u3002 \u6307\u6570\uff1a\u53ef\u9009 ([eE][+-]?\\d+)?\u3002 \u6b64\u5916\uff0c\u5728\u8fd9\u79cd\u65b9\u5f0f\u4e0b\uff0c010 \u4e5f\u89c6\u4f5c\u6b63\u786e\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u5b57\u7b26\u4e32\u7684\u7f16\u7a0b\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u95ee\u9898\u7684\u80fd\u529b\u3002\u9762\u8bd5\u5b98\u5e0c\u671b\u5e94\u8058\u8005\u80fd\u591f\u4ece\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u503c\u4e2d\u5206\u6790\u51fa\u89c4\u5f8b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u601d\u7ef4\u7684\u5168\u9762\u6027\u3002\u5e94\u8058\u8005\u8981\u5168\u9762\u8003\u8651\u6570\u503c\u6574\u6570\u3001\u5c0f\u6570\u3001\u6307\u6570\u90e8\u5206\u7684\u7279\u70b9\u3002","title":"\u9762\u8bd5\u9898 20\uff1a\u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32"},{"location":"\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801/#21","text":"\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u8c03\u6574\u8be5\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u6240\u6709\u7684\u5947\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u524d\u534a\u90e8\u5206\uff0c\u6240\u6709\u7684\u5076\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u540e\u534a\u90e8\u5206\uff0c\u5e76\u4fdd\u8bc1\u5947\u6570\u548c\u5947\u6570\uff0c\u5076\u6570\u548c\u5076\u6570\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002 \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u7b26\u5408\u8981\u6c42\u7684\u6570\u7ec4\u3001\u5b8c\u5168\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u6570\u7ec4\u3001\u5947\u6570\u957f\u5ea6\u7684\u6570\u7ec4\u3001\u5076\u6570\u957f\u5ea6\u7684\u6570\u7ec4\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6570\u7ec4\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u904d\u5386 + \u989d\u5916\u7a7a\u95f4\u3002 def reOrderArray(array): array_even = [] odd_pos = 0 for item in array: if item & 0x01 == 0: array_even.append(item) else: array[odd_pos] = item odd_pos += 1 for item in array_even: array[odd_pos] = item odd_pos += 1 if __name__ == '__main__': # \u7279\u6b8a\u8f93\u5165\u5904\u7406\uff1a\u7a7a\u6570\u7ec4 test_array_1 = [] reOrderArray(test_array_1) print(test_array_1) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u5076\u6570\u957f\u5ea6 test_array_2 = [1, 2, 4, 3, 6, 7] reOrderArray(test_array_2) print(test_array_2) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u5947\u6570\u957f\u5ea6 test_array_2_2 = [1, 2, 4, 3, 6, 7, 8] reOrderArray(test_array_2_2) print(test_array_2_2) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u5df2\u7ecf\u7b26\u5408\u8981\u6c42 test_array_3 = [1, 3, 5, 2, 4, 6] reOrderArray(test_array_3) print(test_array_3) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u5b8c\u5168\u4e0d\u7b26\u5408\u8981\u6c42 test_array_4 = [2, 4, 6, 1, 3, 5] reOrderArray(test_array_4) print(test_array_4) \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1a\u7531\u4e8e\u9700\u8981\u904d\u5386\u4e00\u6b21\u6570\u7ec4\u548c\u65b0\u521b\u5efa\u7684\u5217\u8868\uff0c\u56e0\u6b64\u9700\u8981\u65f6\u95f4 O(n)\u3002 \u7a7a\u95f4\u6548\u7387\uff1a\u9700\u8981\u521b\u5efa\u989d\u5916\u7684\u5217\u8868\uff0c\u6700\u574f\u7684\u60c5\u51b5\u4e0b\u662f\u6570\u7ec4\u5168\u4e3a\u5076\u6570\uff0c\u56e0\u6b64\u9700\u8981 O(n) \u957f\u5ea6\u7684\u7a7a\u95f4\u3002 \u3010\u6ce8\u610f\u3011\uff1a\u725b\u5ba2\u7f51\u4e0a\u7684\u9898\u76ee\u8981\u6c42\u548c\u4e66\u672c\u6709\u51fa\u5165\uff0c\u65b0\u589e\u4e86 \u5947\u6570\u95f4\u3001\u5076\u6570\u95f4\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8 \u7684\u8981\u6c42\u3002\u4e0d\u8fc7\u5bf9\u4e8e\u540e\u7eed\u7684\u6269\u5c55\u8981\u6c42\u662f\u53ef\u4ee5\u5b9e\u73b0\u7684\u3002 - \u8d1f\u6570\u5728\u975e\u8d1f\u6570\u7684\u524d\u65b9\u3002 if item / param < 0: array_even.append(item) test_array = [-1, 3, -2, 6, -7, 8] reOrderArray(test_array, -1) print(test_array) \u88ab 3 \u6574\u9664\u7684\u6570\u653e\u5728\u4e0d\u80fd\u88ab 3 \u6574\u9664\u7684\u6570\u524d\u9762\u3002 if item % param != 0: array_even.append(item) test_array = [3, 4, 5, 6, 8, 9] reOrderArray(test_array, 3) print(test_array) \u5b9e\u9645\u4e0a\uff0c\u5947\u6570\u548c\u5076\u6570\u662f\u4e0a\u8ff0\u4ee3\u7801\u7684\u4e00\u4e2a\u7279\u4f8b\uff0c\u5373 param == 2\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u4fee\u6539 != \u548c == \u6765\u8c03\u6574\u524d\u540e\u987a\u5e8f\u3002 \u3010\u5efa\u8bae\u3011\uff1a\u5982\u679c\u9762\u8bd5\u5b98\u4e0d\u65ad\u5730\u95ee\u4f60\u4e00\u9053\u9898\u76ee\u5728\u4e0d\u540c\u6761\u4ef6\u4e0b\u8be5\u5982\u4f55\u5904\u7406\u65f6\uff0c\u4f60\u8981\u7acb\u5373\u53cd\u5e94\u8fc7\u6765\uff0c\u9762\u8bd5\u5b98\u671f\u5f85\u6211\u4eec\u63d0\u4f9b\u7684\u4e0d\u4ec5\u4ec5\u662f\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\u7684\u529e\u6cd5\uff0c\u800c\u662f\u89e3\u51b3\u4e00\u7cfb\u5217\u540c\u7c7b\u95ee\u9898\u7684\u901a\u7528\u529e\u6cd5\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u7684\u5feb\u901f\u601d\u7ef4\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u6269\u5c55\u6027\u7684\u7406\u89e3\uff0c\u8981\u6c42\u5e94\u8058\u8005\u5199\u51fa\u7684\u4ee3\u7801\u5177\u6709\u53ef\u91cd\u7528\u6027\u3002","title":"\u9762\u8bd5\u9898 21\uff1a\u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762"},{"location":"\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801/#_3","text":"\u9c81\u68d2\u662f\u82f1\u6587 Robust \u7684\u97f3\u8bd1\uff0c\u6709\u65f6\u4e5f\u7ffb\u8bd1\u6210\u5065\u58ee\u6027\u3002\u6240\u8c13\u7684\u9c81\u68d2\u6027\u662f\u6307\u7a0b\u5e8f\u80fd\u591f\u5224\u65ad\u8f93\u5165\u662f\u5426\u5408\u4e4e\u89c4\u8303\u8981\u6c42\uff0c\u5e76\u5bf9\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u8f93\u5165\u4e88\u4ee5\u5408\u7406\u7684\u5904\u7406\u3002 \u5bb9\u9519\u6027\u662f\u9c81\u68d2\u6027\u7684\u4e00\u4e2a\u91cd\u8981\u4f53\u73b0\u3002\u4e0d\u9c81\u68d2\u7684\u8f6f\u4ef6\u5728\u53d1\u751f\u5f02\u5e38\u4e8b\u4ef6\u7684\u65f6\u5019\uff0c\u6bd4\u5982\u7528\u6237\u8f93\u5165\u9519\u8bef\u7684\u7528\u6237\u540d\u3001\u8bd5\u56fe\u6253\u5f00\u7684\u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u8005\u7f51\u7edc\u4e0d\u80fd\u8fde\u63a5\uff0c\u5c31\u4f1a\u51fa\u73b0\u4e0d\u53ef\u9884\u89c1\u7684\u8be1\u5f02\u884c\u4e3a\uff0c\u6216\u8005\u5e72\u8106\u6574\u4e2a\u8f6f\u4ef6\u5d29\u6e83\u3002 \u7531\u4e8e\u9c81\u68d2\u6027\u5bf9\u8f6f\u4ef6\u5f00\u53d1\u975e\u5e38\u91cd\u8981\uff0c\u6240\u4ee5\u9762\u8bd5\u5b98\u5728\u62db\u8058\u7684\u65f6\u5019\u5bf9\u5e94\u8058\u8005\u5199\u51fa\u7684\u4ee3\u7801\u662f\u5426\u9c81\u68d2\u4e5f\u975e\u5e38\u5173\u6ce8\u3002 \u63d0\u9ad8\u4ee3\u7801\u7684\u9c81\u68d2\u6027\u7684\u6709\u6548\u9014\u5f84\u662f\u8fdb\u884c\u9632\u5fa1\u6027\u7f16\u7a0b \u3002 \u3010\u9632\u5fa1\u6027\u7f16\u7a0b\u3011\uff1a\u9884\u89c1\u5728\u4ec0\u4e48\u5730\u65b9\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\uff0c\u5e76\u4e3a\u8fd9\u4e9b\u53ef\u80fd\u51fa\u73b0\u7684\u95ee\u9898\u5236\u5b9a\u5904\u7406\u65b9\u5f0f\u3002 \u5728\u9762\u8bd5\u65f6\uff0c\u6700\u7b80\u5355\u4e5f\u6700\u5b9e\u7528\u7684\u9632\u5fa1\u6027\u7f16\u7a0b\u5c31\u662f\u5728\u51fd\u6570\u5165\u53e3\u6dfb\u52a0\u4ee3\u7801\u4ee5\u9a8c\u8bc1\u7528\u6237\u8f93\u5165\u662f\u5426\u7b26\u5408\u8981\u6c42\u3002\u5f53\u7136\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u4e0e\u9c81\u68d2\u6027\u76f8\u5173\u7684\u95ee\u9898\u90fd\u53ea\u662f\u68c0\u67e5\u8f93\u5165\u7684\u53c2\u6570\u8fd9\u4e48\u7b80\u5355\u3002\u770b\u5230\u95ee\u9898\u65f6\uff0c\u9700\u8981\u601d\u8003\u9898\u76ee\u4e2d\u9690\u542b\u7740\u7684\u6761\u4ef6\u3002","title":"\u4ee3\u7801\u7684\u9c81\u68d2\u6027"},{"location":"\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801/#22-k","text":"\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class ListNode: def __init__(self, x): self.val = x self.next = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u975e\u7a7a\u94fe\u8868\uff0c\u6b63\u6574\u6570 k\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u94fe\u8868\uff0c\u975e\u6b63\u6574\u6570 k\uff08\u8d1f\u6570\u3001\u96f6\u6216\u5c0f\u6570\uff09\uff0ck \u5927\u4e8e\u94fe\u8868\u957f\u5ea6\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u4e2d\u89c4\u4e2d\u77e9\u505a\u6cd5\u3002 def FindKthToTail(head, k): if not head or k <= 0: return None stack = [] node = head while node: stack.append(node) node = node.next if k > len(stack): return None return stack[-k] \u3010\u8bf4\u660e\u3011\uff1a\u56e0\u4e3a\u662f\u5355\u5411\u94fe\u8868\uff0c\u6240\u4ee5\u5f97\u4ece\u5934\u8282\u70b9\u5f00\u59cb\u5411\u5c3e\u8282\u70b9\u904d\u5386\u4e00\u904d\uff0c\u5c06\u904d\u5386\u7684\u8282\u70b9\u4fdd\u5b58\u5230\u5806\u6808\u4e2d\u3002\u63a5\u7740\u5229\u7528\u5806\u6808\u7684\u7279\u6027\u6765\u5b9e\u73b0\u83b7\u53d6\u5012\u6570\u7b2c k \u4e2a\u8282\u70b9\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1aO(n)\uff0c\u6700\u574f\u7684\u60c5\u51b5\u662f k \u521a\u597d\u7b49\u4e8e\u94fe\u8868\u957f\u5ea6\uff0c\u56e0\u6b64\u9700\u8981\u4e24\u4e2a O(n) \u65f6\u95f4\uff08\u5f53\u5b9e\u9645\u4e0a Python \u83b7\u53d6\u5217\u8868\u4e2d\u5143\u7d20\u7684\u65f6\u95f4\u4e3a O(1)\uff09\uff0c\u8fd1\u4f3c\u4e8e O(n)\u3002 \u7a7a\u95f4\u6548\u7387\uff1aO(n)\uff0c\u9700\u8981\u5f00\u8f9f\u7b49\u540c\u4e8e\u94fe\u8868\u957f\u5ea6\u7684\u5806\u6808\u7a7a\u95f4\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5de7\u5999\u7684\u53cc\u6307\u9488\u505a\u6cd5\u3002 def FindKthToTail(head, k): if not head or k <= 0: return None iter_count = 0 node = head node_k = None while node: node = node.next iter_count += 1 if iter_count >= k: if not node_k: node_k = head else: node_k = node_k.next return node_k \u3010\u8bf4\u660e\u3011\uff1a\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488\uff0c\u7b2c\u4e00\u4e2a\u6307\u9488\u4ece\u94fe\u8868\u7684\u5934\u6307\u9488\u5f00\u59cb\u904d\u5386\u5411\u524d\u8d70 k - 1 \u6b65\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488\u4fdd\u6301\u4e0d\u52a8\uff1b\u4ece\u7b2c k \u6b65\u5f00\u59cb\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488\u4e5f\u5f00\u59cb\u4ece\u94fe\u8868\u7684\u5934\u6307\u9488\u5f00\u59cb\u904d\u5386\u3002\u7531\u4e8e\u4e24\u4e2a\u6307\u9488\u7684\u8ddd\u79bb\u4fdd\u6301\u5728 k - 1\uff0c\u5f53\u7b2c\u4e00\u4e2a\u6307\u9488\u8fbe\u5230\u94fe\u8868\u7684\u5c3e\u8282\u70b9\u65f6\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488\u6b63\u597d\u6307\u5411\u5012\u6570\u7b2c k \u4e2a\u8282\u70b9\u3002 \u867d\u7136\u9012\u5f52\u4e5f\u80fd\u5b9e\u73b0\uff0c\u4e0d\u8fc7\u5f97\u501f\u52a9\u9012\u5f52\u51fd\u6570\u5916\u7684\u5168\u5c40\u53d8\u91cf\u6216\u5bf9\u8c61\u5c5e\u6027\u6765\u5b9e\u73b0\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u94fe\u8868\u7684\u7406\u89e3\u3002 \u8003\u67e5\u5e94\u8058\u8005\u6240\u5199\u4ee3\u7801\u7684\u9c81\u68d2\u6027\u3002","title":"\u9762\u8bd5\u9898 22\uff1a\u94fe\u8868\u4e2d\u5012\u6570\u7b2c K \u4e2a\u8282\u70b9"},{"location":"\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801/#22-2","text":"\u6c42\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9\u3002\u5982\u679c\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u603b\u6570\u4e3a\u5947\u6570\uff0c\u5219\u8fd4\u56de\u4e2d\u95f4\u8282\u70b9\uff1b\u5982\u679c\u8282\u70b9\u603b\u6570\u662f\u5076\u6570\uff0c\u5219\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u8282\u70b9\u7684\u4efb\u610f\u4e00\u4e2a\u3002 \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u8282\u70b9\u603b\u6570\u4e3a\u5947\u6570\u7684\u94fe\u8868\u3001\u8282\u70b9\u603b\u6570\u4e3a\u5076\u6570\u7684\u94fe\u8868\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u94fe\u8868\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class ListNode: def __init__(self, x): self.val = x self.next = None \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u4e2d\u89c4\u4e2d\u77e9\u3002 def FindMiddleToTail(head): if not head: return None # \u989d\u5916\u5f00\u8f9f\u4e00\u5757\u5185\u5b58\u7a7a\u95f4\uff0c\u4ee5\u5806\u6808\u7684\u5f62\u5f0f\u5b58\u50a8\u904d\u5386\u8282\u70b9 stack = [] node = head while node: stack.append(node) node = node.next return stack[int(len(stack) / 2)] \u3010\u8bf4\u660e\u3011\uff1a\u904d\u5386\u83b7\u53d6\u94fe\u8868\u4e2a\u8282\u70b9\uff0c\u5e76\u5b58\u50a8\u5230\u5217\u8868\u4e2d\uff0c\u6700\u540e\u83b7\u53d6\u5217\u8868\u4e2d\u95f4\u4f4d\u7f6e\u7684\u8282\u70b9\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u53cc\u6307\u9488\u3002 def FindMiddleToTail(head): if not head: return None node = head node_2 = head while node_2: if not node: break node = node.next if not node: break node = node.next node_2 = node_2.next return node_2 \u3010\u8bf4\u660e\u3011\uff1a\u5f53 node_2 \u6307\u9488\u8d70\u4e00\u6b65\u65f6\uff0cnode \u6307\u9488\u8d70\u4e24\u6b65\uff0c\u56e0\u6b64\u5f53 node \u6307\u9488\u8d70\u5230\u5c3e\u8282\u70b9\u65f6\uff0c\u6b64\u65f6 node_2 \u6307\u9488\u6307\u5411\u4e2d\u95f4\u8282\u70b9\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1aO(n/2) \u7a7a\u95f4\u6548\u7387\uff1aO(1) \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u8ba9 node \u4f5c\u4e3a\u5916\u5c42\u5faa\u73af\u7684\u5224\u5b9a\u6761\u4ef6\u3002 def FindMiddleToTail(head): if not head: return None node = head node_2 = head iter_count = 1 while node: if iter_count & 0x01 == 0: node_2 = node_2.next iter_count += 1 node = node.next return node_2 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1aO(n) \u7a7a\u95f4\u6548\u7387\uff1aO(1) \u5b9e\u9645\u4e0a\u83b7\u53d6\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9\u7b49\u540c\u4e8e\u83b7\u53d6\u94fe\u8868\u5012\u6570 K \u8282\u70b9\u7684\u4e00\u4e2a\u7279\u6b8a\u60c5\u51b5\uff0c\u5373 k = \u94fe\u8868\u957f\u5ea6\u7684\u4e00\u534a\u3002","title":"\u9762\u8bd5\u9898 22-2\uff1a\u6c42\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9"},{"location":"\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801/#23","text":"\u7ed9\u4e00\u4e2a\u94fe\u8868\uff0c\u82e5\u5176\u4e2d\u5305\u542b\u73af\uff0c\u8bf7\u627e\u51fa\u8be5\u94fe\u8868\u7684\u73af\u7684\u5165\u53e3\u7ed3\u70b9\uff0c\u5426\u5219\uff0c\u8f93\u51fa null\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class ListNode: def __init__(self, x): self.val = x self.next = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u542b\u6709\u73af\u7684\u94fe\u8868\uff0c\u6ca1\u6709\u73af\u7684\u94fe\u8868\uff0c\u5355\u4e2a\u8282\u70b9\u7684\u94fe\u8868\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u94fe\u8868\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u8bb0\u5f55\u8282\u70b9\u7684\u65b9\u5f0f\u3002 def EntryNodeOfLoop(pHead): if not pHead: return None node_list = [] node = pHead while node: if node in node_list: return node node_list.append(node) node = node.next return None \u3010\u8bf4\u660e\u3011\uff1a\u904d\u5386\u94fe\u8868\u7684\u540c\u65f6\u8bb0\u5f55\u4e0b\u6bcf\u6b21\u904d\u5386\u7684\u8282\u70b9\u4fe1\u606f\uff0c\u540c\u65f6\u5224\u65ad\u5f53\u524d\u8282\u70b9\u662f\u5426\u5df2\u7ecf\u88ab\u8bb0\u5f55\u3002\u82e5\u5df2\u88ab\u8bb0\u5f55\u5219\u8bf4\u660e\u5f53\u524d\u8282\u70b9\u662f\u73af\u7684\u5165\u53e3\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1aO(n)\uff0c\u81f3\u5c11\u904d\u5386\u4e00\u904d\u94fe\u8868\u3002 \u7a7a\u95f4\u6548\u7387\uff1aO(n)\uff0c\u9700\u8981\u4e0e\u94fe\u8868\u7b49\u957f\u7684\u5217\u8868\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u53cc\u6307\u9488\u6cd5\u3002 def EntryNodeOfLoop(pHead): node_ptr_1, node_ptr_2 = pHead, pHead is_loop, length = False, 1 # \u5224\u65ad\u662f\u5426\u6210\u73af while node_ptr_2: node_ptr_1 = node_ptr_1.next if not node_ptr_1: return None if node_ptr_1 == node_ptr_2: # \u6210\u73af\uff0c\u5219\u627e\u51fa\u94fe\u8868\u7684\u957f\u5ea6 is_loop = True node_ptr_2 = node_ptr_2.next while node_ptr_2 != node_ptr_1: length += 1 node_ptr_2 = node_ptr_2.next break node_ptr_1 = node_ptr_1.next if not node_ptr_1: return None if node_ptr_1 == node_ptr_2: is_loop = True node_ptr_2 = node_ptr_2.next while node_ptr_2 != node_ptr_1: length += 1 node_ptr_2 = node_ptr_2.next break node_ptr_2 = node_ptr_2.next # \u4e0d\u6210\u73af\uff0c\u5219\u8fd4\u56de None if not is_loop: return None node_ptr_1, node_ptr_2 = pHead, pHead # \u5148\u8ba9\u5176\u4e2d\u4e00\u4e2a\u6307\u9488\u79fb\u52a8 length \u957f\u5ea6 for i in list(range(length)): node_ptr_2 = node_ptr_2.next while node_ptr_1 != node_ptr_2: node_ptr_1 = node_ptr_1.next node_ptr_2 = node_ptr_2.next return node_ptr_2 \u3010\u8bf4\u660e\u3011\uff1a \u5982\u4f55\u786e\u5b9a\u4e00\u4e2a\u94fe\u8868\u627e\u4e2d\u5305\u542b\u73af\uff1a\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488\uff0c\u540c\u65f6\u4ece\u94fe\u8868\u7684\u5934\u8282\u70b9\u51fa\u53d1\uff0c\u4e00\u4e2a\u6307\u9488\u4e00\u6b21\u8d70\u4e00\u6b65\uff0c\u53e6\u4e00\u4e2a\u6307\u9488\u4e00\u6b21\u8d70\u4e24\u6b65\u3002\u5982\u679c\u8d70\u5f97\u5feb\u7684\u6307\u9488\u8ffd\u4e0a\u4e86\u8d70\u5f97\u6162\u7684\u6307\u9488\uff0c\u90a3\u4e48\u94fe\u8868\u5c31\u5305\u542b\u73af\uff1b\u5982\u679c\u8d70\u5f97\u5feb\u7684\u6307\u9488\u8d70\u5230\u4e86\u94fe\u8868\u7684\u672b\u5c3e\u90fd\u6ca1\u6709\u8ffd\u4e0a\u7b2c\u4e00\u4e2a\u6307\u9488\uff0c\u90a3\u4e48\u94fe\u8868\u5c31\u4e0d\u5305\u542b\u73af\u3002 \u5982\u4f55\u627e\u5230\u73af\u7684\u5165\u53e3\uff1a\u5148\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488\u6307\u5411\u94fe\u8868\u7684\u5934\u8282\u70b9\uff0c\u5982\u679c\u94fe\u8868\u4e2d\u7684\u73af\u6709 n \u4e2a\u8282\u70b9\uff0c\u5219\u7b2c\u4e00\u4e2a\u6307\u9488\u5148\u5728\u94fe\u8868\u4e0a\u79fb\u52a8 n \u6b65\uff0c\u7136\u540e\u4e24\u4e2a\u6307\u9488\u4ee5\u76f8\u540c\u7684\u901f\u5ea6\u5411\u524d\u79fb\u52a8\u3002\u5f53\u7b2c\u4e8c\u4e2a\u6307\u9488\u6307\u5411\u73af\u7684\u5165\u53e3\u65f6\uff0c\u7b2c\u4e00\u4e2a\u6307\u9488\u5df2\u7ecf\u56f4\u7ed5\u73af\u8d70\u4e86\u4e00\u5708\uff0c\u53c8\u56de\u5230\u4e86\u5165\u53e3\u8282\u70b9\u3002\u56e0\u6b64\u5224\u65ad\u8fd9\u4e24\u4e2a\u6307\u9488\u76f8\u540c\uff0c\u5219\u6307\u9488\u6307\u5411\u7684\u8282\u70b9\u5373\u4e3a\u5165\u53e3\u8282\u70b9\u3002 \u5982\u4f55\u5f97\u5230\u73af\u4e2d\u8282\u70b9\u7684\u6570\u76ee\uff1a\u5728\u5224\u65ad\u662f\u5426\u73af\u7684\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u5b58\u5728\u73af\u5219\u7ee7\u7eed\u6267\u884c\u4e0b\u8ff0\u64cd\u4f5c\u3002\u4ece\u5f53\u524d\u8282\u70b9\u89e6\u53d1\uff0c\u4e00\u8fb9\u7ee7\u7eed\u5411\u524d\u79fb\u52a8\u4e00\u8fb9\u8ba1\u6570\uff0c\u5f53\u518d\u6b21\u56de\u5230\u8be5\u8282\u70b9\u65f6\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u73af\u4e2d\u8282\u70b9\u6570\u4e86\u3002 \u4e0a\u8ff0\u4ee3\u7801\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u8fdb\u884c\u4f18\u5316\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u94fe\u8868\u7684\u7406\u89e3\u3002 \u8003\u67e5\u5e94\u8058\u8005\u6240\u5199\u4ee3\u7801\u7684\u9c81\u68d2\u6027\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u95ee\u9898\u7684\u80fd\u529b\u3002","title":"\u9762\u8bd5\u9898 23\uff1a\u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u8282\u70b9"},{"location":"\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801/#24","text":"\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u53cd\u8f6c\u94fe\u8868\u540e\uff0c\u8f93\u51fa\u65b0\u94fe\u8868\u7684\u8868\u5934\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class ListNode: def __init__(self, x): self.val = x self.next = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u957f\u5ea6\u4e3a 1 \u7684\u94fe\u8868\uff0c\u4efb\u610f\u957f\u5ea6\u7684\u94fe\u8868\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u94fe\u8868\u3002 if __name__ == '__main__': # \u529f\u80fd\u6d4b\u8bd5 test_node1 = get_linklist([1, 2, 3, 4, 5]) result1 = ReverseList(test_node1.root) # \u529f\u80fd\u6d4b\u8bd5\uff1a\u957f\u5ea6\u4e3a 1 \u7684\u94fe\u8868 test_node2 = get_linklist([1]) result2 = ReverseList(test_node2.root) # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5 result3 = ReverseList(None) \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u501f\u52a9\u5806\u6808\u5b9e\u73b0\u3002 def ReverseList(pHead): node_list = [None] node = pHead while node: node_list.append(node) node = node.next node = node_list.pop() head = node while node: cur_node = node_list.pop() node.next = cur_node node = cur_node return head \u3010\u8bf4\u660e\u3011\uff1a\u501f\u52a9\u5806\u6808\uff08\u5217\u8868\uff09\u6765\u5b58\u653e\u6240\u6709\u94fe\u8868\u8282\u70b9\uff0c\u5e76\u5229\u7528\u5806\u6808\u7684\u7279\u6027\u6765\u53cd\u8f6c\u94fe\u8868\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f node_list \u5f00\u59cb\u5b58\u6709 None\uff0c\u5176\u76ee\u7684\u662f\u8ba9\u5f53\u524d\u7684\u5c3e\u8282\u70b9\uff08\u5148\u524d\u7684\u5934\u8282\u70b9\uff09\u7684 next \u6307\u5411 None\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1a\u9700\u8981\u5faa\u73af\u4e24\u6b21\u94fe\u8868\u957f\u5ea6\uff0c\u56e0\u6b64\u9700\u8981 O(2n) \u7684\u65f6\u95f4\u3002 \u7a7a\u95f4\u6548\u7387\uff1a\u9700\u8981\u989d\u5916\u7684\u5806\u6808\uff0c\u5806\u6808\u7684\u957f\u5ea6\u7b49\u540c\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u56e0\u6b64\u9700\u8981 O(n) \u7684\u5185\u5b58\u7a7a\u95f4\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u9012\u5f52 + \u5168\u5c40\u53d8\u91cf\u3002 head = None def ReverseList(pHead): if not pHead: return None tail = loop(pHead) tail.next = None return head def loop(node): if node.next: node_next = loop(node.next) node_next.next = node return node global head head = node return node \u3010\u8bf4\u660e\u3011\uff1a\u9012\u5f52\u7528\u4e8e\u53cd\u8f6c\u94fe\u8868\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u7684\u662f\u53cd\u8f6c\u540e\u7684\u5934\u8282\u70b9\u9700\u8981\u7528\u5168\u5c40\u53d8\u91cf\u6765\u5b58\u50a8\uff0c\u5e76\u4e14\u53cd\u8f6c\u540e\u7684\u5c3e\u8282\u70b9\uff08\u5148\u524d\u7684\u5934\u8282\u70b9\uff09\u7684\u4e0b\u4e00\u4e2a\u6307\u9488\u4ecd\u7136\u662f\u6307\u5411\u5c3e\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u56e0\u6b64\u9700\u8981\u5728\u9012\u5f52\u8c03\u7528\u7ed3\u675f\u540e\uff0c\u5c06\u8fd4\u56de\u7684\u5c3e\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u6307\u9488\u6307\u5411 None\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1a\u94fe\u8868\u957f\u5ea6\u7684\u9012\u5f52\u8c03\u7528\u6b21\u6570\uff0c\u56e0\u6b64\u65f6\u95f4\u6548\u7387\u4e3a O(n)\u3002 \u7a7a\u95f4\u6548\u7387\uff1a\u94fe\u8868\u957f\u5ea6\u7684\u9012\u5f52\u8c03\u7528\u6df1\u5ea6\uff0c\u7a7a\u95f4\u6548\u7387\u4e3a O(n)\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u5de7\u5999\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002 def ReverseList(pHead): node = pHead node_prev = None while node: node_next = node.next node.next = node_prev node_prev, node = node, node_next return node_prev \u3010\u8bf4\u660e\u3011\uff1a\u521d\u59cb\u5316\u65f6\uff0c\u5c06\u5934\u8282\u70b9\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\uff0c\u7a7a\u8282\u70b9\u4f5c\u4e3a\u4e0a\u4e00\u4e2a\u8282\u70b9\u3002\u5728\u904d\u5386\u94fe\u8868\u65f6\uff0c\u9996\u5148\u83b7\u53d6\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5c06\u5f53\u524d\u8282\u70b9\u7684 next \u6307\u5411\u4e0a\u4e00\u4e2a\u8282\u70b9\uff0c\u6700\u540e\u5c06\u5f53\u524d\u8282\u70b9\u8d4b\u503c\u7ed9\u4e0a\u4e00\u4e2a\u8282\u70b9\uff0c\u4e0b\u4e00\u4e2a\u8282\u70b9\u8d4b\u503c\u7ed9\u5f53\u524d\u8282\u70b9\uff0c\u4ee5\u6b64\u6765\u8fdb\u884c\u5faa\u73af\u3002 \u3010\u6838\u5fc3\u601d\u60f3\u3011\uff1a\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u7528\u65b0\u7684\u53d8\u91cf\u4fdd\u5b58\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u4fe1\u606f\uff0c\u56e0\u6b64\u4fee\u6539\u5f53\u524d\u8282\u70b9\u7684 next \u503c\u65f6\u4e0d\u4f1a\u5f71\u54cd\u5230\u5faa\u73af\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1aO(n)\u3002 \u7a7a\u95f4\u6548\u7387\uff1aO(1)\u3002 \u3010\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\u3011\uff1a \u8f93\u5165\u7a7a\u94fe\u8868\u6216\u8005\u6574\u4e2a\u94fe\u8868\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u7a0b\u5e8f\u7acb\u5373\u5d29\u6e83\u3002 \u53cd\u8f6c\u540e\u7684\u94fe\u8868\u51fa\u73b0\u65ad\u88c2\u3002 \u8fd4\u56de\u7684\u53cd\u8f6c\u4e4b\u540e\u7684\u5934\u8282\u70b9\u4e0d\u662f\u539f\u59cb\u94fe\u8868\u7684\u5c3e\u8282\u70b9\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u94fe\u8868\u3001\u6307\u9488\u7684\u7f16\u7a0b\u80fd\u529b\u3002 \u7279\u522b\u6ce8\u91cd\u8003\u67e5\u5e94\u8058\u8005\u601d\u7ef4\u7684\u5168\u9762\u6027\u53ca\u5199\u51fa\u6765\u7684\u4ee3\u7801\u7684\u9c81\u68d2\u6027\u3002","title":"\u9762\u8bd5\u9898 24\uff1a\u53cd\u8f6c\u94fe\u8868"},{"location":"\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801/#25","text":"\u8f93\u5165\u4e24\u4e2a\u5355\u8c03\u9012\u589e\u7684\u94fe\u8868\uff0c\u8f93\u51fa\u4e24\u4e2a\u94fe\u8868\u5408\u6210\u540e\u7684\u94fe\u8868\uff0c\u5f53\u7136\u6211\u4eec\u9700\u8981\u5408\u6210\u540e\u7684\u94fe\u8868\u6ee1\u8db3\u5355\u8c03\u4e0d\u51cf\u89c4\u5219\u3002 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class ListNode: def __init__(self, x): self.val = x self.next = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u4e24\u4e2a\u94fe\u8868\u6709\u591a\u4e2a\u8282\u70b9\uff0c\u8282\u70b9\u7684\u503c\u4e92\u4e0d\u76f8\u540c\u6216\u8005\u5b58\u5728\u503c\u76f8\u7b49\u7684\u591a\u4e2a\u8282\u70b9\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u4e24\u4e2a\u94fe\u8868\u6709\u4e00\u4e2a\u6216\u8005\u4e24\u4e2a\u90fd\u4e3a\u7a7a\u94fe\u8868\uff0c\u4e24\u4e2a\u94fe\u8868\u4e2d\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u3002 def traversal(node): node_list = [] if not node: print('None') while node: node_list.append(node.val) node = node.next print(str(node_list)) def test_1(): \"\"\" \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u5b58\u5728\u7a7a\u94fe\u8868 \"\"\" result1 = Merge(None, None) traversal(result1) result2 = Merge(None, get_linklist([1, 2, 3, 4, 5]).root) traversal(result2) result3 = Merge(get_linklist([1, 2, 3, 4, 5]).root, None) traversal(result3) result4 = Merge(get_linklist([1]).root, get_linklist([2]).root) traversal(result4) def test_2(): \"\"\" \u529f\u80fd\u6d4b\u8bd5\uff1a \"\"\" result1 = Merge(get_linklist([1, 3, 5, 7, 9]).root, get_linklist([2, 4, 6, 8, 10]).root) traversal(result1) result2 = Merge(get_linklist([1]).root, get_linklist([2, 4, 6, 8, 10]).root) traversal(result2) result3 = Merge(get_linklist([1, 3, 5, 7, 9]).root, get_linklist([2]).root) traversal(result3) result4 = Merge(get_linklist([1, 3, 5, 7, 9]).root, get_linklist([2, 3, 4, 5]).root) traversal(result4) if __name__ == '__main__': print('test1') test_1() print('------') print('test2') test_2() print('------') \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u53cc\u6307\u9488\u505a\u6cd5\u3002 def Merge(pHead1, pHead2): ptr_1, ptr_2 = pHead1, pHead2 if not pHead1: return pHead2 elif not pHead2: return pHead1 if ptr_1.val < ptr_2.val: head = ptr_1 ptr_1 = ptr_1.next else: head = ptr_2 ptr_2 = ptr_2.next node = head while True: if not ptr_1: node.next = ptr_2 break if not ptr_2: node.next = ptr_1 break if ptr_1.val < ptr_2.val: node.next = ptr_1 ptr_1 = ptr_1.next else: node.next = ptr_2 ptr_2 = ptr_2.next node = node.next return head \u3010\u8bf4\u660e\u3011\uff1a\u5148\u786e\u5b9a\u5934\u8282\u70b9\uff0c\u7136\u540e\u5728\u5faa\u73af\u4f53\u5185\u6bd4\u8f83\u4e24\u4e2a\u94fe\u8868\u5f53\u524d\u4f4d\u7f6e\u7684\u5927\u5c0f\uff0c\u82e5\u94fe\u8868 1 \u7684\u503c\u5c0f\u4e8e\u94fe\u8868 2 \u7684\u503c\uff0c\u5219\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684 next \u6307\u5411\u94fe\u8868 1 \u5f53\u524d\u8282\u70b9\uff0c\u5e76\u8ba9\u94fe\u8868 1 \u7684\u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002\u6309\u7167\u8be5\u6b65\u9aa4\u4f9d\u6b21\u5faa\u73af\uff0c\u76f4\u5230\u5230\u8fbe\u67d0\u4e2a\u94fe\u8868\u7684\u5c3e\u8282\u70b9\uff0c\u6b64\u65f6\u8ba9\u53e6\u4e00\u4e2a\u94fe\u8868\u6dfb\u52a0\u5230\u5f53\u524d\u8282\u70b9\u7684\u5c3e\u90e8\u5373\u53ef\u3002 \u3010\u6548\u7387\u3011\uff1a \u65f6\u95f4\u6548\u7387\uff1a\u6700\u7cdf\u7cd5\u7684\u60c5\u51b5\u662f\u4e24\u4e2a\u94fe\u8868\u7684\u6570\u636e\u76f8\u4e92\u4ea4\u53c9\uff0c\u5373 [1, 3, 5, 7]\uff0c[2, 4, 6, 8] \u8fd9\u79cd\u60c5\u51b5\uff0c\u56e0\u6b64\u904d\u5386\u7684\u65f6\u957f\u4e3a O(2n)\u3002 \u7a7a\u95f4\u6548\u7387\uff1aO(1)\u3002 \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a\u9012\u5f52\u7684\u65b9\u5f0f\u3002 def Merge(pHead1, pHead2): if not pHead1: return pHead2 if not pHead2: return pHead1 if pHead1.val < pHead2.val: pHead1.next = Merge(pHead1.next, pHead2) return pHead1 else: pHead2.next = Merge(pHead1, pHead2.next) return pHead2 \u3010\u8bf4\u660e\u3011\uff1a\u8003\u8651\u8fc7\u7a0b\u53ef\u4ee5\u53c2\u8003\u300a\u5251\u6307offer\u300b\u7b2c 145-147 \u9875\u7684\u5185\u5bb9\u3002\u4e0d\u8fc7\u5176\u5b9e\u4e5f\u633a\u597d\u7406\u89e3\u7684\uff0c\u5148\u9009\u51fa\u4e24\u4e2a\u5934\u8282\u70b9\u4e2d\u6700\u5c0f\u7684\u8282\u70b9\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\uff0c\u7136\u540e\u8c03\u7528 Merge() \u4ece\u4f59\u4e0b\u7684\u94fe\u8868\u4e2d\u518d\u6b21\u53d6\u51fa\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u4f9d\u6b21\u6267\u884c\u76f4\u5230\u5176\u4e2d\u4e00\u4e2a\u94fe\u8868\u4e3a\u7a7a\uff0c\u6b64\u65f6\u5c06\u53e6\u5916\u4e00\u4e2a\u94fe\u8868\u4f5c\u4e3a\u5c3e\u90e8\u6dfb\u52a0\u5230\u5408\u5e76\u94fe\u8868\u7684\u5c3e\u90e8\u5373\u53ef\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u95ee\u9898\u7684\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u80fd\u4e0d\u80fd\u5199\u51fa\u9c81\u68d2\u7684\u4ee3\u7801\u3002","title":"\u9762\u8bd5\u9898 25\uff1a\u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u5217\u8868"},{"location":"\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801/#26","text":"\u8f93\u5165\u4e24\u68f5\u4e8c\u53c9\u6811A\uff0cB\uff0c\u5224\u65adB\u662f\u4e0d\u662fA\u7684\u5b50\u7ed3\u6784\u3002\uff08ps\uff1a\u6211\u4eec\u7ea6\u5b9a\u7a7a\u6811\u4e0d\u662f\u4efb\u610f\u4e00\u4e2a\u6811\u7684\u5b50\u7ed3\u6784\uff09 \u3010\u6570\u636e\u7ed3\u6784\u3011\uff1a class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None \u3010\u6d4b\u8bd5\u7528\u4f8b\u3011\uff1a \u529f\u80fd\u6d4b\u8bd5\uff1a\u6811A \u548c\u6811 B \u90fd\u662f\u666e\u901a\u7684\u4e8c\u53c9\u6811\u4e14\u7b26\u5408\u8981\u6c42\uff0c\u4e0d\u7b26\u5408\u8981\u6c42\uff0c\u6811 A \u548c\u6811 B \u53ea\u6709\u5de6\u5b50\u6811\u6216\u53f3\u5b50\u6811\u3002 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811\uff0c\u53ea\u6709\u6839\u8282\u70b9\u7684\u6811\u3002 node1 = TreeNode(8) node2 = TreeNode(8) node3 = TreeNode(7) node4 = TreeNode(9) node5 = TreeNode(2) node6 = TreeNode(4) node7 = TreeNode(7) node1.left, node1.right = node2, node3 node2.left, node2.right = node4, node5 node5.left, node5.right = node6, node7 # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u7a7a\u6811 result1 = HasSubtree(node1, None) # \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff1a\u53ea\u6709\u6839\u8282\u70b9 result2 = HasSubtree(node1, TreeNode(4)) # \u529f\u80fd\u6d4b\u8bd5\uff1a sub_node1 = TreeNode(8) sub_node2 = TreeNode(9) sub_node3 = TreeNode(2) sub_node1.left, sub_node1.right = sub_node2, sub_node3 result3 = HasSubtree(node1, sub_node1) # \u529f\u80fd\u6d4b\u8bd5\uff1a sub_node1 = TreeNode(8) sub_node2 = TreeNode(9) sub_node3 = TreeNode(2) sub_node4 = TreeNode(7) sub_node1.left, sub_node1.right = sub_node2, sub_node3 sub_node2.left = sub_node4 result4 = HasSubtree(node1, sub_node1) # \u529f\u80fd\u6d4b\u8bd5\uff1a node1 = TreeNode(8) node2 = TreeNode(8) node3 = TreeNode(9) node4 = TreeNode(2) node5 = TreeNode(5) node1.right, node2.right = node2, node3 node3.right, node4.right = node4, node5 sub_node1 = TreeNode(8) sub_node2 = TreeNode(9) sub_node3 = TreeNode(3) sub_node4 = TreeNode(2) sub_node1.right, sub_node2.left, sub_node2.right = sub_node2, sub_node3, sub_node4 result5 = HasSubtree(node1, sub_node1) \u3010\u7a0b\u5e8f\u5b9e\u73b0\u3011\uff1a def HasSubtree(pRoot1, pRoot2): if not pRoot2: return False node_list = [pRoot1] while len(node_list) > 0: node = node_list.pop(0) if node.val == pRoot2.val: if is_root1_has_root2(node, pRoot2): return True if node.left: node_list.append(node.left) if node.right: node_list.append(node.right) return False def is_root1_has_root2(node1, node2): if node2: if node1 is None: return False if node1.val == node2.val: result_left = is_root1_has_root2(node1.left, node2.left) result_right = is_root1_has_root2(node1.right, node2.right) return result_left and result_right else: return False else: return True \u3010\u8bf4\u660e\u3011\uff1a \u5148\u5c42\u5e8f\u904d\u5386\u6811 A\uff0c\u627e\u51fa\u4e0e\u6811 B \u6839\u8282\u70b9\u76f8\u540c\u7684\u8282\u70b9\uff1b \u4ece\u8be5\u8282\u70b9\u5f00\u59cb\uff0c\u5224\u65ad\u6811 A \u662f\u5426\u5305\u542b\u4e0e\u6811 B \u76f8\u540c\u7684\u7ed3\u6784\u3002 \u9012\u5f52\u5224\u65ad\u8fc7\u7a0b\u4ee5\u6811 B \u4e3a\u4e3b\uff1a \u82e5\u6811 B \u8282\u70b9\u5b58\u5728\uff0c\u800c\u6811 A \u8282\u70b9\u4e0d\u5b58\u5728\uff0c\u5219\u6811 B \u4e00\u5b9a\u4e0d\u662f\u6811 A \u7684\u5b50\u7ed3\u6784\uff1b \u82e5\u6811 B \u8282\u70b9\u4e0e\u6811 A \u8282\u70b9\u4e0d\u76f8\u540c\uff0c\u5219\u6811 B \u4e00\u5b9a\u4e0d\u662f\u6811 A \u7684\u5b50\u7ed3\u6784\uff1b \u82e5\u6811 B \u8282\u70b9\u4e0e\u6811 A \u8282\u70b9\u76f8\u540c\uff0c\u5219\u7ee7\u7eed\u9012\u5f52\u904d\u5386\uff0c\u76f4\u5230\u53f6\u7ed3\u70b9\u3002 \u3010\u7ec6\u8282\u3011\uff1a\u8ba1\u7b97\u673a\u5185\u8868\u793a\u5c0f\u6570\u65f6\u5b58\u5728\u8bef\u5dee\uff0c\u5224\u65ad\u4e24\u4e2a\u5c0f\u6570\u662f\u5426\u76f8\u7b49\uff0c\u6bd4\u8f83\u597d\u7684\u65b9\u6cd5\u662f\u5224\u65ad\u5b83\u4eec\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c\u5728\u4e00\u4e2a\u5f88\u5c0f\u7684\u8303\u56f4\u5185\u3002\u5982\u679c\u76f8\u5dee\u5f88\u5c0f\uff0c\u5219\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u7b49\u7684\u3002 \u3010\u672c\u9898\u8003\u70b9\u3011\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u4e8c\u53c9\u6811\u904d\u5386\u7b97\u6cd5\u7684\u7406\u89e3\u53ca\u9012\u5f52\u7f16\u7a0b\u80fd\u529b\uff1b \u8003\u67e5\u5e94\u8058\u8005\u6240\u5199\u4ee3\u7801\u7684\u9c81\u68d2\u6027\u3002","title":"\u9762\u8bd5\u9898 26\uff1a\u6811\u7684\u5b50\u7ed3\u6784"},{"location":"\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801/#_4","text":"\u672c\u7ae0\u4ece\u89c4\u8303\u6027\u3001\u5b8c\u6574\u6027\u548c\u9c81\u68d2\u6027 3 \u4e2a\u65b9\u9762\u4ecb\u7ecd\u4e86\u5982\u4f55\u5728\u9762\u8bd5\u65f6\u5199\u51fa\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801\u3002 \u5927\u591a\u6570\u9762\u8bd5\u90fd\u8981\u6c42\u5e94\u8058\u8005\u5728\u767d\u7eb8\u6216\u8005\u767d\u677f\u4e0a\u4e9b\u4ee3\u7801\u3002\u5e94\u8058\u8005\u5728\u7f16\u7801\u7684\u65f6\u5019\u8981\u6ce8\u610f\u89c4\u8303\u6027\uff0c\u5c3d\u91cf\u6e05\u6670\u5730\u4e66\u5199\u6bcf\u4e2a\u5b57\u6bcd\uff0c\u901a\u8fc7\u7f29\u8fdb\u548c\u5bf9\u9f50\u62ec\u53f7\u8ba9\u4ee3\u7801\u5e03\u5c40\u5408\u7406\uff0c\u540c\u65f6\u5408\u7406\u547d\u540d\u4ee3\u7801\u4e2d\u7684\u53d8\u91cf\u548c\u51fd\u6570\u3002 \u6700\u597d\u5728\u7f16\u7801\u4e4b\u524d\u5168\u9762\u8003\u8651\u6240\u6709\u53ef\u80fd\u7684\u8f93\u5165\uff0c\u786e\u4fdd\u5199\u51fa\u7684\u4ee3\u7801\u5728\u5b8c\u6210\u4e86 \u57fa\u672c\u529f\u80fd \u4e4b\u5916\uff0c\u8fd8\u8003\u8651 \u8fb9\u754c\u6761\u4ef6 \uff0c\u5e76\u505a\u597d\u4e86 \u9519\u8bef\u5904\u7406 \u3002\u53ea\u6709\u5168\u9762\u8003\u8651\u5230\u8fd9 3 \u4e2a\u65b9\u9762\u7684\u4ee3\u7801\u624d\u662f\u5b8c\u6574\u7684\u4ee3\u7801\u3002 \u53e6\u5916\uff0c\u8981\u786e\u4fdd\u81ea\u5df1\u5199\u51fa\u7684\u7a0b\u5e8f\u4e0d\u4f1a\u8f7b\u6613\u5d29\u6e83\u3002\u5e73\u65f6\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\uff0c \u5e94\u8058\u8005\u6700\u597d\u517b\u6210\u9632\u5fa1\u6027\u7f16\u7a0b\u7684\u4e60\u60ef \uff0c\u5728\u51fd\u6570\u5165\u53e3\u5224\u65ad\u8f93\u5165\u662f\u5426\u6709\u6548\uff0c\u5e76\u5bf9\u5404\u79cd\u65e0\u6548\u8f93\u5165\u505a\u597d\u76f8\u5e94\u7684\u5904\u7406\u3002 \u3010\u89c4\u8303\u6027\u3011\uff1a \u4e66\u5199\u6e05\u6670 \u5e03\u5c40\u6e05\u6670 \u547d\u540d\u5408\u7406 \u3010\u5b8c\u6574\u6027\u3011\uff1a \u5b8c\u6210\u57fa\u672c\u529f\u80fd \u8003\u8651\u8fb9\u754c\u6761\u4ef6 \u505a\u597d\u9519\u8bef\u5904\u7406 \u3010\u9c81\u68d2\u6027\u3011\uff1a \u91c7\u53d6\u9632\u5fa1\u6027\u7f16\u7a0b \u5904\u7406\u65e0\u6548\u7684\u8f93\u5165","title":"\u672c\u7ae0\u5c0f\u7ed3"}]}